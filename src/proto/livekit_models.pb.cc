// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: livekit_models.proto

#include "livekit_models.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace livekit {
constexpr Room::Room(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enabled_codecs_()
  , sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , turn_password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , empty_timeout_(0u)
  , max_participants_(0u)
  , creation_time_(int64_t{0})
  , num_participants_(0u)
  , active_recording_(false){}
struct RoomDefaultTypeInternal {
  constexpr RoomDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoomDefaultTypeInternal() {}
  union {
    Room _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoomDefaultTypeInternal _Room_default_instance_;
constexpr Codec::Codec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mime_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fmtp_line_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CodecDefaultTypeInternal {
  constexpr CodecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CodecDefaultTypeInternal() {}
  union {
    Codec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CodecDefaultTypeInternal _Codec_default_instance_;
constexpr ParticipantPermission::ParticipantPermission(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : can_subscribe_(false)
  , can_publish_(false)
  , can_publish_data_(false)
  , hidden_(false)
  , recorder_(false){}
struct ParticipantPermissionDefaultTypeInternal {
  constexpr ParticipantPermissionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParticipantPermissionDefaultTypeInternal() {}
  union {
    ParticipantPermission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParticipantPermissionDefaultTypeInternal _ParticipantPermission_default_instance_;
constexpr ParticipantInfo::ParticipantInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tracks_()
  , sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , identity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , region_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , permission_(nullptr)
  , joined_at_(int64_t{0})
  , state_(0)

  , version_(0u)
  , is_publisher_(false){}
struct ParticipantInfoDefaultTypeInternal {
  constexpr ParticipantInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParticipantInfoDefaultTypeInternal() {}
  union {
    ParticipantInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParticipantInfoDefaultTypeInternal _ParticipantInfo_default_instance_;
constexpr TrackInfo::TrackInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : layers_()
  , sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mime_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , width_(0u)
  , height_(0u)
  , muted_(false)
  , simulcast_(false)
  , disable_dtx_(false)
  , source_(0)
{}
struct TrackInfoDefaultTypeInternal {
  constexpr TrackInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackInfoDefaultTypeInternal() {}
  union {
    TrackInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackInfoDefaultTypeInternal _TrackInfo_default_instance_;
constexpr VideoLayer::VideoLayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quality_(0)

  , width_(0u)
  , height_(0u)
  , bitrate_(0u)
  , ssrc_(0u){}
struct VideoLayerDefaultTypeInternal {
  constexpr VideoLayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VideoLayerDefaultTypeInternal() {}
  union {
    VideoLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VideoLayerDefaultTypeInternal _VideoLayer_default_instance_;
constexpr DataPacket::DataPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kind_(0)

  , _oneof_case_{}{}
struct DataPacketDefaultTypeInternal {
  constexpr DataPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataPacketDefaultTypeInternal() {}
  union {
    DataPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataPacketDefaultTypeInternal _DataPacket_default_instance_;
constexpr ActiveSpeakerUpdate::ActiveSpeakerUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : speakers_(){}
struct ActiveSpeakerUpdateDefaultTypeInternal {
  constexpr ActiveSpeakerUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActiveSpeakerUpdateDefaultTypeInternal() {}
  union {
    ActiveSpeakerUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActiveSpeakerUpdateDefaultTypeInternal _ActiveSpeakerUpdate_default_instance_;
constexpr SpeakerInfo::SpeakerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , level_(0)
  , active_(false){}
struct SpeakerInfoDefaultTypeInternal {
  constexpr SpeakerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpeakerInfoDefaultTypeInternal() {}
  union {
    SpeakerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpeakerInfoDefaultTypeInternal _SpeakerInfo_default_instance_;
constexpr UserPacket::UserPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : destination_sids_()
  , participant_sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UserPacketDefaultTypeInternal {
  constexpr UserPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserPacketDefaultTypeInternal() {}
  union {
    UserPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserPacketDefaultTypeInternal _UserPacket_default_instance_;
constexpr ParticipantTracks::ParticipantTracks(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : track_sids_()
  , participant_sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ParticipantTracksDefaultTypeInternal {
  constexpr ParticipantTracksDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParticipantTracksDefaultTypeInternal() {}
  union {
    ParticipantTracks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParticipantTracksDefaultTypeInternal _ParticipantTracks_default_instance_;
constexpr ClientInfo::ClientInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , os_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , os_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sdk_(0)

  , protocol_(0){}
struct ClientInfoDefaultTypeInternal {
  constexpr ClientInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientInfoDefaultTypeInternal() {}
  union {
    ClientInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientInfoDefaultTypeInternal _ClientInfo_default_instance_;
constexpr ClientConfiguration::ClientConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : video_(nullptr)
  , screen_(nullptr)
  , resume_connection_(0)
{}
struct ClientConfigurationDefaultTypeInternal {
  constexpr ClientConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientConfigurationDefaultTypeInternal() {}
  union {
    ClientConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientConfigurationDefaultTypeInternal _ClientConfiguration_default_instance_;
constexpr VideoConfiguration::VideoConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hardware_encoder_(0)
{}
struct VideoConfigurationDefaultTypeInternal {
  constexpr VideoConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VideoConfigurationDefaultTypeInternal() {}
  union {
    VideoConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VideoConfigurationDefaultTypeInternal _VideoConfiguration_default_instance_;
constexpr RTPStats_GapHistogramEntry_DoNotUse::RTPStats_GapHistogramEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RTPStats_GapHistogramEntry_DoNotUseDefaultTypeInternal {
  constexpr RTPStats_GapHistogramEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RTPStats_GapHistogramEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RTPStats_GapHistogramEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RTPStats_GapHistogramEntry_DoNotUseDefaultTypeInternal _RTPStats_GapHistogramEntry_DoNotUse_default_instance_;
constexpr RTPStats::RTPStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gap_histogram_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , start_time_(nullptr)
  , end_time_(nullptr)
  , last_pli_(nullptr)
  , last_fir_(nullptr)
  , last_key_frame_(nullptr)
  , last_layer_lock_pli_(nullptr)
  , duration_(0)
  , packet_rate_(0)
  , bytes_(uint64_t{0u})
  , packets_(0u)
  , packets_lost_(0u)
  , bitrate_(0)
  , packet_loss_rate_(0)
  , packet_loss_percentage_(0)
  , packets_duplicate_(0u)
  , packet_duplicate_rate_(0)
  , bytes_duplicate_(uint64_t{0u})
  , bitrate_duplicate_(0)
  , packet_padding_rate_(0)
  , bytes_padding_(uint64_t{0u})
  , packets_padding_(0u)
  , packets_out_of_order_(0u)
  , bitrate_padding_(0)
  , frame_rate_(0)
  , jitter_current_(0)
  , frames_(0u)
  , nacks_(0u)
  , jitter_max_(0)
  , nack_misses_(0u)
  , plis_(0u)
  , firs_(0u)
  , rtt_current_(0u)
  , rtt_max_(0u)
  , key_frames_(0u)
  , layer_lock_plis_(0u)
  , nack_acks_(0u)
  , nack_repeated_(0u){}
struct RTPStatsDefaultTypeInternal {
  constexpr RTPStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RTPStatsDefaultTypeInternal() {}
  union {
    RTPStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RTPStatsDefaultTypeInternal _RTPStats_default_instance_;
}  // namespace livekit
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_livekit_5fmodels_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_livekit_5fmodels_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_livekit_5fmodels_2eproto = nullptr;

const uint32_t TableStruct_livekit_5fmodels_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::Room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::Room, sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, name_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, empty_timeout_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, max_participants_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, creation_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, turn_password_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, enabled_codecs_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, metadata_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, num_participants_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, active_recording_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::Codec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::Codec, mime_),
  PROTOBUF_FIELD_OFFSET(::livekit::Codec, fmtp_line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, can_subscribe_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, can_publish_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, can_publish_data_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, hidden_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, recorder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, state_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, tracks_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, metadata_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, joined_at_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, name_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, version_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, permission_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, region_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, is_publisher_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, type_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, name_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, muted_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, width_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, height_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, simulcast_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, disable_dtx_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, source_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, layers_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, mime_type_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, mid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::VideoLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::VideoLayer, quality_),
  PROTOBUF_FIELD_OFFSET(::livekit::VideoLayer, width_),
  PROTOBUF_FIELD_OFFSET(::livekit::VideoLayer, height_),
  PROTOBUF_FIELD_OFFSET(::livekit::VideoLayer, bitrate_),
  PROTOBUF_FIELD_OFFSET(::livekit::VideoLayer, ssrc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::DataPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::DataPacket, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::DataPacket, kind_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::DataPacket, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ActiveSpeakerUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ActiveSpeakerUpdate, speakers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SpeakerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SpeakerInfo, sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::SpeakerInfo, level_),
  PROTOBUF_FIELD_OFFSET(::livekit::SpeakerInfo, active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, participant_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, payload_),
  PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, destination_sids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantTracks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantTracks, participant_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantTracks, track_sids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, sdk_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, version_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, protocol_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, os_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, os_version_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, device_model_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, browser_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, browser_version_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ClientConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ClientConfiguration, video_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientConfiguration, screen_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientConfiguration, resume_connection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::VideoConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::VideoConfiguration, hardware_encoder_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats_GapHistogramEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats_GapHistogramEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats_GapHistogramEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats_GapHistogramEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, start_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, end_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, duration_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, packets_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, packet_rate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, bytes_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, bitrate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, packets_lost_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, packet_loss_rate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, packet_loss_percentage_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, packets_duplicate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, packet_duplicate_rate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, bytes_duplicate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, bitrate_duplicate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, packets_padding_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, packet_padding_rate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, bytes_padding_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, bitrate_padding_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, packets_out_of_order_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, frames_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, frame_rate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, jitter_current_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, jitter_max_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, gap_histogram_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, nacks_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, nack_acks_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, nack_misses_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, nack_repeated_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, plis_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, last_pli_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, firs_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, last_fir_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, rtt_current_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, rtt_max_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, key_frames_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, last_key_frame_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, layer_lock_plis_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, last_layer_lock_pli_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::livekit::Room)},
  { 16, -1, -1, sizeof(::livekit::Codec)},
  { 24, -1, -1, sizeof(::livekit::ParticipantPermission)},
  { 35, -1, -1, sizeof(::livekit::ParticipantInfo)},
  { 52, -1, -1, sizeof(::livekit::TrackInfo)},
  { 70, -1, -1, sizeof(::livekit::VideoLayer)},
  { 81, -1, -1, sizeof(::livekit::DataPacket)},
  { 91, -1, -1, sizeof(::livekit::ActiveSpeakerUpdate)},
  { 98, -1, -1, sizeof(::livekit::SpeakerInfo)},
  { 107, -1, -1, sizeof(::livekit::UserPacket)},
  { 116, -1, -1, sizeof(::livekit::ParticipantTracks)},
  { 124, -1, -1, sizeof(::livekit::ClientInfo)},
  { 139, -1, -1, sizeof(::livekit::ClientConfiguration)},
  { 148, -1, -1, sizeof(::livekit::VideoConfiguration)},
  { 155, 163, -1, sizeof(::livekit::RTPStats_GapHistogramEntry_DoNotUse)},
  { 165, -1, -1, sizeof(::livekit::RTPStats)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_Room_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_Codec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_ParticipantPermission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_ParticipantInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_TrackInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_VideoLayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_DataPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_ActiveSpeakerUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_SpeakerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_UserPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_ParticipantTracks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_ClientInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_ClientConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_VideoConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_RTPStats_GapHistogramEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_RTPStats_default_instance_),
};

const char descriptor_table_protodef_livekit_5fmodels_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024livekit_models.proto\022\007livekit\032\037google/"
  "protobuf/timestamp.proto\"\356\001\n\004Room\022\013\n\003sid"
  "\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\025\n\rempty_timeout\030\003 "
  "\001(\r\022\030\n\020max_participants\030\004 \001(\r\022\025\n\rcreatio"
  "n_time\030\005 \001(\003\022\025\n\rturn_password\030\006 \001(\t\022&\n\016e"
  "nabled_codecs\030\007 \003(\0132\016.livekit.Codec\022\020\n\010m"
  "etadata\030\010 \001(\t\022\030\n\020num_participants\030\t \001(\r\022"
  "\030\n\020active_recording\030\n \001(\010\"(\n\005Codec\022\014\n\004mi"
  "me\030\001 \001(\t\022\021\n\tfmtp_line\030\002 \001(\t\"\177\n\025Participa"
  "ntPermission\022\025\n\rcan_subscribe\030\001 \001(\010\022\023\n\013c"
  "an_publish\030\002 \001(\010\022\030\n\020can_publish_data\030\003 \001"
  "(\010\022\016\n\006hidden\030\007 \001(\010\022\020\n\010recorder\030\010 \001(\010\"\341\002\n"
  "\017ParticipantInfo\022\013\n\003sid\030\001 \001(\t\022\020\n\010identit"
  "y\030\002 \001(\t\022-\n\005state\030\003 \001(\0162\036.livekit.Partici"
  "pantInfo.State\022\"\n\006tracks\030\004 \003(\0132\022.livekit"
  ".TrackInfo\022\020\n\010metadata\030\005 \001(\t\022\021\n\tjoined_a"
  "t\030\006 \001(\003\022\014\n\004name\030\t \001(\t\022\017\n\007version\030\n \001(\r\0222"
  "\n\npermission\030\013 \001(\0132\036.livekit.Participant"
  "Permission\022\016\n\006region\030\014 \001(\t\022\024\n\014is_publish"
  "er\030\r \001(\010\">\n\005State\022\013\n\007JOINING\020\000\022\n\n\006JOINED"
  "\020\001\022\n\n\006ACTIVE\020\002\022\020\n\014DISCONNECTED\020\003\"\211\002\n\tTra"
  "ckInfo\022\013\n\003sid\030\001 \001(\t\022 \n\004type\030\002 \001(\0162\022.live"
  "kit.TrackType\022\014\n\004name\030\003 \001(\t\022\r\n\005muted\030\004 \001"
  "(\010\022\r\n\005width\030\005 \001(\r\022\016\n\006height\030\006 \001(\r\022\021\n\tsim"
  "ulcast\030\007 \001(\010\022\023\n\013disable_dtx\030\010 \001(\010\022$\n\006sou"
  "rce\030\t \001(\0162\024.livekit.TrackSource\022#\n\006layer"
  "s\030\n \003(\0132\023.livekit.VideoLayer\022\021\n\tmime_typ"
  "e\030\013 \001(\t\022\013\n\003mid\030\014 \001(\t\"r\n\nVideoLayer\022&\n\007qu"
  "ality\030\001 \001(\0162\025.livekit.VideoQuality\022\r\n\005wi"
  "dth\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\022\017\n\007bitrate\030\004 \001"
  "(\r\022\014\n\004ssrc\030\005 \001(\r\"\264\001\n\nDataPacket\022&\n\004kind\030"
  "\001 \001(\0162\030.livekit.DataPacket.Kind\022#\n\004user\030"
  "\002 \001(\0132\023.livekit.UserPacketH\000\022/\n\007speaker\030"
  "\003 \001(\0132\034.livekit.ActiveSpeakerUpdateH\000\"\037\n"
  "\004Kind\022\014\n\010RELIABLE\020\000\022\t\n\005LOSSY\020\001B\007\n\005value\""
  "=\n\023ActiveSpeakerUpdate\022&\n\010speakers\030\001 \003(\013"
  "2\024.livekit.SpeakerInfo\"9\n\013SpeakerInfo\022\013\n"
  "\003sid\030\001 \001(\t\022\r\n\005level\030\002 \001(\002\022\016\n\006active\030\003 \001("
  "\010\"P\n\nUserPacket\022\027\n\017participant_sid\030\001 \001(\t"
  "\022\017\n\007payload\030\002 \001(\014\022\030\n\020destination_sids\030\003 "
  "\003(\t\"@\n\021ParticipantTracks\022\027\n\017participant_"
  "sid\030\001 \001(\t\022\022\n\ntrack_sids\030\002 \003(\t\"\232\002\n\nClient"
  "Info\022$\n\003sdk\030\001 \001(\0162\027.livekit.ClientInfo.S"
  "DK\022\017\n\007version\030\002 \001(\t\022\020\n\010protocol\030\003 \001(\005\022\n\n"
  "\002os\030\004 \001(\t\022\022\n\nos_version\030\005 \001(\t\022\024\n\014device_"
  "model\030\006 \001(\t\022\017\n\007browser\030\007 \001(\t\022\027\n\017browser_"
  "version\030\010 \001(\t\022\017\n\007address\030\t \001(\t\"R\n\003SDK\022\013\n"
  "\007UNKNOWN\020\000\022\006\n\002JS\020\001\022\t\n\005SWIFT\020\002\022\013\n\007ANDROID"
  "\020\003\022\013\n\007FLUTTER\020\004\022\006\n\002GO\020\005\022\t\n\005UNITY\020\006\"\247\001\n\023C"
  "lientConfiguration\022*\n\005video\030\001 \001(\0132\033.live"
  "kit.VideoConfiguration\022+\n\006screen\030\002 \001(\0132\033"
  ".livekit.VideoConfiguration\0227\n\021resume_co"
  "nnection\030\003 \001(\0162\034.livekit.ClientConfigSet"
  "ting\"L\n\022VideoConfiguration\0226\n\020hardware_e"
  "ncoder\030\001 \001(\0162\034.livekit.ClientConfigSetti"
  "ng\"\311\010\n\010RTPStats\022.\n\nstart_time\030\001 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\022,\n\010end_time\030\002 \001("
  "\0132\032.google.protobuf.Timestamp\022\020\n\010duratio"
  "n\030\003 \001(\001\022\017\n\007packets\030\004 \001(\r\022\023\n\013packet_rate\030"
  "\005 \001(\001\022\r\n\005bytes\030\006 \001(\004\022\017\n\007bitrate\030\007 \001(\001\022\024\n"
  "\014packets_lost\030\010 \001(\r\022\030\n\020packet_loss_rate\030"
  "\t \001(\001\022\036\n\026packet_loss_percentage\030\n \001(\002\022\031\n"
  "\021packets_duplicate\030\013 \001(\r\022\035\n\025packet_dupli"
  "cate_rate\030\014 \001(\001\022\027\n\017bytes_duplicate\030\r \001(\004"
  "\022\031\n\021bitrate_duplicate\030\016 \001(\001\022\027\n\017packets_p"
  "adding\030\017 \001(\r\022\033\n\023packet_padding_rate\030\020 \001("
  "\001\022\025\n\rbytes_padding\030\021 \001(\004\022\027\n\017bitrate_padd"
  "ing\030\022 \001(\001\022\034\n\024packets_out_of_order\030\023 \001(\r\022"
  "\016\n\006frames\030\024 \001(\r\022\022\n\nframe_rate\030\025 \001(\001\022\026\n\016j"
  "itter_current\030\026 \001(\001\022\022\n\njitter_max\030\027 \001(\001\022"
  ":\n\rgap_histogram\030\030 \003(\0132#.livekit.RTPStat"
  "s.GapHistogramEntry\022\r\n\005nacks\030\031 \001(\r\022\021\n\tna"
  "ck_acks\030% \001(\r\022\023\n\013nack_misses\030\032 \001(\r\022\025\n\rna"
  "ck_repeated\030& \001(\r\022\014\n\004plis\030\033 \001(\r\022,\n\010last_"
  "pli\030\034 \001(\0132\032.google.protobuf.Timestamp\022\014\n"
  "\004firs\030\035 \001(\r\022,\n\010last_fir\030\036 \001(\0132\032.google.p"
  "rotobuf.Timestamp\022\023\n\013rtt_current\030\037 \001(\r\022\017"
  "\n\007rtt_max\030  \001(\r\022\022\n\nkey_frames\030! \001(\r\0222\n\016l"
  "ast_key_frame\030\" \001(\0132\032.google.protobuf.Ti"
  "mestamp\022\027\n\017layer_lock_plis\030# \001(\r\0227\n\023last"
  "_layer_lock_pli\030$ \001(\0132\032.google.protobuf."
  "Timestamp\0323\n\021GapHistogramEntry\022\013\n\003key\030\001 "
  "\001(\005\022\r\n\005value\030\002 \001(\r:\0028\001*+\n\tTrackType\022\t\n\005A"
  "UDIO\020\000\022\t\n\005VIDEO\020\001\022\010\n\004DATA\020\002*`\n\013TrackSour"
  "ce\022\013\n\007UNKNOWN\020\000\022\n\n\006CAMERA\020\001\022\016\n\nMICROPHON"
  "E\020\002\022\020\n\014SCREEN_SHARE\020\003\022\026\n\022SCREEN_SHARE_AU"
  "DIO\020\004*6\n\014VideoQuality\022\007\n\003LOW\020\000\022\n\n\006MEDIUM"
  "\020\001\022\010\n\004HIGH\020\002\022\007\n\003OFF\020\003*6\n\021ConnectionQuali"
  "ty\022\010\n\004POOR\020\000\022\010\n\004GOOD\020\001\022\r\n\tEXCELLENT\020\002*;\n"
  "\023ClientConfigSetting\022\t\n\005UNSET\020\000\022\014\n\010DISAB"
  "LED\020\001\022\013\n\007ENABLED\020\002BFZ#github.com/livekit"
  "/protocol/livekit\252\002\rLiveKit.Proto\352\002\016Live"
  "Kit::Protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_livekit_5fmodels_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_livekit_5fmodels_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_livekit_5fmodels_2eproto = {
  false, false, 3698, descriptor_table_protodef_livekit_5fmodels_2eproto, "livekit_models.proto", 
  &descriptor_table_livekit_5fmodels_2eproto_once, descriptor_table_livekit_5fmodels_2eproto_deps, 1, 16,
  schemas, file_default_instances, TableStruct_livekit_5fmodels_2eproto::offsets,
  file_level_metadata_livekit_5fmodels_2eproto, file_level_enum_descriptors_livekit_5fmodels_2eproto, file_level_service_descriptors_livekit_5fmodels_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_livekit_5fmodels_2eproto_getter() {
  return &descriptor_table_livekit_5fmodels_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_livekit_5fmodels_2eproto(&descriptor_table_livekit_5fmodels_2eproto);
namespace livekit {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParticipantInfo_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[0];
}
bool ParticipantInfo_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ParticipantInfo_State ParticipantInfo::JOINING;
constexpr ParticipantInfo_State ParticipantInfo::JOINED;
constexpr ParticipantInfo_State ParticipantInfo::ACTIVE;
constexpr ParticipantInfo_State ParticipantInfo::DISCONNECTED;
constexpr ParticipantInfo_State ParticipantInfo::State_MIN;
constexpr ParticipantInfo_State ParticipantInfo::State_MAX;
constexpr int ParticipantInfo::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataPacket_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[1];
}
bool DataPacket_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DataPacket_Kind DataPacket::RELIABLE;
constexpr DataPacket_Kind DataPacket::LOSSY;
constexpr DataPacket_Kind DataPacket::Kind_MIN;
constexpr DataPacket_Kind DataPacket::Kind_MAX;
constexpr int DataPacket::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientInfo_SDK_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[2];
}
bool ClientInfo_SDK_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientInfo_SDK ClientInfo::UNKNOWN;
constexpr ClientInfo_SDK ClientInfo::JS;
constexpr ClientInfo_SDK ClientInfo::SWIFT;
constexpr ClientInfo_SDK ClientInfo::ANDROID;
constexpr ClientInfo_SDK ClientInfo::FLUTTER;
constexpr ClientInfo_SDK ClientInfo::GO;
constexpr ClientInfo_SDK ClientInfo::UNITY;
constexpr ClientInfo_SDK ClientInfo::SDK_MIN;
constexpr ClientInfo_SDK ClientInfo::SDK_MAX;
constexpr int ClientInfo::SDK_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[3];
}
bool TrackType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[4];
}
bool TrackSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VideoQuality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[5];
}
bool VideoQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionQuality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[6];
}
bool ConnectionQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientConfigSetting_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[7];
}
bool ClientConfigSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Room::_Internal {
 public:
};

Room::Room(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  enabled_codecs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.Room)
}
Room::Room(const Room& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      enabled_codecs_(from.enabled_codecs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sid(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  turn_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    turn_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_turn_password().empty()) {
    turn_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_turn_password(), 
      GetArenaForAllocation());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArenaForAllocation());
  }
  ::memcpy(&empty_timeout_, &from.empty_timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_recording_) -
    reinterpret_cast<char*>(&empty_timeout_)) + sizeof(active_recording_));
  // @@protoc_insertion_point(copy_constructor:livekit.Room)
}

inline void Room::SharedCtor() {
sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
turn_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  turn_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&empty_timeout_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&active_recording_) -
    reinterpret_cast<char*>(&empty_timeout_)) + sizeof(active_recording_));
}

Room::~Room() {
  // @@protoc_insertion_point(destructor:livekit.Room)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Room::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  turn_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Room::ArenaDtor(void* object) {
  Room* _this = reinterpret_cast< Room* >(object);
  (void)_this;
}
void Room::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Room::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Room::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.Room)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_codecs_.Clear();
  sid_.ClearToEmpty();
  name_.ClearToEmpty();
  turn_password_.ClearToEmpty();
  metadata_.ClearToEmpty();
  ::memset(&empty_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_recording_) -
      reinterpret_cast<char*>(&empty_timeout_)) + sizeof(active_recording_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Room::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.Room.sid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.Room.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 empty_timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          empty_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_participants = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          max_participants_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 creation_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string turn_password = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_turn_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.Room.turn_password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.Codec enabled_codecs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enabled_codecs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string metadata = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.Room.metadata"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_participants = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          num_participants_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool active_recording = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          active_recording_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Room::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.Room)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Room.sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Room.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 empty_timeout = 3;
  if (this->_internal_empty_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_empty_timeout(), target);
  }

  // uint32 max_participants = 4;
  if (this->_internal_max_participants() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_participants(), target);
  }

  // int64 creation_time = 5;
  if (this->_internal_creation_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_creation_time(), target);
  }

  // string turn_password = 6;
  if (!this->_internal_turn_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_turn_password().data(), static_cast<int>(this->_internal_turn_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Room.turn_password");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_turn_password(), target);
  }

  // repeated .livekit.Codec enabled_codecs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_enabled_codecs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_enabled_codecs(i), target, stream);
  }

  // string metadata = 8;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Room.metadata");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_metadata(), target);
  }

  // uint32 num_participants = 9;
  if (this->_internal_num_participants() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_num_participants(), target);
  }

  // bool active_recording = 10;
  if (this->_internal_active_recording() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_active_recording(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.Room)
  return target;
}

size_t Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.Room)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.Codec enabled_codecs = 7;
  total_size += 1UL * this->_internal_enabled_codecs_size();
  for (const auto& msg : this->enabled_codecs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string turn_password = 6;
  if (!this->_internal_turn_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_turn_password());
  }

  // string metadata = 8;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // uint32 empty_timeout = 3;
  if (this->_internal_empty_timeout() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_empty_timeout());
  }

  // uint32 max_participants = 4;
  if (this->_internal_max_participants() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_participants());
  }

  // int64 creation_time = 5;
  if (this->_internal_creation_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_creation_time());
  }

  // uint32 num_participants = 9;
  if (this->_internal_num_participants() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_participants());
  }

  // bool active_recording = 10;
  if (this->_internal_active_recording() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Room::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Room::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Room::GetClassData() const { return &_class_data_; }

void Room::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Room *>(to)->MergeFrom(
      static_cast<const Room &>(from));
}


void Room::MergeFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.Room)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  enabled_codecs_.MergeFrom(from.enabled_codecs_);
  if (!from._internal_sid().empty()) {
    _internal_set_sid(from._internal_sid());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_turn_password().empty()) {
    _internal_set_turn_password(from._internal_turn_password());
  }
  if (!from._internal_metadata().empty()) {
    _internal_set_metadata(from._internal_metadata());
  }
  if (from._internal_empty_timeout() != 0) {
    _internal_set_empty_timeout(from._internal_empty_timeout());
  }
  if (from._internal_max_participants() != 0) {
    _internal_set_max_participants(from._internal_max_participants());
  }
  if (from._internal_creation_time() != 0) {
    _internal_set_creation_time(from._internal_creation_time());
  }
  if (from._internal_num_participants() != 0) {
    _internal_set_num_participants(from._internal_num_participants());
  }
  if (from._internal_active_recording() != 0) {
    _internal_set_active_recording(from._internal_active_recording());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Room::CopyFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room::IsInitialized() const {
  return true;
}

void Room::InternalSwap(Room* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  enabled_codecs_.InternalSwap(&other->enabled_codecs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sid_, lhs_arena,
      &other->sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &turn_password_, lhs_arena,
      &other->turn_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &metadata_, lhs_arena,
      &other->metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Room, active_recording_)
      + sizeof(Room::active_recording_)
      - PROTOBUF_FIELD_OFFSET(Room, empty_timeout_)>(
          reinterpret_cast<char*>(&empty_timeout_),
          reinterpret_cast<char*>(&other->empty_timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Room::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[0]);
}

// ===================================================================

class Codec::_Internal {
 public:
};

Codec::Codec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.Codec)
}
Codec::Codec(const Codec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime().empty()) {
    mime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mime(), 
      GetArenaForAllocation());
  }
  fmtp_line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fmtp_line_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fmtp_line().empty()) {
    fmtp_line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fmtp_line(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.Codec)
}

inline void Codec::SharedCtor() {
mime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fmtp_line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fmtp_line_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Codec::~Codec() {
  // @@protoc_insertion_point(destructor:livekit.Codec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Codec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fmtp_line_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Codec::ArenaDtor(void* object) {
  Codec* _this = reinterpret_cast< Codec* >(object);
  (void)_this;
}
void Codec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Codec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Codec::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.Codec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mime_.ClearToEmpty();
  fmtp_line_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Codec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.Codec.mime"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fmtp_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_fmtp_line();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.Codec.fmtp_line"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Codec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.Codec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mime = 1;
  if (!this->_internal_mime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime().data(), static_cast<int>(this->_internal_mime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Codec.mime");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mime(), target);
  }

  // string fmtp_line = 2;
  if (!this->_internal_fmtp_line().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fmtp_line().data(), static_cast<int>(this->_internal_fmtp_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Codec.fmtp_line");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fmtp_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.Codec)
  return target;
}

size_t Codec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.Codec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mime = 1;
  if (!this->_internal_mime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime());
  }

  // string fmtp_line = 2;
  if (!this->_internal_fmtp_line().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fmtp_line());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Codec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Codec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Codec::GetClassData() const { return &_class_data_; }

void Codec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Codec *>(to)->MergeFrom(
      static_cast<const Codec &>(from));
}


void Codec::MergeFrom(const Codec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.Codec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mime().empty()) {
    _internal_set_mime(from._internal_mime());
  }
  if (!from._internal_fmtp_line().empty()) {
    _internal_set_fmtp_line(from._internal_fmtp_line());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Codec::CopyFrom(const Codec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.Codec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Codec::IsInitialized() const {
  return true;
}

void Codec::InternalSwap(Codec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mime_, lhs_arena,
      &other->mime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fmtp_line_, lhs_arena,
      &other->fmtp_line_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Codec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[1]);
}

// ===================================================================

class ParticipantPermission::_Internal {
 public:
};

ParticipantPermission::ParticipantPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.ParticipantPermission)
}
ParticipantPermission::ParticipantPermission(const ParticipantPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&can_subscribe_, &from.can_subscribe_,
    static_cast<size_t>(reinterpret_cast<char*>(&recorder_) -
    reinterpret_cast<char*>(&can_subscribe_)) + sizeof(recorder_));
  // @@protoc_insertion_point(copy_constructor:livekit.ParticipantPermission)
}

inline void ParticipantPermission::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&can_subscribe_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recorder_) -
    reinterpret_cast<char*>(&can_subscribe_)) + sizeof(recorder_));
}

ParticipantPermission::~ParticipantPermission() {
  // @@protoc_insertion_point(destructor:livekit.ParticipantPermission)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParticipantPermission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParticipantPermission::ArenaDtor(void* object) {
  ParticipantPermission* _this = reinterpret_cast< ParticipantPermission* >(object);
  (void)_this;
}
void ParticipantPermission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParticipantPermission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParticipantPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ParticipantPermission)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&can_subscribe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recorder_) -
      reinterpret_cast<char*>(&can_subscribe_)) + sizeof(recorder_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantPermission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool can_subscribe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          can_subscribe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool can_publish = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          can_publish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool can_publish_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          can_publish_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool hidden = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool recorder = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          recorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantPermission::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ParticipantPermission)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool can_subscribe = 1;
  if (this->_internal_can_subscribe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_can_subscribe(), target);
  }

  // bool can_publish = 2;
  if (this->_internal_can_publish() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_can_publish(), target);
  }

  // bool can_publish_data = 3;
  if (this->_internal_can_publish_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_can_publish_data(), target);
  }

  // bool hidden = 7;
  if (this->_internal_hidden() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_hidden(), target);
  }

  // bool recorder = 8;
  if (this->_internal_recorder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_recorder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ParticipantPermission)
  return target;
}

size_t ParticipantPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ParticipantPermission)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool can_subscribe = 1;
  if (this->_internal_can_subscribe() != 0) {
    total_size += 1 + 1;
  }

  // bool can_publish = 2;
  if (this->_internal_can_publish() != 0) {
    total_size += 1 + 1;
  }

  // bool can_publish_data = 3;
  if (this->_internal_can_publish_data() != 0) {
    total_size += 1 + 1;
  }

  // bool hidden = 7;
  if (this->_internal_hidden() != 0) {
    total_size += 1 + 1;
  }

  // bool recorder = 8;
  if (this->_internal_recorder() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantPermission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParticipantPermission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantPermission::GetClassData() const { return &_class_data_; }

void ParticipantPermission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ParticipantPermission *>(to)->MergeFrom(
      static_cast<const ParticipantPermission &>(from));
}


void ParticipantPermission::MergeFrom(const ParticipantPermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.ParticipantPermission)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_can_subscribe() != 0) {
    _internal_set_can_subscribe(from._internal_can_subscribe());
  }
  if (from._internal_can_publish() != 0) {
    _internal_set_can_publish(from._internal_can_publish());
  }
  if (from._internal_can_publish_data() != 0) {
    _internal_set_can_publish_data(from._internal_can_publish_data());
  }
  if (from._internal_hidden() != 0) {
    _internal_set_hidden(from._internal_hidden());
  }
  if (from._internal_recorder() != 0) {
    _internal_set_recorder(from._internal_recorder());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantPermission::CopyFrom(const ParticipantPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ParticipantPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantPermission::IsInitialized() const {
  return true;
}

void ParticipantPermission::InternalSwap(ParticipantPermission* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParticipantPermission, recorder_)
      + sizeof(ParticipantPermission::recorder_)
      - PROTOBUF_FIELD_OFFSET(ParticipantPermission, can_subscribe_)>(
          reinterpret_cast<char*>(&can_subscribe_),
          reinterpret_cast<char*>(&other->can_subscribe_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantPermission::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[2]);
}

// ===================================================================

class ParticipantInfo::_Internal {
 public:
  static const ::livekit::ParticipantPermission& permission(const ParticipantInfo* msg);
};

const ::livekit::ParticipantPermission&
ParticipantInfo::_Internal::permission(const ParticipantInfo* msg) {
  return *msg->permission_;
}
ParticipantInfo::ParticipantInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tracks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.ParticipantInfo)
}
ParticipantInfo::ParticipantInfo(const ParticipantInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tracks_(from.tracks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sid(), 
      GetArenaForAllocation());
  }
  identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identity().empty()) {
    identity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identity(), 
      GetArenaForAllocation());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    region_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_region(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_permission()) {
    permission_ = new ::livekit::ParticipantPermission(*from.permission_);
  } else {
    permission_ = nullptr;
  }
  ::memcpy(&joined_at_, &from.joined_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_publisher_) -
    reinterpret_cast<char*>(&joined_at_)) + sizeof(is_publisher_));
  // @@protoc_insertion_point(copy_constructor:livekit.ParticipantInfo)
}

inline void ParticipantInfo::SharedCtor() {
sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&permission_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_publisher_) -
    reinterpret_cast<char*>(&permission_)) + sizeof(is_publisher_));
}

ParticipantInfo::~ParticipantInfo() {
  // @@protoc_insertion_point(destructor:livekit.ParticipantInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParticipantInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete permission_;
}

void ParticipantInfo::ArenaDtor(void* object) {
  ParticipantInfo* _this = reinterpret_cast< ParticipantInfo* >(object);
  (void)_this;
}
void ParticipantInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParticipantInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParticipantInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ParticipantInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracks_.Clear();
  sid_.ClearToEmpty();
  identity_.ClearToEmpty();
  metadata_.ClearToEmpty();
  name_.ClearToEmpty();
  region_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && permission_ != nullptr) {
    delete permission_;
  }
  permission_ = nullptr;
  ::memset(&joined_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_publisher_) -
      reinterpret_cast<char*>(&joined_at_)) + sizeof(is_publisher_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.ParticipantInfo.sid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.ParticipantInfo.identity"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ParticipantInfo.State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::livekit::ParticipantInfo_State>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.TrackInfo tracks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tracks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.ParticipantInfo.metadata"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 joined_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          joined_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.ParticipantInfo.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ParticipantPermission permission = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string region = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.ParticipantInfo.region"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_publisher = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          is_publisher_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ParticipantInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ParticipantInfo.sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // string identity = 2;
  if (!this->_internal_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity().data(), static_cast<int>(this->_internal_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ParticipantInfo.identity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identity(), target);
  }

  // .livekit.ParticipantInfo.State state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // repeated .livekit.TrackInfo tracks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tracks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_tracks(i), target, stream);
  }

  // string metadata = 5;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ParticipantInfo.metadata");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_metadata(), target);
  }

  // int64 joined_at = 6;
  if (this->_internal_joined_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_joined_at(), target);
  }

  // string name = 9;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ParticipantInfo.name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_name(), target);
  }

  // uint32 version = 10;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_version(), target);
  }

  // .livekit.ParticipantPermission permission = 11;
  if (this->_internal_has_permission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::permission(this), target, stream);
  }

  // string region = 12;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ParticipantInfo.region");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_region(), target);
  }

  // bool is_publisher = 13;
  if (this->_internal_is_publisher() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_publisher(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ParticipantInfo)
  return target;
}

size_t ParticipantInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ParticipantInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.TrackInfo tracks = 4;
  total_size += 1UL * this->_internal_tracks_size();
  for (const auto& msg : this->tracks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  // string identity = 2;
  if (!this->_internal_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity());
  }

  // string metadata = 5;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // string name = 9;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string region = 12;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // .livekit.ParticipantPermission permission = 11;
  if (this->_internal_has_permission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *permission_);
  }

  // int64 joined_at = 6;
  if (this->_internal_joined_at() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_joined_at());
  }

  // .livekit.ParticipantInfo.State state = 3;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // uint32 version = 10;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  // bool is_publisher = 13;
  if (this->_internal_is_publisher() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParticipantInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantInfo::GetClassData() const { return &_class_data_; }

void ParticipantInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ParticipantInfo *>(to)->MergeFrom(
      static_cast<const ParticipantInfo &>(from));
}


void ParticipantInfo::MergeFrom(const ParticipantInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.ParticipantInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tracks_.MergeFrom(from.tracks_);
  if (!from._internal_sid().empty()) {
    _internal_set_sid(from._internal_sid());
  }
  if (!from._internal_identity().empty()) {
    _internal_set_identity(from._internal_identity());
  }
  if (!from._internal_metadata().empty()) {
    _internal_set_metadata(from._internal_metadata());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_region().empty()) {
    _internal_set_region(from._internal_region());
  }
  if (from._internal_has_permission()) {
    _internal_mutable_permission()->::livekit::ParticipantPermission::MergeFrom(from._internal_permission());
  }
  if (from._internal_joined_at() != 0) {
    _internal_set_joined_at(from._internal_joined_at());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_is_publisher() != 0) {
    _internal_set_is_publisher(from._internal_is_publisher());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantInfo::CopyFrom(const ParticipantInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ParticipantInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantInfo::IsInitialized() const {
  return true;
}

void ParticipantInfo::InternalSwap(ParticipantInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tracks_.InternalSwap(&other->tracks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sid_, lhs_arena,
      &other->sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &identity_, lhs_arena,
      &other->identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &metadata_, lhs_arena,
      &other->metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &region_, lhs_arena,
      &other->region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParticipantInfo, is_publisher_)
      + sizeof(ParticipantInfo::is_publisher_)
      - PROTOBUF_FIELD_OFFSET(ParticipantInfo, permission_)>(
          reinterpret_cast<char*>(&permission_),
          reinterpret_cast<char*>(&other->permission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[3]);
}

// ===================================================================

class TrackInfo::_Internal {
 public:
};

TrackInfo::TrackInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  layers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.TrackInfo)
}
TrackInfo::TrackInfo(const TrackInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      layers_(from.layers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sid(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  mime_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    mime_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mid().empty()) {
    mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&type_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:livekit.TrackInfo)
}

inline void TrackInfo::SharedCtor() {
sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mime_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&type_)) + sizeof(source_));
}

TrackInfo::~TrackInfo() {
  // @@protoc_insertion_point(destructor:livekit.TrackInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrackInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mime_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrackInfo::ArenaDtor(void* object) {
  TrackInfo* _this = reinterpret_cast< TrackInfo* >(object);
  (void)_this;
}
void TrackInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrackInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layers_.Clear();
  sid_.ClearToEmpty();
  name_.ClearToEmpty();
  mime_type_.ClearToEmpty();
  mid_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&type_)) + sizeof(source_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.TrackInfo.sid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrackType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::livekit::TrackType>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.TrackInfo.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool muted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool simulcast = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          simulcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disable_dtx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          disable_dtx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrackSource source = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source(static_cast<::livekit::TrackSource>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.VideoLayer layers = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.TrackInfo.mime_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_mid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.TrackInfo.mid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrackInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackInfo.sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // .livekit.TrackType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackInfo.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // bool muted = 4;
  if (this->_internal_muted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_muted(), target);
  }

  // uint32 width = 5;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_width(), target);
  }

  // uint32 height = 6;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_height(), target);
  }

  // bool simulcast = 7;
  if (this->_internal_simulcast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_simulcast(), target);
  }

  // bool disable_dtx = 8;
  if (this->_internal_disable_dtx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_disable_dtx(), target);
  }

  // .livekit.TrackSource source = 9;
  if (this->_internal_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_source(), target);
  }

  // repeated .livekit.VideoLayer layers = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_layers(i), target, stream);
  }

  // string mime_type = 11;
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackInfo.mime_type");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_mime_type(), target);
  }

  // string mid = 12;
  if (!this->_internal_mid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mid().data(), static_cast<int>(this->_internal_mid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackInfo.mid");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_mid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrackInfo)
  return target;
}

size_t TrackInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.TrackInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.VideoLayer layers = 10;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string mime_type = 11;
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // string mid = 12;
  if (!this->_internal_mid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mid());
  }

  // .livekit.TrackType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 width = 5;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 6;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // bool muted = 4;
  if (this->_internal_muted() != 0) {
    total_size += 1 + 1;
  }

  // bool simulcast = 7;
  if (this->_internal_simulcast() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_dtx = 8;
  if (this->_internal_disable_dtx() != 0) {
    total_size += 1 + 1;
  }

  // .livekit.TrackSource source = 9;
  if (this->_internal_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrackInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackInfo::GetClassData() const { return &_class_data_; }

void TrackInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrackInfo *>(to)->MergeFrom(
      static_cast<const TrackInfo &>(from));
}


void TrackInfo::MergeFrom(const TrackInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrackInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
  if (!from._internal_sid().empty()) {
    _internal_set_sid(from._internal_sid());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_mime_type().empty()) {
    _internal_set_mime_type(from._internal_mime_type());
  }
  if (!from._internal_mid().empty()) {
    _internal_set_mid(from._internal_mid());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_muted() != 0) {
    _internal_set_muted(from._internal_muted());
  }
  if (from._internal_simulcast() != 0) {
    _internal_set_simulcast(from._internal_simulcast());
  }
  if (from._internal_disable_dtx() != 0) {
    _internal_set_disable_dtx(from._internal_disable_dtx());
  }
  if (from._internal_source() != 0) {
    _internal_set_source(from._internal_source());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackInfo::CopyFrom(const TrackInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackInfo::IsInitialized() const {
  return true;
}

void TrackInfo::InternalSwap(TrackInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  layers_.InternalSwap(&other->layers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sid_, lhs_arena,
      &other->sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mid_, lhs_arena,
      &other->mid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackInfo, source_)
      + sizeof(TrackInfo::source_)
      - PROTOBUF_FIELD_OFFSET(TrackInfo, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[4]);
}

// ===================================================================

class VideoLayer::_Internal {
 public:
};

VideoLayer::VideoLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.VideoLayer)
}
VideoLayer::VideoLayer(const VideoLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&quality_, &from.quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&ssrc_) -
    reinterpret_cast<char*>(&quality_)) + sizeof(ssrc_));
  // @@protoc_insertion_point(copy_constructor:livekit.VideoLayer)
}

inline void VideoLayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quality_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ssrc_) -
    reinterpret_cast<char*>(&quality_)) + sizeof(ssrc_));
}

VideoLayer::~VideoLayer() {
  // @@protoc_insertion_point(destructor:livekit.VideoLayer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VideoLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VideoLayer::ArenaDtor(void* object) {
  VideoLayer* _this = reinterpret_cast< VideoLayer* >(object);
  (void)_this;
}
void VideoLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.VideoLayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ssrc_) -
      reinterpret_cast<char*>(&quality_)) + sizeof(ssrc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.VideoQuality quality = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_quality(static_cast<::livekit::VideoQuality>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bitrate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ssrc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoLayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.VideoLayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.VideoQuality quality = 1;
  if (this->_internal_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_quality(), target);
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // uint32 bitrate = 4;
  if (this->_internal_bitrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bitrate(), target);
  }

  // uint32 ssrc = 5;
  if (this->_internal_ssrc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ssrc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.VideoLayer)
  return target;
}

size_t VideoLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.VideoLayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.VideoQuality quality = 1;
  if (this->_internal_quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_quality());
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // uint32 bitrate = 4;
  if (this->_internal_bitrate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bitrate());
  }

  // uint32 ssrc = 5;
  if (this->_internal_ssrc() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ssrc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoLayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VideoLayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoLayer::GetClassData() const { return &_class_data_; }

void VideoLayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VideoLayer *>(to)->MergeFrom(
      static_cast<const VideoLayer &>(from));
}


void VideoLayer::MergeFrom(const VideoLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.VideoLayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_quality() != 0) {
    _internal_set_quality(from._internal_quality());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_bitrate() != 0) {
    _internal_set_bitrate(from._internal_bitrate());
  }
  if (from._internal_ssrc() != 0) {
    _internal_set_ssrc(from._internal_ssrc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoLayer::CopyFrom(const VideoLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.VideoLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoLayer::IsInitialized() const {
  return true;
}

void VideoLayer::InternalSwap(VideoLayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoLayer, ssrc_)
      + sizeof(VideoLayer::ssrc_)
      - PROTOBUF_FIELD_OFFSET(VideoLayer, quality_)>(
          reinterpret_cast<char*>(&quality_),
          reinterpret_cast<char*>(&other->quality_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoLayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[5]);
}

// ===================================================================

class DataPacket::_Internal {
 public:
  static const ::livekit::UserPacket& user(const DataPacket* msg);
  static const ::livekit::ActiveSpeakerUpdate& speaker(const DataPacket* msg);
};

const ::livekit::UserPacket&
DataPacket::_Internal::user(const DataPacket* msg) {
  return *msg->value_.user_;
}
const ::livekit::ActiveSpeakerUpdate&
DataPacket::_Internal::speaker(const DataPacket* msg) {
  return *msg->value_.speaker_;
}
void DataPacket::set_allocated_user(::livekit::UserPacket* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::UserPacket>::GetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    set_has_user();
    value_.user_ = user;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.user)
}
void DataPacket::set_allocated_speaker(::livekit::ActiveSpeakerUpdate* speaker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (speaker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::ActiveSpeakerUpdate>::GetOwningArena(speaker);
    if (message_arena != submessage_arena) {
      speaker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speaker, submessage_arena);
    }
    set_has_speaker();
    value_.speaker_ = speaker;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.speaker)
}
DataPacket::DataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.DataPacket)
}
DataPacket::DataPacket(const DataPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kind_ = from.kind_;
  clear_has_value();
  switch (from.value_case()) {
    case kUser: {
      _internal_mutable_user()->::livekit::UserPacket::MergeFrom(from._internal_user());
      break;
    }
    case kSpeaker: {
      _internal_mutable_speaker()->::livekit::ActiveSpeakerUpdate::MergeFrom(from._internal_speaker());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.DataPacket)
}

inline void DataPacket::SharedCtor() {
kind_ = 0;
clear_has_value();
}

DataPacket::~DataPacket() {
  // @@protoc_insertion_point(destructor:livekit.DataPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void DataPacket::ArenaDtor(void* object) {
  DataPacket* _this = reinterpret_cast< DataPacket* >(object);
  (void)_this;
}
void DataPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataPacket::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:livekit.DataPacket)
  switch (value_case()) {
    case kUser: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.user_;
      }
      break;
    }
    case kSpeaker: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.speaker_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void DataPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DataPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kind_ = 0;
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.DataPacket.Kind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::livekit::DataPacket_Kind>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.UserPacket user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ActiveSpeakerUpdate speaker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_speaker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DataPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.DataPacket.Kind kind = 1;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // .livekit.UserPacket user = 2;
  if (_internal_has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user(this), target, stream);
  }

  // .livekit.ActiveSpeakerUpdate speaker = 3;
  if (_internal_has_speaker()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::speaker(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DataPacket)
  return target;
}

size_t DataPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.DataPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.DataPacket.Kind kind = 1;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  switch (value_case()) {
    // .livekit.UserPacket user = 2;
    case kUser: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.user_);
      break;
    }
    // .livekit.ActiveSpeakerUpdate speaker = 3;
    case kSpeaker: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.speaker_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataPacket::GetClassData() const { return &_class_data_; }

void DataPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataPacket *>(to)->MergeFrom(
      static_cast<const DataPacket &>(from));
}


void DataPacket::MergeFrom(const DataPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.DataPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  switch (from.value_case()) {
    case kUser: {
      _internal_mutable_user()->::livekit::UserPacket::MergeFrom(from._internal_user());
      break;
    }
    case kSpeaker: {
      _internal_mutable_speaker()->::livekit::ActiveSpeakerUpdate::MergeFrom(from._internal_speaker());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataPacket::CopyFrom(const DataPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPacket::IsInitialized() const {
  return true;
}

void DataPacket::InternalSwap(DataPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[6]);
}

// ===================================================================

class ActiveSpeakerUpdate::_Internal {
 public:
};

ActiveSpeakerUpdate::ActiveSpeakerUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  speakers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.ActiveSpeakerUpdate)
}
ActiveSpeakerUpdate::ActiveSpeakerUpdate(const ActiveSpeakerUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      speakers_(from.speakers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.ActiveSpeakerUpdate)
}

inline void ActiveSpeakerUpdate::SharedCtor() {
}

ActiveSpeakerUpdate::~ActiveSpeakerUpdate() {
  // @@protoc_insertion_point(destructor:livekit.ActiveSpeakerUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActiveSpeakerUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActiveSpeakerUpdate::ArenaDtor(void* object) {
  ActiveSpeakerUpdate* _this = reinterpret_cast< ActiveSpeakerUpdate* >(object);
  (void)_this;
}
void ActiveSpeakerUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActiveSpeakerUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActiveSpeakerUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ActiveSpeakerUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speakers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActiveSpeakerUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.SpeakerInfo speakers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speakers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActiveSpeakerUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ActiveSpeakerUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.SpeakerInfo speakers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_speakers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_speakers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ActiveSpeakerUpdate)
  return target;
}

size_t ActiveSpeakerUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ActiveSpeakerUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.SpeakerInfo speakers = 1;
  total_size += 1UL * this->_internal_speakers_size();
  for (const auto& msg : this->speakers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActiveSpeakerUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActiveSpeakerUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActiveSpeakerUpdate::GetClassData() const { return &_class_data_; }

void ActiveSpeakerUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActiveSpeakerUpdate *>(to)->MergeFrom(
      static_cast<const ActiveSpeakerUpdate &>(from));
}


void ActiveSpeakerUpdate::MergeFrom(const ActiveSpeakerUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.ActiveSpeakerUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  speakers_.MergeFrom(from.speakers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActiveSpeakerUpdate::CopyFrom(const ActiveSpeakerUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ActiveSpeakerUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveSpeakerUpdate::IsInitialized() const {
  return true;
}

void ActiveSpeakerUpdate::InternalSwap(ActiveSpeakerUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  speakers_.InternalSwap(&other->speakers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActiveSpeakerUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[7]);
}

// ===================================================================

class SpeakerInfo::_Internal {
 public:
};

SpeakerInfo::SpeakerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.SpeakerInfo)
}
SpeakerInfo::SpeakerInfo(const SpeakerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&level_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:livekit.SpeakerInfo)
}

inline void SpeakerInfo::SharedCtor() {
sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&level_)) + sizeof(active_));
}

SpeakerInfo::~SpeakerInfo() {
  // @@protoc_insertion_point(destructor:livekit.SpeakerInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpeakerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpeakerInfo::ArenaDtor(void* object) {
  SpeakerInfo* _this = reinterpret_cast< SpeakerInfo* >(object);
  (void)_this;
}
void SpeakerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeakerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeakerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SpeakerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sid_.ClearToEmpty();
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&level_)) + sizeof(active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeakerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.SpeakerInfo.sid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeakerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SpeakerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SpeakerInfo.sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // float level = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_level = this->_internal_level();
  uint32_t raw_level;
  memcpy(&raw_level, &tmp_level, sizeof(tmp_level));
  if (raw_level != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_level(), target);
  }

  // bool active = 3;
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SpeakerInfo)
  return target;
}

size_t SpeakerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SpeakerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  // float level = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_level = this->_internal_level();
  uint32_t raw_level;
  memcpy(&raw_level, &tmp_level, sizeof(tmp_level));
  if (raw_level != 0) {
    total_size += 1 + 4;
  }

  // bool active = 3;
  if (this->_internal_active() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeakerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeakerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeakerInfo::GetClassData() const { return &_class_data_; }

void SpeakerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeakerInfo *>(to)->MergeFrom(
      static_cast<const SpeakerInfo &>(from));
}


void SpeakerInfo::MergeFrom(const SpeakerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.SpeakerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sid().empty()) {
    _internal_set_sid(from._internal_sid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_level = from._internal_level();
  uint32_t raw_level;
  memcpy(&raw_level, &tmp_level, sizeof(tmp_level));
  if (raw_level != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_active() != 0) {
    _internal_set_active(from._internal_active());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeakerInfo::CopyFrom(const SpeakerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SpeakerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeakerInfo::IsInitialized() const {
  return true;
}

void SpeakerInfo::InternalSwap(SpeakerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sid_, lhs_arena,
      &other->sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeakerInfo, active_)
      + sizeof(SpeakerInfo::active_)
      - PROTOBUF_FIELD_OFFSET(SpeakerInfo, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeakerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[8]);
}

// ===================================================================

class UserPacket::_Internal {
 public:
};

UserPacket::UserPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  destination_sids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.UserPacket)
}
UserPacket::UserPacket(const UserPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      destination_sids_(from.destination_sids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  participant_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    participant_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_sid().empty()) {
    participant_sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_participant_sid(), 
      GetArenaForAllocation());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.UserPacket)
}

inline void UserPacket::SharedCtor() {
participant_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  participant_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserPacket::~UserPacket() {
  // @@protoc_insertion_point(destructor:livekit.UserPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  participant_sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserPacket::ArenaDtor(void* object) {
  UserPacket* _this = reinterpret_cast< UserPacket* >(object);
  (void)_this;
}
void UserPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UserPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_sids_.Clear();
  participant_sid_.ClearToEmpty();
  payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string participant_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.UserPacket.participant_sid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string destination_sids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_destination_sids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.UserPacket.destination_sids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UserPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_sid().data(), static_cast<int>(this->_internal_participant_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UserPacket.participant_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_sid(), target);
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  // repeated string destination_sids = 3;
  for (int i = 0, n = this->_internal_destination_sids_size(); i < n; i++) {
    const auto& s = this->_internal_destination_sids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UserPacket.destination_sids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UserPacket)
  return target;
}

size_t UserPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.UserPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string destination_sids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(destination_sids_.size());
  for (int i = 0, n = destination_sids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      destination_sids_.Get(i));
  }

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_sid());
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserPacket::GetClassData() const { return &_class_data_; }

void UserPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserPacket *>(to)->MergeFrom(
      static_cast<const UserPacket &>(from));
}


void UserPacket::MergeFrom(const UserPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.UserPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  destination_sids_.MergeFrom(from.destination_sids_);
  if (!from._internal_participant_sid().empty()) {
    _internal_set_participant_sid(from._internal_participant_sid());
  }
  if (!from._internal_payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserPacket::CopyFrom(const UserPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UserPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPacket::IsInitialized() const {
  return true;
}

void UserPacket::InternalSwap(UserPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  destination_sids_.InternalSwap(&other->destination_sids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &participant_sid_, lhs_arena,
      &other->participant_sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[9]);
}

// ===================================================================

class ParticipantTracks::_Internal {
 public:
};

ParticipantTracks::ParticipantTracks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  track_sids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.ParticipantTracks)
}
ParticipantTracks::ParticipantTracks(const ParticipantTracks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      track_sids_(from.track_sids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  participant_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    participant_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_sid().empty()) {
    participant_sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_participant_sid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.ParticipantTracks)
}

inline void ParticipantTracks::SharedCtor() {
participant_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  participant_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParticipantTracks::~ParticipantTracks() {
  // @@protoc_insertion_point(destructor:livekit.ParticipantTracks)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParticipantTracks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  participant_sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ParticipantTracks::ArenaDtor(void* object) {
  ParticipantTracks* _this = reinterpret_cast< ParticipantTracks* >(object);
  (void)_this;
}
void ParticipantTracks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParticipantTracks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParticipantTracks::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ParticipantTracks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  track_sids_.Clear();
  participant_sid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantTracks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string participant_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.ParticipantTracks.participant_sid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string track_sids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_track_sids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.ParticipantTracks.track_sids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantTracks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ParticipantTracks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_sid().data(), static_cast<int>(this->_internal_participant_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ParticipantTracks.participant_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_sid(), target);
  }

  // repeated string track_sids = 2;
  for (int i = 0, n = this->_internal_track_sids_size(); i < n; i++) {
    const auto& s = this->_internal_track_sids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ParticipantTracks.track_sids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ParticipantTracks)
  return target;
}

size_t ParticipantTracks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ParticipantTracks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string track_sids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(track_sids_.size());
  for (int i = 0, n = track_sids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      track_sids_.Get(i));
  }

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_sid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantTracks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParticipantTracks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantTracks::GetClassData() const { return &_class_data_; }

void ParticipantTracks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ParticipantTracks *>(to)->MergeFrom(
      static_cast<const ParticipantTracks &>(from));
}


void ParticipantTracks::MergeFrom(const ParticipantTracks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.ParticipantTracks)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  track_sids_.MergeFrom(from.track_sids_);
  if (!from._internal_participant_sid().empty()) {
    _internal_set_participant_sid(from._internal_participant_sid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantTracks::CopyFrom(const ParticipantTracks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ParticipantTracks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantTracks::IsInitialized() const {
  return true;
}

void ParticipantTracks::InternalSwap(ParticipantTracks* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  track_sids_.InternalSwap(&other->track_sids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &participant_sid_, lhs_arena,
      &other->participant_sid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantTracks::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[10]);
}

// ===================================================================

class ClientInfo::_Internal {
 public:
};

ClientInfo::ClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.ClientInfo)
}
ClientInfo::ClientInfo(const ClientInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_os().empty()) {
    os_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_os(), 
      GetArenaForAllocation());
  }
  os_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    os_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_os_version().empty()) {
    os_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_os_version(), 
      GetArenaForAllocation());
  }
  device_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_model().empty()) {
    device_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_model(), 
      GetArenaForAllocation());
  }
  browser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    browser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_browser().empty()) {
    browser_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_browser(), 
      GetArenaForAllocation());
  }
  browser_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    browser_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_browser_version().empty()) {
    browser_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_browser_version(), 
      GetArenaForAllocation());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&sdk_, &from.sdk_,
    static_cast<size_t>(reinterpret_cast<char*>(&protocol_) -
    reinterpret_cast<char*>(&sdk_)) + sizeof(protocol_));
  // @@protoc_insertion_point(copy_constructor:livekit.ClientInfo)
}

inline void ClientInfo::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
os_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  os_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
browser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  browser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
browser_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  browser_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sdk_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&protocol_) -
    reinterpret_cast<char*>(&sdk_)) + sizeof(protocol_));
}

ClientInfo::~ClientInfo() {
  // @@protoc_insertion_point(destructor:livekit.ClientInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClientInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  browser_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  browser_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientInfo::ArenaDtor(void* object) {
  ClientInfo* _this = reinterpret_cast< ClientInfo* >(object);
  (void)_this;
}
void ClientInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ClientInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty();
  os_.ClearToEmpty();
  os_version_.ClearToEmpty();
  device_model_.ClearToEmpty();
  browser_.ClearToEmpty();
  browser_version_.ClearToEmpty();
  address_.ClearToEmpty();
  ::memset(&sdk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocol_) -
      reinterpret_cast<char*>(&sdk_)) + sizeof(protocol_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.ClientInfo.SDK sdk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sdk(static_cast<::livekit::ClientInfo_SDK>(val));
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.ClientInfo.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 protocol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string os = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_os();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.ClientInfo.os"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string os_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_os_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.ClientInfo.os_version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_model = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_device_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.ClientInfo.device_model"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string browser = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_browser();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.ClientInfo.browser"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string browser_version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_browser_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.ClientInfo.browser_version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.ClientInfo.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ClientInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.ClientInfo.SDK sdk = 1;
  if (this->_internal_sdk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_sdk(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ClientInfo.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // int32 protocol = 3;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_protocol(), target);
  }

  // string os = 4;
  if (!this->_internal_os().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os().data(), static_cast<int>(this->_internal_os().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ClientInfo.os");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_os(), target);
  }

  // string os_version = 5;
  if (!this->_internal_os_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os_version().data(), static_cast<int>(this->_internal_os_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ClientInfo.os_version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_os_version(), target);
  }

  // string device_model = 6;
  if (!this->_internal_device_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_model().data(), static_cast<int>(this->_internal_device_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ClientInfo.device_model");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_device_model(), target);
  }

  // string browser = 7;
  if (!this->_internal_browser().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_browser().data(), static_cast<int>(this->_internal_browser().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ClientInfo.browser");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_browser(), target);
  }

  // string browser_version = 8;
  if (!this->_internal_browser_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_browser_version().data(), static_cast<int>(this->_internal_browser_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ClientInfo.browser_version");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_browser_version(), target);
  }

  // string address = 9;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ClientInfo.address");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ClientInfo)
  return target;
}

size_t ClientInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ClientInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string os = 4;
  if (!this->_internal_os().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os());
  }

  // string os_version = 5;
  if (!this->_internal_os_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os_version());
  }

  // string device_model = 6;
  if (!this->_internal_device_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_model());
  }

  // string browser = 7;
  if (!this->_internal_browser().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_browser());
  }

  // string browser_version = 8;
  if (!this->_internal_browser_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_browser_version());
  }

  // string address = 9;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // .livekit.ClientInfo.SDK sdk = 1;
  if (this->_internal_sdk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sdk());
  }

  // int32 protocol = 3;
  if (this->_internal_protocol() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_protocol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientInfo::GetClassData() const { return &_class_data_; }

void ClientInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientInfo *>(to)->MergeFrom(
      static_cast<const ClientInfo &>(from));
}


void ClientInfo::MergeFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_os().empty()) {
    _internal_set_os(from._internal_os());
  }
  if (!from._internal_os_version().empty()) {
    _internal_set_os_version(from._internal_os_version());
  }
  if (!from._internal_device_model().empty()) {
    _internal_set_device_model(from._internal_device_model());
  }
  if (!from._internal_browser().empty()) {
    _internal_set_browser(from._internal_browser());
  }
  if (!from._internal_browser_version().empty()) {
    _internal_set_browser_version(from._internal_browser_version());
  }
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_sdk() != 0) {
    _internal_set_sdk(from._internal_sdk());
  }
  if (from._internal_protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientInfo::CopyFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInfo::IsInitialized() const {
  return true;
}

void ClientInfo::InternalSwap(ClientInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &os_, lhs_arena,
      &other->os_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &os_version_, lhs_arena,
      &other->os_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_model_, lhs_arena,
      &other->device_model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &browser_, lhs_arena,
      &other->browser_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &browser_version_, lhs_arena,
      &other->browser_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientInfo, protocol_)
      + sizeof(ClientInfo::protocol_)
      - PROTOBUF_FIELD_OFFSET(ClientInfo, sdk_)>(
          reinterpret_cast<char*>(&sdk_),
          reinterpret_cast<char*>(&other->sdk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[11]);
}

// ===================================================================

class ClientConfiguration::_Internal {
 public:
  static const ::livekit::VideoConfiguration& video(const ClientConfiguration* msg);
  static const ::livekit::VideoConfiguration& screen(const ClientConfiguration* msg);
};

const ::livekit::VideoConfiguration&
ClientConfiguration::_Internal::video(const ClientConfiguration* msg) {
  return *msg->video_;
}
const ::livekit::VideoConfiguration&
ClientConfiguration::_Internal::screen(const ClientConfiguration* msg) {
  return *msg->screen_;
}
ClientConfiguration::ClientConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.ClientConfiguration)
}
ClientConfiguration::ClientConfiguration(const ClientConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_video()) {
    video_ = new ::livekit::VideoConfiguration(*from.video_);
  } else {
    video_ = nullptr;
  }
  if (from._internal_has_screen()) {
    screen_ = new ::livekit::VideoConfiguration(*from.screen_);
  } else {
    screen_ = nullptr;
  }
  resume_connection_ = from.resume_connection_;
  // @@protoc_insertion_point(copy_constructor:livekit.ClientConfiguration)
}

inline void ClientConfiguration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&video_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&resume_connection_) -
    reinterpret_cast<char*>(&video_)) + sizeof(resume_connection_));
}

ClientConfiguration::~ClientConfiguration() {
  // @@protoc_insertion_point(destructor:livekit.ClientConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClientConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete video_;
  if (this != internal_default_instance()) delete screen_;
}

void ClientConfiguration::ArenaDtor(void* object) {
  ClientConfiguration* _this = reinterpret_cast< ClientConfiguration* >(object);
  (void)_this;
}
void ClientConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ClientConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && video_ != nullptr) {
    delete video_;
  }
  video_ = nullptr;
  if (GetArenaForAllocation() == nullptr && screen_ != nullptr) {
    delete screen_;
  }
  screen_ = nullptr;
  resume_connection_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.VideoConfiguration video = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_video(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.VideoConfiguration screen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_screen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ClientConfigSetting resume_connection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resume_connection(static_cast<::livekit::ClientConfigSetting>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ClientConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.VideoConfiguration video = 1;
  if (this->_internal_has_video()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::video(this), target, stream);
  }

  // .livekit.VideoConfiguration screen = 2;
  if (this->_internal_has_screen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::screen(this), target, stream);
  }

  // .livekit.ClientConfigSetting resume_connection = 3;
  if (this->_internal_resume_connection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_resume_connection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ClientConfiguration)
  return target;
}

size_t ClientConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ClientConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.VideoConfiguration video = 1;
  if (this->_internal_has_video()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *video_);
  }

  // .livekit.VideoConfiguration screen = 2;
  if (this->_internal_has_screen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *screen_);
  }

  // .livekit.ClientConfigSetting resume_connection = 3;
  if (this->_internal_resume_connection() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resume_connection());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientConfiguration::GetClassData() const { return &_class_data_; }

void ClientConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientConfiguration *>(to)->MergeFrom(
      static_cast<const ClientConfiguration &>(from));
}


void ClientConfiguration::MergeFrom(const ClientConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.ClientConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_video()) {
    _internal_mutable_video()->::livekit::VideoConfiguration::MergeFrom(from._internal_video());
  }
  if (from._internal_has_screen()) {
    _internal_mutable_screen()->::livekit::VideoConfiguration::MergeFrom(from._internal_screen());
  }
  if (from._internal_resume_connection() != 0) {
    _internal_set_resume_connection(from._internal_resume_connection());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientConfiguration::CopyFrom(const ClientConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ClientConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientConfiguration::IsInitialized() const {
  return true;
}

void ClientConfiguration::InternalSwap(ClientConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientConfiguration, resume_connection_)
      + sizeof(ClientConfiguration::resume_connection_)
      - PROTOBUF_FIELD_OFFSET(ClientConfiguration, video_)>(
          reinterpret_cast<char*>(&video_),
          reinterpret_cast<char*>(&other->video_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[12]);
}

// ===================================================================

class VideoConfiguration::_Internal {
 public:
};

VideoConfiguration::VideoConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.VideoConfiguration)
}
VideoConfiguration::VideoConfiguration(const VideoConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hardware_encoder_ = from.hardware_encoder_;
  // @@protoc_insertion_point(copy_constructor:livekit.VideoConfiguration)
}

inline void VideoConfiguration::SharedCtor() {
hardware_encoder_ = 0;
}

VideoConfiguration::~VideoConfiguration() {
  // @@protoc_insertion_point(destructor:livekit.VideoConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VideoConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VideoConfiguration::ArenaDtor(void* object) {
  VideoConfiguration* _this = reinterpret_cast< VideoConfiguration* >(object);
  (void)_this;
}
void VideoConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.VideoConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hardware_encoder_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.ClientConfigSetting hardware_encoder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hardware_encoder(static_cast<::livekit::ClientConfigSetting>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.VideoConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.ClientConfigSetting hardware_encoder = 1;
  if (this->_internal_hardware_encoder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_hardware_encoder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.VideoConfiguration)
  return target;
}

size_t VideoConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.VideoConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.ClientConfigSetting hardware_encoder = 1;
  if (this->_internal_hardware_encoder() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hardware_encoder());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VideoConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoConfiguration::GetClassData() const { return &_class_data_; }

void VideoConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VideoConfiguration *>(to)->MergeFrom(
      static_cast<const VideoConfiguration &>(from));
}


void VideoConfiguration::MergeFrom(const VideoConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.VideoConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hardware_encoder() != 0) {
    _internal_set_hardware_encoder(from._internal_hardware_encoder());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoConfiguration::CopyFrom(const VideoConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.VideoConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoConfiguration::IsInitialized() const {
  return true;
}

void VideoConfiguration::InternalSwap(VideoConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(hardware_encoder_, other->hardware_encoder_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[13]);
}

// ===================================================================

RTPStats_GapHistogramEntry_DoNotUse::RTPStats_GapHistogramEntry_DoNotUse() {}
RTPStats_GapHistogramEntry_DoNotUse::RTPStats_GapHistogramEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RTPStats_GapHistogramEntry_DoNotUse::MergeFrom(const RTPStats_GapHistogramEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RTPStats_GapHistogramEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[14]);
}

// ===================================================================

class RTPStats::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const RTPStats* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const RTPStats* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_pli(const RTPStats* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_fir(const RTPStats* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_key_frame(const RTPStats* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_layer_lock_pli(const RTPStats* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RTPStats::_Internal::start_time(const RTPStats* msg) {
  return *msg->start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RTPStats::_Internal::end_time(const RTPStats* msg) {
  return *msg->end_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RTPStats::_Internal::last_pli(const RTPStats* msg) {
  return *msg->last_pli_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RTPStats::_Internal::last_fir(const RTPStats* msg) {
  return *msg->last_fir_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RTPStats::_Internal::last_key_frame(const RTPStats* msg) {
  return *msg->last_key_frame_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RTPStats::_Internal::last_layer_lock_pli(const RTPStats* msg) {
  return *msg->last_layer_lock_pli_;
}
void RTPStats::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void RTPStats::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
void RTPStats::clear_last_pli() {
  if (GetArenaForAllocation() == nullptr && last_pli_ != nullptr) {
    delete last_pli_;
  }
  last_pli_ = nullptr;
}
void RTPStats::clear_last_fir() {
  if (GetArenaForAllocation() == nullptr && last_fir_ != nullptr) {
    delete last_fir_;
  }
  last_fir_ = nullptr;
}
void RTPStats::clear_last_key_frame() {
  if (GetArenaForAllocation() == nullptr && last_key_frame_ != nullptr) {
    delete last_key_frame_;
  }
  last_key_frame_ = nullptr;
}
void RTPStats::clear_last_layer_lock_pli() {
  if (GetArenaForAllocation() == nullptr && last_layer_lock_pli_ != nullptr) {
    delete last_layer_lock_pli_;
  }
  last_layer_lock_pli_ = nullptr;
}
RTPStats::RTPStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  gap_histogram_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.RTPStats)
}
RTPStats::RTPStats(const RTPStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gap_histogram_.MergeFrom(from.gap_histogram_);
  if (from._internal_has_start_time()) {
    start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  if (from._internal_has_last_pli()) {
    last_pli_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_pli_);
  } else {
    last_pli_ = nullptr;
  }
  if (from._internal_has_last_fir()) {
    last_fir_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_fir_);
  } else {
    last_fir_ = nullptr;
  }
  if (from._internal_has_last_key_frame()) {
    last_key_frame_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_key_frame_);
  } else {
    last_key_frame_ = nullptr;
  }
  if (from._internal_has_last_layer_lock_pli()) {
    last_layer_lock_pli_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_layer_lock_pli_);
  } else {
    last_layer_lock_pli_ = nullptr;
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&nack_repeated_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(nack_repeated_));
  // @@protoc_insertion_point(copy_constructor:livekit.RTPStats)
}

inline void RTPStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nack_repeated_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(nack_repeated_));
}

RTPStats::~RTPStats() {
  // @@protoc_insertion_point(destructor:livekit.RTPStats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RTPStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
  if (this != internal_default_instance()) delete last_pli_;
  if (this != internal_default_instance()) delete last_fir_;
  if (this != internal_default_instance()) delete last_key_frame_;
  if (this != internal_default_instance()) delete last_layer_lock_pli_;
}

void RTPStats::ArenaDtor(void* object) {
  RTPStats* _this = reinterpret_cast< RTPStats* >(object);
  (void)_this;
  _this->gap_histogram_. ~MapField();
}
inline void RTPStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &RTPStats::ArenaDtor);
  }
}
void RTPStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RTPStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RTPStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gap_histogram_.Clear();
  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_pli_ != nullptr) {
    delete last_pli_;
  }
  last_pli_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_fir_ != nullptr) {
    delete last_fir_;
  }
  last_fir_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_key_frame_ != nullptr) {
    delete last_key_frame_;
  }
  last_key_frame_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_layer_lock_pli_ != nullptr) {
    delete last_layer_lock_pli_;
  }
  last_layer_lock_pli_ = nullptr;
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nack_repeated_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(nack_repeated_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTPStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 packets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double packet_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          packet_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double bitrate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 packets_lost = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          packets_lost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double packet_loss_rate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          packet_loss_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float packet_loss_percentage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          packet_loss_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 packets_duplicate = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          packets_duplicate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double packet_duplicate_rate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          packet_duplicate_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes_duplicate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          bytes_duplicate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double bitrate_duplicate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          bitrate_duplicate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 packets_padding = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          packets_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double packet_padding_rate = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          packet_padding_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes_padding = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          bytes_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double bitrate_padding = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          bitrate_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 packets_out_of_order = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          packets_out_of_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 frames = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double frame_rate = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          frame_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double jitter_current = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          jitter_current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double jitter_max = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          jitter_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // map<int32, uint32> gap_histogram = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&gap_histogram_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 nacks = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          nacks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nack_misses = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          nack_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 plis = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          plis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_pli = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_pli(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 firs = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          firs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_fir = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_fir(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rtt_current = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          rtt_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rtt_max = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          rtt_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 key_frames = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          key_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_key_frame = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_key_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 layer_lock_plis = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          layer_lock_plis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_layer_lock_pli = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_layer_lock_pli(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nack_acks = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          nack_acks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nack_repeated = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          nack_repeated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RTPStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RTPStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->_internal_has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->_internal_has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end_time(this), target, stream);
  }

  // double duration = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_duration = this->_internal_duration();
  uint64_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_duration(), target);
  }

  // uint32 packets = 4;
  if (this->_internal_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_packets(), target);
  }

  // double packet_rate = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_rate = this->_internal_packet_rate();
  uint64_t raw_packet_rate;
  memcpy(&raw_packet_rate, &tmp_packet_rate, sizeof(tmp_packet_rate));
  if (raw_packet_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_packet_rate(), target);
  }

  // uint64 bytes = 6;
  if (this->_internal_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_bytes(), target);
  }

  // double bitrate = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bitrate = this->_internal_bitrate();
  uint64_t raw_bitrate;
  memcpy(&raw_bitrate, &tmp_bitrate, sizeof(tmp_bitrate));
  if (raw_bitrate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_bitrate(), target);
  }

  // uint32 packets_lost = 8;
  if (this->_internal_packets_lost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_packets_lost(), target);
  }

  // double packet_loss_rate = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_loss_rate = this->_internal_packet_loss_rate();
  uint64_t raw_packet_loss_rate;
  memcpy(&raw_packet_loss_rate, &tmp_packet_loss_rate, sizeof(tmp_packet_loss_rate));
  if (raw_packet_loss_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_packet_loss_rate(), target);
  }

  // float packet_loss_percentage = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_packet_loss_percentage = this->_internal_packet_loss_percentage();
  uint32_t raw_packet_loss_percentage;
  memcpy(&raw_packet_loss_percentage, &tmp_packet_loss_percentage, sizeof(tmp_packet_loss_percentage));
  if (raw_packet_loss_percentage != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_packet_loss_percentage(), target);
  }

  // uint32 packets_duplicate = 11;
  if (this->_internal_packets_duplicate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_packets_duplicate(), target);
  }

  // double packet_duplicate_rate = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_duplicate_rate = this->_internal_packet_duplicate_rate();
  uint64_t raw_packet_duplicate_rate;
  memcpy(&raw_packet_duplicate_rate, &tmp_packet_duplicate_rate, sizeof(tmp_packet_duplicate_rate));
  if (raw_packet_duplicate_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_packet_duplicate_rate(), target);
  }

  // uint64 bytes_duplicate = 13;
  if (this->_internal_bytes_duplicate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_bytes_duplicate(), target);
  }

  // double bitrate_duplicate = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bitrate_duplicate = this->_internal_bitrate_duplicate();
  uint64_t raw_bitrate_duplicate;
  memcpy(&raw_bitrate_duplicate, &tmp_bitrate_duplicate, sizeof(tmp_bitrate_duplicate));
  if (raw_bitrate_duplicate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_bitrate_duplicate(), target);
  }

  // uint32 packets_padding = 15;
  if (this->_internal_packets_padding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_packets_padding(), target);
  }

  // double packet_padding_rate = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_padding_rate = this->_internal_packet_padding_rate();
  uint64_t raw_packet_padding_rate;
  memcpy(&raw_packet_padding_rate, &tmp_packet_padding_rate, sizeof(tmp_packet_padding_rate));
  if (raw_packet_padding_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_packet_padding_rate(), target);
  }

  // uint64 bytes_padding = 17;
  if (this->_internal_bytes_padding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_bytes_padding(), target);
  }

  // double bitrate_padding = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bitrate_padding = this->_internal_bitrate_padding();
  uint64_t raw_bitrate_padding;
  memcpy(&raw_bitrate_padding, &tmp_bitrate_padding, sizeof(tmp_bitrate_padding));
  if (raw_bitrate_padding != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_bitrate_padding(), target);
  }

  // uint32 packets_out_of_order = 19;
  if (this->_internal_packets_out_of_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_packets_out_of_order(), target);
  }

  // uint32 frames = 20;
  if (this->_internal_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_frames(), target);
  }

  // double frame_rate = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_frame_rate = this->_internal_frame_rate();
  uint64_t raw_frame_rate;
  memcpy(&raw_frame_rate, &tmp_frame_rate, sizeof(tmp_frame_rate));
  if (raw_frame_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_frame_rate(), target);
  }

  // double jitter_current = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jitter_current = this->_internal_jitter_current();
  uint64_t raw_jitter_current;
  memcpy(&raw_jitter_current, &tmp_jitter_current, sizeof(tmp_jitter_current));
  if (raw_jitter_current != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_jitter_current(), target);
  }

  // double jitter_max = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jitter_max = this->_internal_jitter_max();
  uint64_t raw_jitter_max;
  memcpy(&raw_jitter_max, &tmp_jitter_max, sizeof(tmp_jitter_max));
  if (raw_jitter_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_jitter_max(), target);
  }

  // map<int32, uint32> gap_histogram = 24;
  if (!this->_internal_gap_histogram().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint32_t >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_gap_histogram().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_gap_histogram().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint32_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint32_t >::const_iterator
          it = this->_internal_gap_histogram().begin();
          it != this->_internal_gap_histogram().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RTPStats_GapHistogramEntry_DoNotUse::Funcs::InternalSerialize(24, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint32_t >::const_iterator
          it = this->_internal_gap_histogram().begin();
          it != this->_internal_gap_histogram().end(); ++it) {
        target = RTPStats_GapHistogramEntry_DoNotUse::Funcs::InternalSerialize(24, it->first, it->second, target, stream);
      }
    }
  }

  // uint32 nacks = 25;
  if (this->_internal_nacks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_nacks(), target);
  }

  // uint32 nack_misses = 26;
  if (this->_internal_nack_misses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_nack_misses(), target);
  }

  // uint32 plis = 27;
  if (this->_internal_plis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_plis(), target);
  }

  // .google.protobuf.Timestamp last_pli = 28;
  if (this->_internal_has_last_pli()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::last_pli(this), target, stream);
  }

  // uint32 firs = 29;
  if (this->_internal_firs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_firs(), target);
  }

  // .google.protobuf.Timestamp last_fir = 30;
  if (this->_internal_has_last_fir()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::last_fir(this), target, stream);
  }

  // uint32 rtt_current = 31;
  if (this->_internal_rtt_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_rtt_current(), target);
  }

  // uint32 rtt_max = 32;
  if (this->_internal_rtt_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_rtt_max(), target);
  }

  // uint32 key_frames = 33;
  if (this->_internal_key_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_key_frames(), target);
  }

  // .google.protobuf.Timestamp last_key_frame = 34;
  if (this->_internal_has_last_key_frame()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::last_key_frame(this), target, stream);
  }

  // uint32 layer_lock_plis = 35;
  if (this->_internal_layer_lock_plis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_layer_lock_plis(), target);
  }

  // .google.protobuf.Timestamp last_layer_lock_pli = 36;
  if (this->_internal_has_last_layer_lock_pli()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::last_layer_lock_pli(this), target, stream);
  }

  // uint32 nack_acks = 37;
  if (this->_internal_nack_acks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_nack_acks(), target);
  }

  // uint32 nack_repeated = 38;
  if (this->_internal_nack_repeated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_nack_repeated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RTPStats)
  return target;
}

size_t RTPStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RTPStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, uint32> gap_histogram = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_gap_histogram_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint32_t >::const_iterator
      it = this->_internal_gap_histogram().begin();
      it != this->_internal_gap_histogram().end(); ++it) {
    total_size += RTPStats_GapHistogramEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .google.protobuf.Timestamp start_time = 1;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // .google.protobuf.Timestamp last_pli = 28;
  if (this->_internal_has_last_pli()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_pli_);
  }

  // .google.protobuf.Timestamp last_fir = 30;
  if (this->_internal_has_last_fir()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_fir_);
  }

  // .google.protobuf.Timestamp last_key_frame = 34;
  if (this->_internal_has_last_key_frame()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_key_frame_);
  }

  // .google.protobuf.Timestamp last_layer_lock_pli = 36;
  if (this->_internal_has_last_layer_lock_pli()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_layer_lock_pli_);
  }

  // double duration = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_duration = this->_internal_duration();
  uint64_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    total_size += 1 + 8;
  }

  // double packet_rate = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_rate = this->_internal_packet_rate();
  uint64_t raw_packet_rate;
  memcpy(&raw_packet_rate, &tmp_packet_rate, sizeof(tmp_packet_rate));
  if (raw_packet_rate != 0) {
    total_size += 1 + 8;
  }

  // uint64 bytes = 6;
  if (this->_internal_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes());
  }

  // uint32 packets = 4;
  if (this->_internal_packets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_packets());
  }

  // uint32 packets_lost = 8;
  if (this->_internal_packets_lost() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_packets_lost());
  }

  // double bitrate = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bitrate = this->_internal_bitrate();
  uint64_t raw_bitrate;
  memcpy(&raw_bitrate, &tmp_bitrate, sizeof(tmp_bitrate));
  if (raw_bitrate != 0) {
    total_size += 1 + 8;
  }

  // double packet_loss_rate = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_loss_rate = this->_internal_packet_loss_rate();
  uint64_t raw_packet_loss_rate;
  memcpy(&raw_packet_loss_rate, &tmp_packet_loss_rate, sizeof(tmp_packet_loss_rate));
  if (raw_packet_loss_rate != 0) {
    total_size += 1 + 8;
  }

  // float packet_loss_percentage = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_packet_loss_percentage = this->_internal_packet_loss_percentage();
  uint32_t raw_packet_loss_percentage;
  memcpy(&raw_packet_loss_percentage, &tmp_packet_loss_percentage, sizeof(tmp_packet_loss_percentage));
  if (raw_packet_loss_percentage != 0) {
    total_size += 1 + 4;
  }

  // uint32 packets_duplicate = 11;
  if (this->_internal_packets_duplicate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_packets_duplicate());
  }

  // double packet_duplicate_rate = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_duplicate_rate = this->_internal_packet_duplicate_rate();
  uint64_t raw_packet_duplicate_rate;
  memcpy(&raw_packet_duplicate_rate, &tmp_packet_duplicate_rate, sizeof(tmp_packet_duplicate_rate));
  if (raw_packet_duplicate_rate != 0) {
    total_size += 1 + 8;
  }

  // uint64 bytes_duplicate = 13;
  if (this->_internal_bytes_duplicate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_duplicate());
  }

  // double bitrate_duplicate = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bitrate_duplicate = this->_internal_bitrate_duplicate();
  uint64_t raw_bitrate_duplicate;
  memcpy(&raw_bitrate_duplicate, &tmp_bitrate_duplicate, sizeof(tmp_bitrate_duplicate));
  if (raw_bitrate_duplicate != 0) {
    total_size += 1 + 8;
  }

  // double packet_padding_rate = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_padding_rate = this->_internal_packet_padding_rate();
  uint64_t raw_packet_padding_rate;
  memcpy(&raw_packet_padding_rate, &tmp_packet_padding_rate, sizeof(tmp_packet_padding_rate));
  if (raw_packet_padding_rate != 0) {
    total_size += 2 + 8;
  }

  // uint64 bytes_padding = 17;
  if (this->_internal_bytes_padding() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bytes_padding());
  }

  // uint32 packets_padding = 15;
  if (this->_internal_packets_padding() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_packets_padding());
  }

  // uint32 packets_out_of_order = 19;
  if (this->_internal_packets_out_of_order() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_packets_out_of_order());
  }

  // double bitrate_padding = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bitrate_padding = this->_internal_bitrate_padding();
  uint64_t raw_bitrate_padding;
  memcpy(&raw_bitrate_padding, &tmp_bitrate_padding, sizeof(tmp_bitrate_padding));
  if (raw_bitrate_padding != 0) {
    total_size += 2 + 8;
  }

  // double frame_rate = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_frame_rate = this->_internal_frame_rate();
  uint64_t raw_frame_rate;
  memcpy(&raw_frame_rate, &tmp_frame_rate, sizeof(tmp_frame_rate));
  if (raw_frame_rate != 0) {
    total_size += 2 + 8;
  }

  // double jitter_current = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jitter_current = this->_internal_jitter_current();
  uint64_t raw_jitter_current;
  memcpy(&raw_jitter_current, &tmp_jitter_current, sizeof(tmp_jitter_current));
  if (raw_jitter_current != 0) {
    total_size += 2 + 8;
  }

  // uint32 frames = 20;
  if (this->_internal_frames() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frames());
  }

  // uint32 nacks = 25;
  if (this->_internal_nacks() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nacks());
  }

  // double jitter_max = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jitter_max = this->_internal_jitter_max();
  uint64_t raw_jitter_max;
  memcpy(&raw_jitter_max, &tmp_jitter_max, sizeof(tmp_jitter_max));
  if (raw_jitter_max != 0) {
    total_size += 2 + 8;
  }

  // uint32 nack_misses = 26;
  if (this->_internal_nack_misses() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nack_misses());
  }

  // uint32 plis = 27;
  if (this->_internal_plis() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_plis());
  }

  // uint32 firs = 29;
  if (this->_internal_firs() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_firs());
  }

  // uint32 rtt_current = 31;
  if (this->_internal_rtt_current() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rtt_current());
  }

  // uint32 rtt_max = 32;
  if (this->_internal_rtt_max() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rtt_max());
  }

  // uint32 key_frames = 33;
  if (this->_internal_key_frames() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key_frames());
  }

  // uint32 layer_lock_plis = 35;
  if (this->_internal_layer_lock_plis() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_layer_lock_plis());
  }

  // uint32 nack_acks = 37;
  if (this->_internal_nack_acks() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nack_acks());
  }

  // uint32 nack_repeated = 38;
  if (this->_internal_nack_repeated() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nack_repeated());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RTPStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RTPStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RTPStats::GetClassData() const { return &_class_data_; }

void RTPStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RTPStats *>(to)->MergeFrom(
      static_cast<const RTPStats &>(from));
}


void RTPStats::MergeFrom(const RTPStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.RTPStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  gap_histogram_.MergeFrom(from.gap_histogram_);
  if (from._internal_has_start_time()) {
    _internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from._internal_has_end_time()) {
    _internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
  if (from._internal_has_last_pli()) {
    _internal_mutable_last_pli()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_pli());
  }
  if (from._internal_has_last_fir()) {
    _internal_mutable_last_fir()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_fir());
  }
  if (from._internal_has_last_key_frame()) {
    _internal_mutable_last_key_frame()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_key_frame());
  }
  if (from._internal_has_last_layer_lock_pli()) {
    _internal_mutable_last_layer_lock_pli()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_layer_lock_pli());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_duration = from._internal_duration();
  uint64_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    _internal_set_duration(from._internal_duration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_rate = from._internal_packet_rate();
  uint64_t raw_packet_rate;
  memcpy(&raw_packet_rate, &tmp_packet_rate, sizeof(tmp_packet_rate));
  if (raw_packet_rate != 0) {
    _internal_set_packet_rate(from._internal_packet_rate());
  }
  if (from._internal_bytes() != 0) {
    _internal_set_bytes(from._internal_bytes());
  }
  if (from._internal_packets() != 0) {
    _internal_set_packets(from._internal_packets());
  }
  if (from._internal_packets_lost() != 0) {
    _internal_set_packets_lost(from._internal_packets_lost());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bitrate = from._internal_bitrate();
  uint64_t raw_bitrate;
  memcpy(&raw_bitrate, &tmp_bitrate, sizeof(tmp_bitrate));
  if (raw_bitrate != 0) {
    _internal_set_bitrate(from._internal_bitrate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_loss_rate = from._internal_packet_loss_rate();
  uint64_t raw_packet_loss_rate;
  memcpy(&raw_packet_loss_rate, &tmp_packet_loss_rate, sizeof(tmp_packet_loss_rate));
  if (raw_packet_loss_rate != 0) {
    _internal_set_packet_loss_rate(from._internal_packet_loss_rate());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_packet_loss_percentage = from._internal_packet_loss_percentage();
  uint32_t raw_packet_loss_percentage;
  memcpy(&raw_packet_loss_percentage, &tmp_packet_loss_percentage, sizeof(tmp_packet_loss_percentage));
  if (raw_packet_loss_percentage != 0) {
    _internal_set_packet_loss_percentage(from._internal_packet_loss_percentage());
  }
  if (from._internal_packets_duplicate() != 0) {
    _internal_set_packets_duplicate(from._internal_packets_duplicate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_duplicate_rate = from._internal_packet_duplicate_rate();
  uint64_t raw_packet_duplicate_rate;
  memcpy(&raw_packet_duplicate_rate, &tmp_packet_duplicate_rate, sizeof(tmp_packet_duplicate_rate));
  if (raw_packet_duplicate_rate != 0) {
    _internal_set_packet_duplicate_rate(from._internal_packet_duplicate_rate());
  }
  if (from._internal_bytes_duplicate() != 0) {
    _internal_set_bytes_duplicate(from._internal_bytes_duplicate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bitrate_duplicate = from._internal_bitrate_duplicate();
  uint64_t raw_bitrate_duplicate;
  memcpy(&raw_bitrate_duplicate, &tmp_bitrate_duplicate, sizeof(tmp_bitrate_duplicate));
  if (raw_bitrate_duplicate != 0) {
    _internal_set_bitrate_duplicate(from._internal_bitrate_duplicate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_padding_rate = from._internal_packet_padding_rate();
  uint64_t raw_packet_padding_rate;
  memcpy(&raw_packet_padding_rate, &tmp_packet_padding_rate, sizeof(tmp_packet_padding_rate));
  if (raw_packet_padding_rate != 0) {
    _internal_set_packet_padding_rate(from._internal_packet_padding_rate());
  }
  if (from._internal_bytes_padding() != 0) {
    _internal_set_bytes_padding(from._internal_bytes_padding());
  }
  if (from._internal_packets_padding() != 0) {
    _internal_set_packets_padding(from._internal_packets_padding());
  }
  if (from._internal_packets_out_of_order() != 0) {
    _internal_set_packets_out_of_order(from._internal_packets_out_of_order());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bitrate_padding = from._internal_bitrate_padding();
  uint64_t raw_bitrate_padding;
  memcpy(&raw_bitrate_padding, &tmp_bitrate_padding, sizeof(tmp_bitrate_padding));
  if (raw_bitrate_padding != 0) {
    _internal_set_bitrate_padding(from._internal_bitrate_padding());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_frame_rate = from._internal_frame_rate();
  uint64_t raw_frame_rate;
  memcpy(&raw_frame_rate, &tmp_frame_rate, sizeof(tmp_frame_rate));
  if (raw_frame_rate != 0) {
    _internal_set_frame_rate(from._internal_frame_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jitter_current = from._internal_jitter_current();
  uint64_t raw_jitter_current;
  memcpy(&raw_jitter_current, &tmp_jitter_current, sizeof(tmp_jitter_current));
  if (raw_jitter_current != 0) {
    _internal_set_jitter_current(from._internal_jitter_current());
  }
  if (from._internal_frames() != 0) {
    _internal_set_frames(from._internal_frames());
  }
  if (from._internal_nacks() != 0) {
    _internal_set_nacks(from._internal_nacks());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jitter_max = from._internal_jitter_max();
  uint64_t raw_jitter_max;
  memcpy(&raw_jitter_max, &tmp_jitter_max, sizeof(tmp_jitter_max));
  if (raw_jitter_max != 0) {
    _internal_set_jitter_max(from._internal_jitter_max());
  }
  if (from._internal_nack_misses() != 0) {
    _internal_set_nack_misses(from._internal_nack_misses());
  }
  if (from._internal_plis() != 0) {
    _internal_set_plis(from._internal_plis());
  }
  if (from._internal_firs() != 0) {
    _internal_set_firs(from._internal_firs());
  }
  if (from._internal_rtt_current() != 0) {
    _internal_set_rtt_current(from._internal_rtt_current());
  }
  if (from._internal_rtt_max() != 0) {
    _internal_set_rtt_max(from._internal_rtt_max());
  }
  if (from._internal_key_frames() != 0) {
    _internal_set_key_frames(from._internal_key_frames());
  }
  if (from._internal_layer_lock_plis() != 0) {
    _internal_set_layer_lock_plis(from._internal_layer_lock_plis());
  }
  if (from._internal_nack_acks() != 0) {
    _internal_set_nack_acks(from._internal_nack_acks());
  }
  if (from._internal_nack_repeated() != 0) {
    _internal_set_nack_repeated(from._internal_nack_repeated());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RTPStats::CopyFrom(const RTPStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RTPStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTPStats::IsInitialized() const {
  return true;
}

void RTPStats::InternalSwap(RTPStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  gap_histogram_.InternalSwap(&other->gap_histogram_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTPStats, nack_repeated_)
      + sizeof(RTPStats::nack_repeated_)
      - PROTOBUF_FIELD_OFFSET(RTPStats, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RTPStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::livekit::Room* Arena::CreateMaybeMessage< ::livekit::Room >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::Room >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::Codec* Arena::CreateMaybeMessage< ::livekit::Codec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::Codec >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ParticipantPermission* Arena::CreateMaybeMessage< ::livekit::ParticipantPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ParticipantPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ParticipantInfo* Arena::CreateMaybeMessage< ::livekit::ParticipantInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ParticipantInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::TrackInfo* Arena::CreateMaybeMessage< ::livekit::TrackInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::TrackInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::VideoLayer* Arena::CreateMaybeMessage< ::livekit::VideoLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::VideoLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::DataPacket* Arena::CreateMaybeMessage< ::livekit::DataPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::DataPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ActiveSpeakerUpdate* Arena::CreateMaybeMessage< ::livekit::ActiveSpeakerUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ActiveSpeakerUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SpeakerInfo* Arena::CreateMaybeMessage< ::livekit::SpeakerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SpeakerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UserPacket* Arena::CreateMaybeMessage< ::livekit::UserPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UserPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ParticipantTracks* Arena::CreateMaybeMessage< ::livekit::ParticipantTracks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ParticipantTracks >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ClientInfo* Arena::CreateMaybeMessage< ::livekit::ClientInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ClientInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ClientConfiguration* Arena::CreateMaybeMessage< ::livekit::ClientConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ClientConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::VideoConfiguration* Arena::CreateMaybeMessage< ::livekit::VideoConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::VideoConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RTPStats_GapHistogramEntry_DoNotUse* Arena::CreateMaybeMessage< ::livekit::RTPStats_GapHistogramEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RTPStats_GapHistogramEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RTPStats* Arena::CreateMaybeMessage< ::livekit::RTPStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RTPStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
