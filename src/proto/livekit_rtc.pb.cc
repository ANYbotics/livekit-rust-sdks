// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: livekit_rtc.proto

#include "livekit_rtc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace livekit {
constexpr SignalRequest::SignalRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SignalRequestDefaultTypeInternal {
  constexpr SignalRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignalRequestDefaultTypeInternal() {}
  union {
    SignalRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignalRequestDefaultTypeInternal _SignalRequest_default_instance_;
constexpr SignalResponse::SignalResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SignalResponseDefaultTypeInternal {
  constexpr SignalResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignalResponseDefaultTypeInternal() {}
  union {
    SignalResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignalResponseDefaultTypeInternal _SignalResponse_default_instance_;
constexpr SimulcastCodec::SimulcastCodec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : codec_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enable_simulcast_layers_(false){}
struct SimulcastCodecDefaultTypeInternal {
  constexpr SimulcastCodecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimulcastCodecDefaultTypeInternal() {}
  union {
    SimulcastCodec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimulcastCodecDefaultTypeInternal _SimulcastCodec_default_instance_;
constexpr AddTrackRequest::AddTrackRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : layers_()
  , simulcast_codecs_()
  , cid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , width_(0u)
  , height_(0u)
  , muted_(false)
  , disable_dtx_(false)
  , source_(0)
{}
struct AddTrackRequestDefaultTypeInternal {
  constexpr AddTrackRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddTrackRequestDefaultTypeInternal() {}
  union {
    AddTrackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddTrackRequestDefaultTypeInternal _AddTrackRequest_default_instance_;
constexpr TrickleRequest::TrickleRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candidateinit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_(0)
{}
struct TrickleRequestDefaultTypeInternal {
  constexpr TrickleRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrickleRequestDefaultTypeInternal() {}
  union {
    TrickleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrickleRequestDefaultTypeInternal _TrickleRequest_default_instance_;
constexpr MuteTrackRequest::MuteTrackRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , muted_(false){}
struct MuteTrackRequestDefaultTypeInternal {
  constexpr MuteTrackRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MuteTrackRequestDefaultTypeInternal() {}
  union {
    MuteTrackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MuteTrackRequestDefaultTypeInternal _MuteTrackRequest_default_instance_;
constexpr JoinResponse::JoinResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : other_participants_()
  , ice_servers_()
  , server_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alternative_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_region_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , room_(nullptr)
  , participant_(nullptr)
  , client_configuration_(nullptr)
  , subscriber_primary_(false){}
struct JoinResponseDefaultTypeInternal {
  constexpr JoinResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinResponseDefaultTypeInternal() {}
  union {
    JoinResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinResponseDefaultTypeInternal _JoinResponse_default_instance_;
constexpr TrackPublishedResponse::TrackPublishedResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , track_(nullptr){}
struct TrackPublishedResponseDefaultTypeInternal {
  constexpr TrackPublishedResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackPublishedResponseDefaultTypeInternal() {}
  union {
    TrackPublishedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackPublishedResponseDefaultTypeInternal _TrackPublishedResponse_default_instance_;
constexpr TrackUnpublishedResponse::TrackUnpublishedResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : track_sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TrackUnpublishedResponseDefaultTypeInternal {
  constexpr TrackUnpublishedResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackUnpublishedResponseDefaultTypeInternal() {}
  union {
    TrackUnpublishedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackUnpublishedResponseDefaultTypeInternal _TrackUnpublishedResponse_default_instance_;
constexpr SessionDescription::SessionDescription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sdp_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SessionDescriptionDefaultTypeInternal {
  constexpr SessionDescriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionDescriptionDefaultTypeInternal() {}
  union {
    SessionDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionDescriptionDefaultTypeInternal _SessionDescription_default_instance_;
constexpr ParticipantUpdate::ParticipantUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : participants_(){}
struct ParticipantUpdateDefaultTypeInternal {
  constexpr ParticipantUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParticipantUpdateDefaultTypeInternal() {}
  union {
    ParticipantUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParticipantUpdateDefaultTypeInternal _ParticipantUpdate_default_instance_;
constexpr UpdateSubscription::UpdateSubscription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : track_sids_()
  , participant_tracks_()
  , subscribe_(false){}
struct UpdateSubscriptionDefaultTypeInternal {
  constexpr UpdateSubscriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateSubscriptionDefaultTypeInternal() {}
  union {
    UpdateSubscription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateSubscriptionDefaultTypeInternal _UpdateSubscription_default_instance_;
constexpr UpdateTrackSettings::UpdateTrackSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : track_sids_()
  , disabled_(false)
  , quality_(0)

  , width_(0u)
  , height_(0u){}
struct UpdateTrackSettingsDefaultTypeInternal {
  constexpr UpdateTrackSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateTrackSettingsDefaultTypeInternal() {}
  union {
    UpdateTrackSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateTrackSettingsDefaultTypeInternal _UpdateTrackSettings_default_instance_;
constexpr LeaveRequest::LeaveRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : can_reconnect_(false){}
struct LeaveRequestDefaultTypeInternal {
  constexpr LeaveRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeaveRequestDefaultTypeInternal() {}
  union {
    LeaveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeaveRequestDefaultTypeInternal _LeaveRequest_default_instance_;
constexpr UpdateVideoLayers::UpdateVideoLayers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : layers_()
  , track_sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateVideoLayersDefaultTypeInternal {
  constexpr UpdateVideoLayersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateVideoLayersDefaultTypeInternal() {}
  union {
    UpdateVideoLayers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateVideoLayersDefaultTypeInternal _UpdateVideoLayers_default_instance_;
constexpr ICEServer::ICEServer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : urls_()
  , username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , credential_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ICEServerDefaultTypeInternal {
  constexpr ICEServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ICEServerDefaultTypeInternal() {}
  union {
    ICEServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ICEServerDefaultTypeInternal _ICEServer_default_instance_;
constexpr SpeakersChanged::SpeakersChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : speakers_(){}
struct SpeakersChangedDefaultTypeInternal {
  constexpr SpeakersChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpeakersChangedDefaultTypeInternal() {}
  union {
    SpeakersChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpeakersChangedDefaultTypeInternal _SpeakersChanged_default_instance_;
constexpr RoomUpdate::RoomUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : room_(nullptr){}
struct RoomUpdateDefaultTypeInternal {
  constexpr RoomUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoomUpdateDefaultTypeInternal() {}
  union {
    RoomUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoomUpdateDefaultTypeInternal _RoomUpdate_default_instance_;
constexpr ConnectionQualityInfo::ConnectionQualityInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : participant_sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quality_(0)

  , score_(0){}
struct ConnectionQualityInfoDefaultTypeInternal {
  constexpr ConnectionQualityInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectionQualityInfoDefaultTypeInternal() {}
  union {
    ConnectionQualityInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectionQualityInfoDefaultTypeInternal _ConnectionQualityInfo_default_instance_;
constexpr ConnectionQualityUpdate::ConnectionQualityUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : updates_(){}
struct ConnectionQualityUpdateDefaultTypeInternal {
  constexpr ConnectionQualityUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectionQualityUpdateDefaultTypeInternal() {}
  union {
    ConnectionQualityUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectionQualityUpdateDefaultTypeInternal _ConnectionQualityUpdate_default_instance_;
constexpr StreamStateInfo::StreamStateInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : participant_sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , track_sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_(0)
{}
struct StreamStateInfoDefaultTypeInternal {
  constexpr StreamStateInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamStateInfoDefaultTypeInternal() {}
  union {
    StreamStateInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamStateInfoDefaultTypeInternal _StreamStateInfo_default_instance_;
constexpr StreamStateUpdate::StreamStateUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stream_states_(){}
struct StreamStateUpdateDefaultTypeInternal {
  constexpr StreamStateUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamStateUpdateDefaultTypeInternal() {}
  union {
    StreamStateUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamStateUpdateDefaultTypeInternal _StreamStateUpdate_default_instance_;
constexpr SubscribedQuality::SubscribedQuality(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quality_(0)

  , enabled_(false){}
struct SubscribedQualityDefaultTypeInternal {
  constexpr SubscribedQualityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribedQualityDefaultTypeInternal() {}
  union {
    SubscribedQuality _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribedQualityDefaultTypeInternal _SubscribedQuality_default_instance_;
constexpr SubscribedCodec::SubscribedCodec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : qualities_()
  , codec_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SubscribedCodecDefaultTypeInternal {
  constexpr SubscribedCodecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribedCodecDefaultTypeInternal() {}
  union {
    SubscribedCodec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribedCodecDefaultTypeInternal _SubscribedCodec_default_instance_;
constexpr SubscribedQualityUpdate::SubscribedQualityUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subscribed_qualities_()
  , subscribed_codecs_()
  , track_sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SubscribedQualityUpdateDefaultTypeInternal {
  constexpr SubscribedQualityUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribedQualityUpdateDefaultTypeInternal() {}
  union {
    SubscribedQualityUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribedQualityUpdateDefaultTypeInternal _SubscribedQualityUpdate_default_instance_;
constexpr TrackPermission::TrackPermission(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : track_sids_()
  , participant_sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , participant_identity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , all_tracks_(false){}
struct TrackPermissionDefaultTypeInternal {
  constexpr TrackPermissionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackPermissionDefaultTypeInternal() {}
  union {
    TrackPermission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackPermissionDefaultTypeInternal _TrackPermission_default_instance_;
constexpr SubscriptionPermission::SubscriptionPermission(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : track_permissions_()
  , all_participants_(false){}
struct SubscriptionPermissionDefaultTypeInternal {
  constexpr SubscriptionPermissionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscriptionPermissionDefaultTypeInternal() {}
  union {
    SubscriptionPermission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscriptionPermissionDefaultTypeInternal _SubscriptionPermission_default_instance_;
constexpr SubscriptionPermissionUpdate::SubscriptionPermissionUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : participant_sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , track_sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , allowed_(false){}
struct SubscriptionPermissionUpdateDefaultTypeInternal {
  constexpr SubscriptionPermissionUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscriptionPermissionUpdateDefaultTypeInternal() {}
  union {
    SubscriptionPermissionUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscriptionPermissionUpdateDefaultTypeInternal _SubscriptionPermissionUpdate_default_instance_;
constexpr SyncState::SyncState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publish_tracks_()
  , data_channels_()
  , answer_(nullptr)
  , subscription_(nullptr){}
struct SyncStateDefaultTypeInternal {
  constexpr SyncStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncStateDefaultTypeInternal() {}
  union {
    SyncState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncStateDefaultTypeInternal _SyncState_default_instance_;
constexpr DataChannelInfo::DataChannelInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , target_(0)
{}
struct DataChannelInfoDefaultTypeInternal {
  constexpr DataChannelInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataChannelInfoDefaultTypeInternal() {}
  union {
    DataChannelInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataChannelInfoDefaultTypeInternal _DataChannelInfo_default_instance_;
constexpr SimulateScenario::SimulateScenario(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SimulateScenarioDefaultTypeInternal {
  constexpr SimulateScenarioDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimulateScenarioDefaultTypeInternal() {}
  union {
    SimulateScenario _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimulateScenarioDefaultTypeInternal _SimulateScenario_default_instance_;
}  // namespace livekit
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_livekit_5frtc_2eproto[31];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_livekit_5frtc_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_livekit_5frtc_2eproto = nullptr;

const uint32_t TableStruct_livekit_5frtc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SignalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::SignalRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::SignalRequest, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SignalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::SignalResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::SignalResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodec, codec_),
  PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodec, cid_),
  PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodec, enable_simulcast_layers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, cid_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, name_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, type_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, width_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, height_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, muted_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, disable_dtx_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, source_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, layers_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, simulcast_codecs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::TrickleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::TrickleRequest, candidateinit_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrickleRequest, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::MuteTrackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::MuteTrackRequest, sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::MuteTrackRequest, muted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, room_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, participant_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, other_participants_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, server_version_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, ice_servers_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, subscriber_primary_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, alternative_url_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, client_configuration_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, server_region_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackPublishedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackPublishedResponse, cid_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackPublishedResponse, track_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackUnpublishedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackUnpublishedResponse, track_sid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SessionDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SessionDescription, type_),
  PROTOBUF_FIELD_OFFSET(::livekit::SessionDescription, sdp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantUpdate, participants_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscription, track_sids_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscription, subscribe_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscription, participant_tracks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, track_sids_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, disabled_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, quality_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, width_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::LeaveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::LeaveRequest, can_reconnect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateVideoLayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateVideoLayers, track_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateVideoLayers, layers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ICEServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ICEServer, urls_),
  PROTOBUF_FIELD_OFFSET(::livekit::ICEServer, username_),
  PROTOBUF_FIELD_OFFSET(::livekit::ICEServer, credential_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SpeakersChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SpeakersChanged, speakers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RoomUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RoomUpdate, room_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ConnectionQualityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ConnectionQualityInfo, participant_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::ConnectionQualityInfo, quality_),
  PROTOBUF_FIELD_OFFSET(::livekit::ConnectionQualityInfo, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ConnectionQualityUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ConnectionQualityUpdate, updates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::StreamStateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::StreamStateInfo, participant_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::StreamStateInfo, track_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::StreamStateInfo, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::StreamStateUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::StreamStateUpdate, stream_states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQuality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQuality, quality_),
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQuality, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedCodec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedCodec, codec_),
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedCodec, qualities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQualityUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQualityUpdate, track_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQualityUpdate, subscribed_qualities_),
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQualityUpdate, subscribed_codecs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackPermission, participant_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackPermission, all_tracks_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackPermission, track_sids_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackPermission, participant_identity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermission, all_participants_),
  PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermission, track_permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermissionUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermissionUpdate, participant_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermissionUpdate, track_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermissionUpdate, allowed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SyncState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SyncState, answer_),
  PROTOBUF_FIELD_OFFSET(::livekit::SyncState, subscription_),
  PROTOBUF_FIELD_OFFSET(::livekit::SyncState, publish_tracks_),
  PROTOBUF_FIELD_OFFSET(::livekit::SyncState, data_channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::DataChannelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::DataChannelInfo, label_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataChannelInfo, id_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataChannelInfo, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SimulateScenario, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::SimulateScenario, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::SimulateScenario, scenario_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::livekit::SignalRequest)},
  { 19, -1, -1, sizeof(::livekit::SignalResponse)},
  { 42, -1, -1, sizeof(::livekit::SimulcastCodec)},
  { 51, -1, -1, sizeof(::livekit::AddTrackRequest)},
  { 67, -1, -1, sizeof(::livekit::TrickleRequest)},
  { 75, -1, -1, sizeof(::livekit::MuteTrackRequest)},
  { 83, -1, -1, sizeof(::livekit::JoinResponse)},
  { 98, -1, -1, sizeof(::livekit::TrackPublishedResponse)},
  { 106, -1, -1, sizeof(::livekit::TrackUnpublishedResponse)},
  { 113, -1, -1, sizeof(::livekit::SessionDescription)},
  { 121, -1, -1, sizeof(::livekit::ParticipantUpdate)},
  { 128, -1, -1, sizeof(::livekit::UpdateSubscription)},
  { 137, -1, -1, sizeof(::livekit::UpdateTrackSettings)},
  { 148, -1, -1, sizeof(::livekit::LeaveRequest)},
  { 155, -1, -1, sizeof(::livekit::UpdateVideoLayers)},
  { 163, -1, -1, sizeof(::livekit::ICEServer)},
  { 172, -1, -1, sizeof(::livekit::SpeakersChanged)},
  { 179, -1, -1, sizeof(::livekit::RoomUpdate)},
  { 186, -1, -1, sizeof(::livekit::ConnectionQualityInfo)},
  { 195, -1, -1, sizeof(::livekit::ConnectionQualityUpdate)},
  { 202, -1, -1, sizeof(::livekit::StreamStateInfo)},
  { 211, -1, -1, sizeof(::livekit::StreamStateUpdate)},
  { 218, -1, -1, sizeof(::livekit::SubscribedQuality)},
  { 226, -1, -1, sizeof(::livekit::SubscribedCodec)},
  { 234, -1, -1, sizeof(::livekit::SubscribedQualityUpdate)},
  { 243, -1, -1, sizeof(::livekit::TrackPermission)},
  { 253, -1, -1, sizeof(::livekit::SubscriptionPermission)},
  { 261, -1, -1, sizeof(::livekit::SubscriptionPermissionUpdate)},
  { 270, -1, -1, sizeof(::livekit::SyncState)},
  { 280, -1, -1, sizeof(::livekit::DataChannelInfo)},
  { 289, -1, -1, sizeof(::livekit::SimulateScenario)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_SignalRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_SignalResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_SimulcastCodec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_AddTrackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_TrickleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_MuteTrackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_JoinResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_TrackPublishedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_TrackUnpublishedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_SessionDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_ParticipantUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_UpdateSubscription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_UpdateTrackSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_LeaveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_UpdateVideoLayers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_ICEServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_SpeakersChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_RoomUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_ConnectionQualityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_ConnectionQualityUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_StreamStateInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_StreamStateUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_SubscribedQuality_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_SubscribedCodec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_SubscribedQualityUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_TrackPermission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_SubscriptionPermission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_SubscriptionPermissionUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_SyncState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_DataChannelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::livekit::_SimulateScenario_default_instance_),
};

const char descriptor_table_protodef_livekit_5frtc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021livekit_rtc.proto\022\007livekit\032\024livekit_mo"
  "dels.proto\"\343\004\n\rSignalRequest\022,\n\005offer\030\001 "
  "\001(\0132\033.livekit.SessionDescriptionH\000\022-\n\006an"
  "swer\030\002 \001(\0132\033.livekit.SessionDescriptionH"
  "\000\022*\n\007trickle\030\003 \001(\0132\027.livekit.TrickleRequ"
  "estH\000\022-\n\tadd_track\030\004 \001(\0132\030.livekit.AddTr"
  "ackRequestH\000\022)\n\004mute\030\005 \001(\0132\031.livekit.Mut"
  "eTrackRequestH\000\0223\n\014subscription\030\006 \001(\0132\033."
  "livekit.UpdateSubscriptionH\000\0225\n\rtrack_se"
  "tting\030\007 \001(\0132\034.livekit.UpdateTrackSetting"
  "sH\000\022&\n\005leave\030\010 \001(\0132\025.livekit.LeaveReques"
  "tH\000\0223\n\rupdate_layers\030\n \001(\0132\032.livekit.Upd"
  "ateVideoLayersH\000\022B\n\027subscription_permiss"
  "ion\030\013 \001(\0132\037.livekit.SubscriptionPermissi"
  "onH\000\022(\n\nsync_state\030\014 \001(\0132\022.livekit.SyncS"
  "tateH\000\022-\n\010simulate\030\r \001(\0132\031.livekit.Simul"
  "ateScenarioH\000B\t\n\007message\"\326\006\n\016SignalRespo"
  "nse\022%\n\004join\030\001 \001(\0132\025.livekit.JoinResponse"
  "H\000\022-\n\006answer\030\002 \001(\0132\033.livekit.SessionDesc"
  "riptionH\000\022,\n\005offer\030\003 \001(\0132\033.livekit.Sessi"
  "onDescriptionH\000\022*\n\007trickle\030\004 \001(\0132\027.livek"
  "it.TrickleRequestH\000\022,\n\006update\030\005 \001(\0132\032.li"
  "vekit.ParticipantUpdateH\000\022:\n\017track_publi"
  "shed\030\006 \001(\0132\037.livekit.TrackPublishedRespo"
  "nseH\000\022&\n\005leave\030\010 \001(\0132\025.livekit.LeaveRequ"
  "estH\000\022)\n\004mute\030\t \001(\0132\031.livekit.MuteTrackR"
  "equestH\000\0224\n\020speakers_changed\030\n \001(\0132\030.liv"
  "ekit.SpeakersChangedH\000\022*\n\013room_update\030\013 "
  "\001(\0132\023.livekit.RoomUpdateH\000\022>\n\022connection"
  "_quality\030\014 \001(\0132 .livekit.ConnectionQuali"
  "tyUpdateH\000\0229\n\023stream_state_update\030\r \001(\0132"
  "\032.livekit.StreamStateUpdateH\000\022E\n\031subscri"
  "bed_quality_update\030\016 \001(\0132 .livekit.Subsc"
  "ribedQualityUpdateH\000\022O\n\036subscription_per"
  "mission_update\030\017 \001(\0132%.livekit.Subscript"
  "ionPermissionUpdateH\000\022\027\n\rrefresh_token\030\020"
  " \001(\tH\000\022>\n\021track_unpublished\030\021 \001(\0132!.live"
  "kit.TrackUnpublishedResponseH\000B\t\n\007messag"
  "e\"M\n\016SimulcastCodec\022\r\n\005codec\030\001 \001(\t\022\013\n\003ci"
  "d\030\002 \001(\t\022\037\n\027enable_simulcast_layers\030\003 \001(\010"
  "\"\217\002\n\017AddTrackRequest\022\013\n\003cid\030\001 \001(\t\022\014\n\004nam"
  "e\030\002 \001(\t\022 \n\004type\030\003 \001(\0162\022.livekit.TrackTyp"
  "e\022\r\n\005width\030\004 \001(\r\022\016\n\006height\030\005 \001(\r\022\r\n\005mute"
  "d\030\006 \001(\010\022\023\n\013disable_dtx\030\007 \001(\010\022$\n\006source\030\010"
  " \001(\0162\024.livekit.TrackSource\022#\n\006layers\030\t \003"
  "(\0132\023.livekit.VideoLayer\0221\n\020simulcast_cod"
  "ecs\030\n \003(\0132\027.livekit.SimulcastCodec\"N\n\016Tr"
  "ickleRequest\022\025\n\rcandidateInit\030\001 \001(\t\022%\n\006t"
  "arget\030\002 \001(\0162\025.livekit.SignalTarget\".\n\020Mu"
  "teTrackRequest\022\013\n\003sid\030\001 \001(\t\022\r\n\005muted\030\002 \001"
  "(\010\"\331\002\n\014JoinResponse\022\033\n\004room\030\001 \001(\0132\r.live"
  "kit.Room\022-\n\013participant\030\002 \001(\0132\030.livekit."
  "ParticipantInfo\0224\n\022other_participants\030\003 "
  "\003(\0132\030.livekit.ParticipantInfo\022\026\n\016server_"
  "version\030\004 \001(\t\022\'\n\013ice_servers\030\005 \003(\0132\022.liv"
  "ekit.ICEServer\022\032\n\022subscriber_primary\030\006 \001"
  "(\010\022\027\n\017alternative_url\030\007 \001(\t\022:\n\024client_co"
  "nfiguration\030\010 \001(\0132\034.livekit.ClientConfig"
  "uration\022\025\n\rserver_region\030\t \001(\t\"H\n\026TrackP"
  "ublishedResponse\022\013\n\003cid\030\001 \001(\t\022!\n\005track\030\002"
  " \001(\0132\022.livekit.TrackInfo\"-\n\030TrackUnpubli"
  "shedResponse\022\021\n\ttrack_sid\030\001 \001(\t\"/\n\022Sessi"
  "onDescription\022\014\n\004type\030\001 \001(\t\022\013\n\003sdp\030\002 \001(\t"
  "\"C\n\021ParticipantUpdate\022.\n\014participants\030\001 "
  "\003(\0132\030.livekit.ParticipantInfo\"s\n\022UpdateS"
  "ubscription\022\022\n\ntrack_sids\030\001 \003(\t\022\021\n\tsubsc"
  "ribe\030\002 \001(\010\0226\n\022participant_tracks\030\003 \003(\0132\032"
  ".livekit.ParticipantTracks\"\202\001\n\023UpdateTra"
  "ckSettings\022\022\n\ntrack_sids\030\001 \003(\t\022\020\n\010disabl"
  "ed\030\003 \001(\010\022&\n\007quality\030\004 \001(\0162\025.livekit.Vide"
  "oQuality\022\r\n\005width\030\005 \001(\r\022\016\n\006height\030\006 \001(\r\""
  "%\n\014LeaveRequest\022\025\n\rcan_reconnect\030\001 \001(\010\"K"
  "\n\021UpdateVideoLayers\022\021\n\ttrack_sid\030\001 \001(\t\022#"
  "\n\006layers\030\002 \003(\0132\023.livekit.VideoLayer\"\?\n\tI"
  "CEServer\022\014\n\004urls\030\001 \003(\t\022\020\n\010username\030\002 \001(\t"
  "\022\022\n\ncredential\030\003 \001(\t\"9\n\017SpeakersChanged\022"
  "&\n\010speakers\030\001 \003(\0132\024.livekit.SpeakerInfo\""
  ")\n\nRoomUpdate\022\033\n\004room\030\001 \001(\0132\r.livekit.Ro"
  "om\"l\n\025ConnectionQualityInfo\022\027\n\017participa"
  "nt_sid\030\001 \001(\t\022+\n\007quality\030\002 \001(\0162\032.livekit."
  "ConnectionQuality\022\r\n\005score\030\003 \001(\002\"J\n\027Conn"
  "ectionQualityUpdate\022/\n\007updates\030\001 \003(\0132\036.l"
  "ivekit.ConnectionQualityInfo\"b\n\017StreamSt"
  "ateInfo\022\027\n\017participant_sid\030\001 \001(\t\022\021\n\ttrac"
  "k_sid\030\002 \001(\t\022#\n\005state\030\003 \001(\0162\024.livekit.Str"
  "eamState\"D\n\021StreamStateUpdate\022/\n\rstream_"
  "states\030\001 \003(\0132\030.livekit.StreamStateInfo\"L"
  "\n\021SubscribedQuality\022&\n\007quality\030\001 \001(\0162\025.l"
  "ivekit.VideoQuality\022\017\n\007enabled\030\002 \001(\010\"O\n\017"
  "SubscribedCodec\022\r\n\005codec\030\001 \001(\t\022-\n\tqualit"
  "ies\030\002 \003(\0132\032.livekit.SubscribedQuality\"\233\001"
  "\n\027SubscribedQualityUpdate\022\021\n\ttrack_sid\030\001"
  " \001(\t\0228\n\024subscribed_qualities\030\002 \003(\0132\032.liv"
  "ekit.SubscribedQuality\0223\n\021subscribed_cod"
  "ecs\030\003 \003(\0132\030.livekit.SubscribedCodec\"p\n\017T"
  "rackPermission\022\027\n\017participant_sid\030\001 \001(\t\022"
  "\022\n\nall_tracks\030\002 \001(\010\022\022\n\ntrack_sids\030\003 \003(\t\022"
  "\034\n\024participant_identity\030\004 \001(\t\"g\n\026Subscri"
  "ptionPermission\022\030\n\020all_participants\030\001 \001("
  "\010\0223\n\021track_permissions\030\002 \003(\0132\030.livekit.T"
  "rackPermission\"[\n\034SubscriptionPermission"
  "Update\022\027\n\017participant_sid\030\001 \001(\t\022\021\n\ttrack"
  "_sid\030\002 \001(\t\022\017\n\007allowed\030\003 \001(\010\"\325\001\n\tSyncStat"
  "e\022+\n\006answer\030\001 \001(\0132\033.livekit.SessionDescr"
  "iption\0221\n\014subscription\030\002 \001(\0132\033.livekit.U"
  "pdateSubscription\0227\n\016publish_tracks\030\003 \003("
  "\0132\037.livekit.TrackPublishedResponse\022/\n\rda"
  "ta_channels\030\004 \003(\0132\030.livekit.DataChannelI"
  "nfo\"S\n\017DataChannelInfo\022\r\n\005label\030\001 \001(\t\022\n\n"
  "\002id\030\002 \001(\r\022%\n\006target\030\003 \001(\0162\025.livekit.Sign"
  "alTarget\"}\n\020SimulateScenario\022\030\n\016speaker_"
  "update\030\001 \001(\005H\000\022\026\n\014node_failure\030\002 \001(\010H\000\022\023"
  "\n\tmigration\030\003 \001(\010H\000\022\026\n\014server_leave\030\004 \001("
  "\010H\000B\n\n\010scenario*-\n\014SignalTarget\022\r\n\tPUBLI"
  "SHER\020\000\022\016\n\nSUBSCRIBER\020\001*%\n\013StreamState\022\n\n"
  "\006ACTIVE\020\000\022\n\n\006PAUSED\020\001BFZ#github.com/live"
  "kit/protocol/livekit\252\002\rLiveKit.Proto\352\002\016L"
  "iveKit::Protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_livekit_5frtc_2eproto_deps[1] = {
  &::descriptor_table_livekit_5fmodels_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_livekit_5frtc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_livekit_5frtc_2eproto = {
  false, false, 4701, descriptor_table_protodef_livekit_5frtc_2eproto, "livekit_rtc.proto", 
  &descriptor_table_livekit_5frtc_2eproto_once, descriptor_table_livekit_5frtc_2eproto_deps, 1, 31,
  schemas, file_default_instances, TableStruct_livekit_5frtc_2eproto::offsets,
  file_level_metadata_livekit_5frtc_2eproto, file_level_enum_descriptors_livekit_5frtc_2eproto, file_level_service_descriptors_livekit_5frtc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_livekit_5frtc_2eproto_getter() {
  return &descriptor_table_livekit_5frtc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_livekit_5frtc_2eproto(&descriptor_table_livekit_5frtc_2eproto);
namespace livekit {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignalTarget_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5frtc_2eproto);
  return file_level_enum_descriptors_livekit_5frtc_2eproto[0];
}
bool SignalTarget_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5frtc_2eproto);
  return file_level_enum_descriptors_livekit_5frtc_2eproto[1];
}
bool StreamState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SignalRequest::_Internal {
 public:
  static const ::livekit::SessionDescription& offer(const SignalRequest* msg);
  static const ::livekit::SessionDescription& answer(const SignalRequest* msg);
  static const ::livekit::TrickleRequest& trickle(const SignalRequest* msg);
  static const ::livekit::AddTrackRequest& add_track(const SignalRequest* msg);
  static const ::livekit::MuteTrackRequest& mute(const SignalRequest* msg);
  static const ::livekit::UpdateSubscription& subscription(const SignalRequest* msg);
  static const ::livekit::UpdateTrackSettings& track_setting(const SignalRequest* msg);
  static const ::livekit::LeaveRequest& leave(const SignalRequest* msg);
  static const ::livekit::UpdateVideoLayers& update_layers(const SignalRequest* msg);
  static const ::livekit::SubscriptionPermission& subscription_permission(const SignalRequest* msg);
  static const ::livekit::SyncState& sync_state(const SignalRequest* msg);
  static const ::livekit::SimulateScenario& simulate(const SignalRequest* msg);
};

const ::livekit::SessionDescription&
SignalRequest::_Internal::offer(const SignalRequest* msg) {
  return *msg->message_.offer_;
}
const ::livekit::SessionDescription&
SignalRequest::_Internal::answer(const SignalRequest* msg) {
  return *msg->message_.answer_;
}
const ::livekit::TrickleRequest&
SignalRequest::_Internal::trickle(const SignalRequest* msg) {
  return *msg->message_.trickle_;
}
const ::livekit::AddTrackRequest&
SignalRequest::_Internal::add_track(const SignalRequest* msg) {
  return *msg->message_.add_track_;
}
const ::livekit::MuteTrackRequest&
SignalRequest::_Internal::mute(const SignalRequest* msg) {
  return *msg->message_.mute_;
}
const ::livekit::UpdateSubscription&
SignalRequest::_Internal::subscription(const SignalRequest* msg) {
  return *msg->message_.subscription_;
}
const ::livekit::UpdateTrackSettings&
SignalRequest::_Internal::track_setting(const SignalRequest* msg) {
  return *msg->message_.track_setting_;
}
const ::livekit::LeaveRequest&
SignalRequest::_Internal::leave(const SignalRequest* msg) {
  return *msg->message_.leave_;
}
const ::livekit::UpdateVideoLayers&
SignalRequest::_Internal::update_layers(const SignalRequest* msg) {
  return *msg->message_.update_layers_;
}
const ::livekit::SubscriptionPermission&
SignalRequest::_Internal::subscription_permission(const SignalRequest* msg) {
  return *msg->message_.subscription_permission_;
}
const ::livekit::SyncState&
SignalRequest::_Internal::sync_state(const SignalRequest* msg) {
  return *msg->message_.sync_state_;
}
const ::livekit::SimulateScenario&
SignalRequest::_Internal::simulate(const SignalRequest* msg) {
  return *msg->message_.simulate_;
}
void SignalRequest::set_allocated_offer(::livekit::SessionDescription* offer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (offer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::SessionDescription>::GetOwningArena(offer);
    if (message_arena != submessage_arena) {
      offer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offer, submessage_arena);
    }
    set_has_offer();
    message_.offer_ = offer;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.offer)
}
void SignalRequest::set_allocated_answer(::livekit::SessionDescription* answer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (answer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::SessionDescription>::GetOwningArena(answer);
    if (message_arena != submessage_arena) {
      answer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, answer, submessage_arena);
    }
    set_has_answer();
    message_.answer_ = answer;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.answer)
}
void SignalRequest::set_allocated_trickle(::livekit::TrickleRequest* trickle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (trickle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::TrickleRequest>::GetOwningArena(trickle);
    if (message_arena != submessage_arena) {
      trickle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trickle, submessage_arena);
    }
    set_has_trickle();
    message_.trickle_ = trickle;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.trickle)
}
void SignalRequest::set_allocated_add_track(::livekit::AddTrackRequest* add_track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (add_track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::AddTrackRequest>::GetOwningArena(add_track);
    if (message_arena != submessage_arena) {
      add_track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_track, submessage_arena);
    }
    set_has_add_track();
    message_.add_track_ = add_track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.add_track)
}
void SignalRequest::set_allocated_mute(::livekit::MuteTrackRequest* mute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (mute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::MuteTrackRequest>::GetOwningArena(mute);
    if (message_arena != submessage_arena) {
      mute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mute, submessage_arena);
    }
    set_has_mute();
    message_.mute_ = mute;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.mute)
}
void SignalRequest::set_allocated_subscription(::livekit::UpdateSubscription* subscription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (subscription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::UpdateSubscription>::GetOwningArena(subscription);
    if (message_arena != submessage_arena) {
      subscription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscription, submessage_arena);
    }
    set_has_subscription();
    message_.subscription_ = subscription;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.subscription)
}
void SignalRequest::set_allocated_track_setting(::livekit::UpdateTrackSettings* track_setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (track_setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::UpdateTrackSettings>::GetOwningArena(track_setting);
    if (message_arena != submessage_arena) {
      track_setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_setting, submessage_arena);
    }
    set_has_track_setting();
    message_.track_setting_ = track_setting;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.track_setting)
}
void SignalRequest::set_allocated_leave(::livekit::LeaveRequest* leave) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (leave) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::LeaveRequest>::GetOwningArena(leave);
    if (message_arena != submessage_arena) {
      leave = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leave, submessage_arena);
    }
    set_has_leave();
    message_.leave_ = leave;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.leave)
}
void SignalRequest::set_allocated_update_layers(::livekit::UpdateVideoLayers* update_layers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (update_layers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::UpdateVideoLayers>::GetOwningArena(update_layers);
    if (message_arena != submessage_arena) {
      update_layers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_layers, submessage_arena);
    }
    set_has_update_layers();
    message_.update_layers_ = update_layers;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.update_layers)
}
void SignalRequest::set_allocated_subscription_permission(::livekit::SubscriptionPermission* subscription_permission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (subscription_permission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::SubscriptionPermission>::GetOwningArena(subscription_permission);
    if (message_arena != submessage_arena) {
      subscription_permission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscription_permission, submessage_arena);
    }
    set_has_subscription_permission();
    message_.subscription_permission_ = subscription_permission;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.subscription_permission)
}
void SignalRequest::set_allocated_sync_state(::livekit::SyncState* sync_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (sync_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::SyncState>::GetOwningArena(sync_state);
    if (message_arena != submessage_arena) {
      sync_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_state, submessage_arena);
    }
    set_has_sync_state();
    message_.sync_state_ = sync_state;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.sync_state)
}
void SignalRequest::set_allocated_simulate(::livekit::SimulateScenario* simulate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (simulate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::SimulateScenario>::GetOwningArena(simulate);
    if (message_arena != submessage_arena) {
      simulate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simulate, submessage_arena);
    }
    set_has_simulate();
    message_.simulate_ = simulate;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.simulate)
}
SignalRequest::SignalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.SignalRequest)
}
SignalRequest::SignalRequest(const SignalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kOffer: {
      _internal_mutable_offer()->::livekit::SessionDescription::MergeFrom(from._internal_offer());
      break;
    }
    case kAnswer: {
      _internal_mutable_answer()->::livekit::SessionDescription::MergeFrom(from._internal_answer());
      break;
    }
    case kTrickle: {
      _internal_mutable_trickle()->::livekit::TrickleRequest::MergeFrom(from._internal_trickle());
      break;
    }
    case kAddTrack: {
      _internal_mutable_add_track()->::livekit::AddTrackRequest::MergeFrom(from._internal_add_track());
      break;
    }
    case kMute: {
      _internal_mutable_mute()->::livekit::MuteTrackRequest::MergeFrom(from._internal_mute());
      break;
    }
    case kSubscription: {
      _internal_mutable_subscription()->::livekit::UpdateSubscription::MergeFrom(from._internal_subscription());
      break;
    }
    case kTrackSetting: {
      _internal_mutable_track_setting()->::livekit::UpdateTrackSettings::MergeFrom(from._internal_track_setting());
      break;
    }
    case kLeave: {
      _internal_mutable_leave()->::livekit::LeaveRequest::MergeFrom(from._internal_leave());
      break;
    }
    case kUpdateLayers: {
      _internal_mutable_update_layers()->::livekit::UpdateVideoLayers::MergeFrom(from._internal_update_layers());
      break;
    }
    case kSubscriptionPermission: {
      _internal_mutable_subscription_permission()->::livekit::SubscriptionPermission::MergeFrom(from._internal_subscription_permission());
      break;
    }
    case kSyncState: {
      _internal_mutable_sync_state()->::livekit::SyncState::MergeFrom(from._internal_sync_state());
      break;
    }
    case kSimulate: {
      _internal_mutable_simulate()->::livekit::SimulateScenario::MergeFrom(from._internal_simulate());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SignalRequest)
}

inline void SignalRequest::SharedCtor() {
clear_has_message();
}

SignalRequest::~SignalRequest() {
  // @@protoc_insertion_point(destructor:livekit.SignalRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SignalRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void SignalRequest::ArenaDtor(void* object) {
  SignalRequest* _this = reinterpret_cast< SignalRequest* >(object);
  (void)_this;
}
void SignalRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignalRequest::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:livekit.SignalRequest)
  switch (message_case()) {
    case kOffer: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.offer_;
      }
      break;
    }
    case kAnswer: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.answer_;
      }
      break;
    }
    case kTrickle: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.trickle_;
      }
      break;
    }
    case kAddTrack: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.add_track_;
      }
      break;
    }
    case kMute: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.mute_;
      }
      break;
    }
    case kSubscription: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.subscription_;
      }
      break;
    }
    case kTrackSetting: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.track_setting_;
      }
      break;
    }
    case kLeave: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.leave_;
      }
      break;
    }
    case kUpdateLayers: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.update_layers_;
      }
      break;
    }
    case kSubscriptionPermission: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.subscription_permission_;
      }
      break;
    }
    case kSyncState: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.sync_state_;
      }
      break;
    }
    case kSimulate: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.simulate_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void SignalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SignalRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.SessionDescription offer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_offer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SessionDescription answer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_answer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrickleRequest trickle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trickle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.AddTrackRequest add_track = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.MuteTrackRequest mute = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.UpdateSubscription subscription = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscription(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.UpdateTrackSettings track_setting = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_setting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.LeaveRequest leave = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_leave(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.UpdateVideoLayers update_layers = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_layers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SubscriptionPermission subscription_permission = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscription_permission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SyncState sync_state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SimulateScenario simulate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_simulate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignalRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SignalRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.SessionDescription offer = 1;
  if (_internal_has_offer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::offer(this), target, stream);
  }

  // .livekit.SessionDescription answer = 2;
  if (_internal_has_answer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::answer(this), target, stream);
  }

  // .livekit.TrickleRequest trickle = 3;
  if (_internal_has_trickle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::trickle(this), target, stream);
  }

  // .livekit.AddTrackRequest add_track = 4;
  if (_internal_has_add_track()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::add_track(this), target, stream);
  }

  // .livekit.MuteTrackRequest mute = 5;
  if (_internal_has_mute()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::mute(this), target, stream);
  }

  // .livekit.UpdateSubscription subscription = 6;
  if (_internal_has_subscription()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::subscription(this), target, stream);
  }

  // .livekit.UpdateTrackSettings track_setting = 7;
  if (_internal_has_track_setting()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::track_setting(this), target, stream);
  }

  // .livekit.LeaveRequest leave = 8;
  if (_internal_has_leave()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::leave(this), target, stream);
  }

  // .livekit.UpdateVideoLayers update_layers = 10;
  if (_internal_has_update_layers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::update_layers(this), target, stream);
  }

  // .livekit.SubscriptionPermission subscription_permission = 11;
  if (_internal_has_subscription_permission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::subscription_permission(this), target, stream);
  }

  // .livekit.SyncState sync_state = 12;
  if (_internal_has_sync_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::sync_state(this), target, stream);
  }

  // .livekit.SimulateScenario simulate = 13;
  if (_internal_has_simulate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::simulate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SignalRequest)
  return target;
}

size_t SignalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SignalRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .livekit.SessionDescription offer = 1;
    case kOffer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.offer_);
      break;
    }
    // .livekit.SessionDescription answer = 2;
    case kAnswer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.answer_);
      break;
    }
    // .livekit.TrickleRequest trickle = 3;
    case kTrickle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.trickle_);
      break;
    }
    // .livekit.AddTrackRequest add_track = 4;
    case kAddTrack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.add_track_);
      break;
    }
    // .livekit.MuteTrackRequest mute = 5;
    case kMute: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.mute_);
      break;
    }
    // .livekit.UpdateSubscription subscription = 6;
    case kSubscription: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.subscription_);
      break;
    }
    // .livekit.UpdateTrackSettings track_setting = 7;
    case kTrackSetting: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.track_setting_);
      break;
    }
    // .livekit.LeaveRequest leave = 8;
    case kLeave: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.leave_);
      break;
    }
    // .livekit.UpdateVideoLayers update_layers = 10;
    case kUpdateLayers: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.update_layers_);
      break;
    }
    // .livekit.SubscriptionPermission subscription_permission = 11;
    case kSubscriptionPermission: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.subscription_permission_);
      break;
    }
    // .livekit.SyncState sync_state = 12;
    case kSyncState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.sync_state_);
      break;
    }
    // .livekit.SimulateScenario simulate = 13;
    case kSimulate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.simulate_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignalRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignalRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignalRequest::GetClassData() const { return &_class_data_; }

void SignalRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignalRequest *>(to)->MergeFrom(
      static_cast<const SignalRequest &>(from));
}


void SignalRequest::MergeFrom(const SignalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.SignalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kOffer: {
      _internal_mutable_offer()->::livekit::SessionDescription::MergeFrom(from._internal_offer());
      break;
    }
    case kAnswer: {
      _internal_mutable_answer()->::livekit::SessionDescription::MergeFrom(from._internal_answer());
      break;
    }
    case kTrickle: {
      _internal_mutable_trickle()->::livekit::TrickleRequest::MergeFrom(from._internal_trickle());
      break;
    }
    case kAddTrack: {
      _internal_mutable_add_track()->::livekit::AddTrackRequest::MergeFrom(from._internal_add_track());
      break;
    }
    case kMute: {
      _internal_mutable_mute()->::livekit::MuteTrackRequest::MergeFrom(from._internal_mute());
      break;
    }
    case kSubscription: {
      _internal_mutable_subscription()->::livekit::UpdateSubscription::MergeFrom(from._internal_subscription());
      break;
    }
    case kTrackSetting: {
      _internal_mutable_track_setting()->::livekit::UpdateTrackSettings::MergeFrom(from._internal_track_setting());
      break;
    }
    case kLeave: {
      _internal_mutable_leave()->::livekit::LeaveRequest::MergeFrom(from._internal_leave());
      break;
    }
    case kUpdateLayers: {
      _internal_mutable_update_layers()->::livekit::UpdateVideoLayers::MergeFrom(from._internal_update_layers());
      break;
    }
    case kSubscriptionPermission: {
      _internal_mutable_subscription_permission()->::livekit::SubscriptionPermission::MergeFrom(from._internal_subscription_permission());
      break;
    }
    case kSyncState: {
      _internal_mutable_sync_state()->::livekit::SyncState::MergeFrom(from._internal_sync_state());
      break;
    }
    case kSimulate: {
      _internal_mutable_simulate()->::livekit::SimulateScenario::MergeFrom(from._internal_simulate());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignalRequest::CopyFrom(const SignalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SignalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalRequest::IsInitialized() const {
  return true;
}

void SignalRequest::InternalSwap(SignalRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[0]);
}

// ===================================================================

class SignalResponse::_Internal {
 public:
  static const ::livekit::JoinResponse& join(const SignalResponse* msg);
  static const ::livekit::SessionDescription& answer(const SignalResponse* msg);
  static const ::livekit::SessionDescription& offer(const SignalResponse* msg);
  static const ::livekit::TrickleRequest& trickle(const SignalResponse* msg);
  static const ::livekit::ParticipantUpdate& update(const SignalResponse* msg);
  static const ::livekit::TrackPublishedResponse& track_published(const SignalResponse* msg);
  static const ::livekit::LeaveRequest& leave(const SignalResponse* msg);
  static const ::livekit::MuteTrackRequest& mute(const SignalResponse* msg);
  static const ::livekit::SpeakersChanged& speakers_changed(const SignalResponse* msg);
  static const ::livekit::RoomUpdate& room_update(const SignalResponse* msg);
  static const ::livekit::ConnectionQualityUpdate& connection_quality(const SignalResponse* msg);
  static const ::livekit::StreamStateUpdate& stream_state_update(const SignalResponse* msg);
  static const ::livekit::SubscribedQualityUpdate& subscribed_quality_update(const SignalResponse* msg);
  static const ::livekit::SubscriptionPermissionUpdate& subscription_permission_update(const SignalResponse* msg);
  static const ::livekit::TrackUnpublishedResponse& track_unpublished(const SignalResponse* msg);
};

const ::livekit::JoinResponse&
SignalResponse::_Internal::join(const SignalResponse* msg) {
  return *msg->message_.join_;
}
const ::livekit::SessionDescription&
SignalResponse::_Internal::answer(const SignalResponse* msg) {
  return *msg->message_.answer_;
}
const ::livekit::SessionDescription&
SignalResponse::_Internal::offer(const SignalResponse* msg) {
  return *msg->message_.offer_;
}
const ::livekit::TrickleRequest&
SignalResponse::_Internal::trickle(const SignalResponse* msg) {
  return *msg->message_.trickle_;
}
const ::livekit::ParticipantUpdate&
SignalResponse::_Internal::update(const SignalResponse* msg) {
  return *msg->message_.update_;
}
const ::livekit::TrackPublishedResponse&
SignalResponse::_Internal::track_published(const SignalResponse* msg) {
  return *msg->message_.track_published_;
}
const ::livekit::LeaveRequest&
SignalResponse::_Internal::leave(const SignalResponse* msg) {
  return *msg->message_.leave_;
}
const ::livekit::MuteTrackRequest&
SignalResponse::_Internal::mute(const SignalResponse* msg) {
  return *msg->message_.mute_;
}
const ::livekit::SpeakersChanged&
SignalResponse::_Internal::speakers_changed(const SignalResponse* msg) {
  return *msg->message_.speakers_changed_;
}
const ::livekit::RoomUpdate&
SignalResponse::_Internal::room_update(const SignalResponse* msg) {
  return *msg->message_.room_update_;
}
const ::livekit::ConnectionQualityUpdate&
SignalResponse::_Internal::connection_quality(const SignalResponse* msg) {
  return *msg->message_.connection_quality_;
}
const ::livekit::StreamStateUpdate&
SignalResponse::_Internal::stream_state_update(const SignalResponse* msg) {
  return *msg->message_.stream_state_update_;
}
const ::livekit::SubscribedQualityUpdate&
SignalResponse::_Internal::subscribed_quality_update(const SignalResponse* msg) {
  return *msg->message_.subscribed_quality_update_;
}
const ::livekit::SubscriptionPermissionUpdate&
SignalResponse::_Internal::subscription_permission_update(const SignalResponse* msg) {
  return *msg->message_.subscription_permission_update_;
}
const ::livekit::TrackUnpublishedResponse&
SignalResponse::_Internal::track_unpublished(const SignalResponse* msg) {
  return *msg->message_.track_unpublished_;
}
void SignalResponse::set_allocated_join(::livekit::JoinResponse* join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::JoinResponse>::GetOwningArena(join);
    if (message_arena != submessage_arena) {
      join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join, submessage_arena);
    }
    set_has_join();
    message_.join_ = join;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.join)
}
void SignalResponse::set_allocated_answer(::livekit::SessionDescription* answer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (answer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::SessionDescription>::GetOwningArena(answer);
    if (message_arena != submessage_arena) {
      answer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, answer, submessage_arena);
    }
    set_has_answer();
    message_.answer_ = answer;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.answer)
}
void SignalResponse::set_allocated_offer(::livekit::SessionDescription* offer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (offer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::SessionDescription>::GetOwningArena(offer);
    if (message_arena != submessage_arena) {
      offer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offer, submessage_arena);
    }
    set_has_offer();
    message_.offer_ = offer;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.offer)
}
void SignalResponse::set_allocated_trickle(::livekit::TrickleRequest* trickle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (trickle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::TrickleRequest>::GetOwningArena(trickle);
    if (message_arena != submessage_arena) {
      trickle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trickle, submessage_arena);
    }
    set_has_trickle();
    message_.trickle_ = trickle;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.trickle)
}
void SignalResponse::set_allocated_update(::livekit::ParticipantUpdate* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::ParticipantUpdate>::GetOwningArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    set_has_update();
    message_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.update)
}
void SignalResponse::set_allocated_track_published(::livekit::TrackPublishedResponse* track_published) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (track_published) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::TrackPublishedResponse>::GetOwningArena(track_published);
    if (message_arena != submessage_arena) {
      track_published = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_published, submessage_arena);
    }
    set_has_track_published();
    message_.track_published_ = track_published;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.track_published)
}
void SignalResponse::set_allocated_leave(::livekit::LeaveRequest* leave) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (leave) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::LeaveRequest>::GetOwningArena(leave);
    if (message_arena != submessage_arena) {
      leave = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leave, submessage_arena);
    }
    set_has_leave();
    message_.leave_ = leave;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.leave)
}
void SignalResponse::set_allocated_mute(::livekit::MuteTrackRequest* mute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (mute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::MuteTrackRequest>::GetOwningArena(mute);
    if (message_arena != submessage_arena) {
      mute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mute, submessage_arena);
    }
    set_has_mute();
    message_.mute_ = mute;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.mute)
}
void SignalResponse::set_allocated_speakers_changed(::livekit::SpeakersChanged* speakers_changed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (speakers_changed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::SpeakersChanged>::GetOwningArena(speakers_changed);
    if (message_arena != submessage_arena) {
      speakers_changed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speakers_changed, submessage_arena);
    }
    set_has_speakers_changed();
    message_.speakers_changed_ = speakers_changed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.speakers_changed)
}
void SignalResponse::set_allocated_room_update(::livekit::RoomUpdate* room_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (room_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::RoomUpdate>::GetOwningArena(room_update);
    if (message_arena != submessage_arena) {
      room_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_update, submessage_arena);
    }
    set_has_room_update();
    message_.room_update_ = room_update;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.room_update)
}
void SignalResponse::set_allocated_connection_quality(::livekit::ConnectionQualityUpdate* connection_quality) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (connection_quality) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::ConnectionQualityUpdate>::GetOwningArena(connection_quality);
    if (message_arena != submessage_arena) {
      connection_quality = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_quality, submessage_arena);
    }
    set_has_connection_quality();
    message_.connection_quality_ = connection_quality;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.connection_quality)
}
void SignalResponse::set_allocated_stream_state_update(::livekit::StreamStateUpdate* stream_state_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (stream_state_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::StreamStateUpdate>::GetOwningArena(stream_state_update);
    if (message_arena != submessage_arena) {
      stream_state_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_state_update, submessage_arena);
    }
    set_has_stream_state_update();
    message_.stream_state_update_ = stream_state_update;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.stream_state_update)
}
void SignalResponse::set_allocated_subscribed_quality_update(::livekit::SubscribedQualityUpdate* subscribed_quality_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (subscribed_quality_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::SubscribedQualityUpdate>::GetOwningArena(subscribed_quality_update);
    if (message_arena != submessage_arena) {
      subscribed_quality_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribed_quality_update, submessage_arena);
    }
    set_has_subscribed_quality_update();
    message_.subscribed_quality_update_ = subscribed_quality_update;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.subscribed_quality_update)
}
void SignalResponse::set_allocated_subscription_permission_update(::livekit::SubscriptionPermissionUpdate* subscription_permission_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (subscription_permission_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::SubscriptionPermissionUpdate>::GetOwningArena(subscription_permission_update);
    if (message_arena != submessage_arena) {
      subscription_permission_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscription_permission_update, submessage_arena);
    }
    set_has_subscription_permission_update();
    message_.subscription_permission_update_ = subscription_permission_update;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.subscription_permission_update)
}
void SignalResponse::set_allocated_track_unpublished(::livekit::TrackUnpublishedResponse* track_unpublished) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (track_unpublished) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::livekit::TrackUnpublishedResponse>::GetOwningArena(track_unpublished);
    if (message_arena != submessage_arena) {
      track_unpublished = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_unpublished, submessage_arena);
    }
    set_has_track_unpublished();
    message_.track_unpublished_ = track_unpublished;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.track_unpublished)
}
SignalResponse::SignalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.SignalResponse)
}
SignalResponse::SignalResponse(const SignalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kJoin: {
      _internal_mutable_join()->::livekit::JoinResponse::MergeFrom(from._internal_join());
      break;
    }
    case kAnswer: {
      _internal_mutable_answer()->::livekit::SessionDescription::MergeFrom(from._internal_answer());
      break;
    }
    case kOffer: {
      _internal_mutable_offer()->::livekit::SessionDescription::MergeFrom(from._internal_offer());
      break;
    }
    case kTrickle: {
      _internal_mutable_trickle()->::livekit::TrickleRequest::MergeFrom(from._internal_trickle());
      break;
    }
    case kUpdate: {
      _internal_mutable_update()->::livekit::ParticipantUpdate::MergeFrom(from._internal_update());
      break;
    }
    case kTrackPublished: {
      _internal_mutable_track_published()->::livekit::TrackPublishedResponse::MergeFrom(from._internal_track_published());
      break;
    }
    case kLeave: {
      _internal_mutable_leave()->::livekit::LeaveRequest::MergeFrom(from._internal_leave());
      break;
    }
    case kMute: {
      _internal_mutable_mute()->::livekit::MuteTrackRequest::MergeFrom(from._internal_mute());
      break;
    }
    case kSpeakersChanged: {
      _internal_mutable_speakers_changed()->::livekit::SpeakersChanged::MergeFrom(from._internal_speakers_changed());
      break;
    }
    case kRoomUpdate: {
      _internal_mutable_room_update()->::livekit::RoomUpdate::MergeFrom(from._internal_room_update());
      break;
    }
    case kConnectionQuality: {
      _internal_mutable_connection_quality()->::livekit::ConnectionQualityUpdate::MergeFrom(from._internal_connection_quality());
      break;
    }
    case kStreamStateUpdate: {
      _internal_mutable_stream_state_update()->::livekit::StreamStateUpdate::MergeFrom(from._internal_stream_state_update());
      break;
    }
    case kSubscribedQualityUpdate: {
      _internal_mutable_subscribed_quality_update()->::livekit::SubscribedQualityUpdate::MergeFrom(from._internal_subscribed_quality_update());
      break;
    }
    case kSubscriptionPermissionUpdate: {
      _internal_mutable_subscription_permission_update()->::livekit::SubscriptionPermissionUpdate::MergeFrom(from._internal_subscription_permission_update());
      break;
    }
    case kRefreshToken: {
      _internal_set_refresh_token(from._internal_refresh_token());
      break;
    }
    case kTrackUnpublished: {
      _internal_mutable_track_unpublished()->::livekit::TrackUnpublishedResponse::MergeFrom(from._internal_track_unpublished());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SignalResponse)
}

inline void SignalResponse::SharedCtor() {
clear_has_message();
}

SignalResponse::~SignalResponse() {
  // @@protoc_insertion_point(destructor:livekit.SignalResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SignalResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void SignalResponse::ArenaDtor(void* object) {
  SignalResponse* _this = reinterpret_cast< SignalResponse* >(object);
  (void)_this;
}
void SignalResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignalResponse::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:livekit.SignalResponse)
  switch (message_case()) {
    case kJoin: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.join_;
      }
      break;
    }
    case kAnswer: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.answer_;
      }
      break;
    }
    case kOffer: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.offer_;
      }
      break;
    }
    case kTrickle: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.trickle_;
      }
      break;
    }
    case kUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.update_;
      }
      break;
    }
    case kTrackPublished: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.track_published_;
      }
      break;
    }
    case kLeave: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.leave_;
      }
      break;
    }
    case kMute: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.mute_;
      }
      break;
    }
    case kSpeakersChanged: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.speakers_changed_;
      }
      break;
    }
    case kRoomUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.room_update_;
      }
      break;
    }
    case kConnectionQuality: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.connection_quality_;
      }
      break;
    }
    case kStreamStateUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.stream_state_update_;
      }
      break;
    }
    case kSubscribedQualityUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.subscribed_quality_update_;
      }
      break;
    }
    case kSubscriptionPermissionUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.subscription_permission_update_;
      }
      break;
    }
    case kRefreshToken: {
      message_.refresh_token_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kTrackUnpublished: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.track_unpublished_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void SignalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SignalResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.JoinResponse join = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_join(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SessionDescription answer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_answer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SessionDescription offer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_offer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrickleRequest trickle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_trickle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ParticipantUpdate update = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrackPublishedResponse track_published = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_published(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.LeaveRequest leave = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_leave(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.MuteTrackRequest mute = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_mute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SpeakersChanged speakers_changed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_speakers_changed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.RoomUpdate room_update = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ConnectionQualityUpdate connection_quality = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_quality(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.StreamStateUpdate stream_state_update = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_state_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SubscribedQualityUpdate subscribed_quality_update = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribed_quality_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SubscriptionPermissionUpdate subscription_permission_update = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscription_permission_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string refresh_token = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_refresh_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.SignalResponse.refresh_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrackUnpublishedResponse track_unpublished = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_unpublished(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignalResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SignalResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.JoinResponse join = 1;
  if (_internal_has_join()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::join(this), target, stream);
  }

  // .livekit.SessionDescription answer = 2;
  if (_internal_has_answer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::answer(this), target, stream);
  }

  // .livekit.SessionDescription offer = 3;
  if (_internal_has_offer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::offer(this), target, stream);
  }

  // .livekit.TrickleRequest trickle = 4;
  if (_internal_has_trickle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::trickle(this), target, stream);
  }

  // .livekit.ParticipantUpdate update = 5;
  if (_internal_has_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::update(this), target, stream);
  }

  // .livekit.TrackPublishedResponse track_published = 6;
  if (_internal_has_track_published()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::track_published(this), target, stream);
  }

  // .livekit.LeaveRequest leave = 8;
  if (_internal_has_leave()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::leave(this), target, stream);
  }

  // .livekit.MuteTrackRequest mute = 9;
  if (_internal_has_mute()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::mute(this), target, stream);
  }

  // .livekit.SpeakersChanged speakers_changed = 10;
  if (_internal_has_speakers_changed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::speakers_changed(this), target, stream);
  }

  // .livekit.RoomUpdate room_update = 11;
  if (_internal_has_room_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::room_update(this), target, stream);
  }

  // .livekit.ConnectionQualityUpdate connection_quality = 12;
  if (_internal_has_connection_quality()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::connection_quality(this), target, stream);
  }

  // .livekit.StreamStateUpdate stream_state_update = 13;
  if (_internal_has_stream_state_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::stream_state_update(this), target, stream);
  }

  // .livekit.SubscribedQualityUpdate subscribed_quality_update = 14;
  if (_internal_has_subscribed_quality_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::subscribed_quality_update(this), target, stream);
  }

  // .livekit.SubscriptionPermissionUpdate subscription_permission_update = 15;
  if (_internal_has_subscription_permission_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::subscription_permission_update(this), target, stream);
  }

  // string refresh_token = 16;
  if (_internal_has_refresh_token()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_refresh_token().data(), static_cast<int>(this->_internal_refresh_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SignalResponse.refresh_token");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_refresh_token(), target);
  }

  // .livekit.TrackUnpublishedResponse track_unpublished = 17;
  if (_internal_has_track_unpublished()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::track_unpublished(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SignalResponse)
  return target;
}

size_t SignalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SignalResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .livekit.JoinResponse join = 1;
    case kJoin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.join_);
      break;
    }
    // .livekit.SessionDescription answer = 2;
    case kAnswer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.answer_);
      break;
    }
    // .livekit.SessionDescription offer = 3;
    case kOffer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.offer_);
      break;
    }
    // .livekit.TrickleRequest trickle = 4;
    case kTrickle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.trickle_);
      break;
    }
    // .livekit.ParticipantUpdate update = 5;
    case kUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.update_);
      break;
    }
    // .livekit.TrackPublishedResponse track_published = 6;
    case kTrackPublished: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.track_published_);
      break;
    }
    // .livekit.LeaveRequest leave = 8;
    case kLeave: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.leave_);
      break;
    }
    // .livekit.MuteTrackRequest mute = 9;
    case kMute: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.mute_);
      break;
    }
    // .livekit.SpeakersChanged speakers_changed = 10;
    case kSpeakersChanged: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.speakers_changed_);
      break;
    }
    // .livekit.RoomUpdate room_update = 11;
    case kRoomUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.room_update_);
      break;
    }
    // .livekit.ConnectionQualityUpdate connection_quality = 12;
    case kConnectionQuality: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.connection_quality_);
      break;
    }
    // .livekit.StreamStateUpdate stream_state_update = 13;
    case kStreamStateUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.stream_state_update_);
      break;
    }
    // .livekit.SubscribedQualityUpdate subscribed_quality_update = 14;
    case kSubscribedQualityUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.subscribed_quality_update_);
      break;
    }
    // .livekit.SubscriptionPermissionUpdate subscription_permission_update = 15;
    case kSubscriptionPermissionUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.subscription_permission_update_);
      break;
    }
    // string refresh_token = 16;
    case kRefreshToken: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_refresh_token());
      break;
    }
    // .livekit.TrackUnpublishedResponse track_unpublished = 17;
    case kTrackUnpublished: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.track_unpublished_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignalResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignalResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignalResponse::GetClassData() const { return &_class_data_; }

void SignalResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignalResponse *>(to)->MergeFrom(
      static_cast<const SignalResponse &>(from));
}


void SignalResponse::MergeFrom(const SignalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.SignalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kJoin: {
      _internal_mutable_join()->::livekit::JoinResponse::MergeFrom(from._internal_join());
      break;
    }
    case kAnswer: {
      _internal_mutable_answer()->::livekit::SessionDescription::MergeFrom(from._internal_answer());
      break;
    }
    case kOffer: {
      _internal_mutable_offer()->::livekit::SessionDescription::MergeFrom(from._internal_offer());
      break;
    }
    case kTrickle: {
      _internal_mutable_trickle()->::livekit::TrickleRequest::MergeFrom(from._internal_trickle());
      break;
    }
    case kUpdate: {
      _internal_mutable_update()->::livekit::ParticipantUpdate::MergeFrom(from._internal_update());
      break;
    }
    case kTrackPublished: {
      _internal_mutable_track_published()->::livekit::TrackPublishedResponse::MergeFrom(from._internal_track_published());
      break;
    }
    case kLeave: {
      _internal_mutable_leave()->::livekit::LeaveRequest::MergeFrom(from._internal_leave());
      break;
    }
    case kMute: {
      _internal_mutable_mute()->::livekit::MuteTrackRequest::MergeFrom(from._internal_mute());
      break;
    }
    case kSpeakersChanged: {
      _internal_mutable_speakers_changed()->::livekit::SpeakersChanged::MergeFrom(from._internal_speakers_changed());
      break;
    }
    case kRoomUpdate: {
      _internal_mutable_room_update()->::livekit::RoomUpdate::MergeFrom(from._internal_room_update());
      break;
    }
    case kConnectionQuality: {
      _internal_mutable_connection_quality()->::livekit::ConnectionQualityUpdate::MergeFrom(from._internal_connection_quality());
      break;
    }
    case kStreamStateUpdate: {
      _internal_mutable_stream_state_update()->::livekit::StreamStateUpdate::MergeFrom(from._internal_stream_state_update());
      break;
    }
    case kSubscribedQualityUpdate: {
      _internal_mutable_subscribed_quality_update()->::livekit::SubscribedQualityUpdate::MergeFrom(from._internal_subscribed_quality_update());
      break;
    }
    case kSubscriptionPermissionUpdate: {
      _internal_mutable_subscription_permission_update()->::livekit::SubscriptionPermissionUpdate::MergeFrom(from._internal_subscription_permission_update());
      break;
    }
    case kRefreshToken: {
      _internal_set_refresh_token(from._internal_refresh_token());
      break;
    }
    case kTrackUnpublished: {
      _internal_mutable_track_unpublished()->::livekit::TrackUnpublishedResponse::MergeFrom(from._internal_track_unpublished());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignalResponse::CopyFrom(const SignalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SignalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalResponse::IsInitialized() const {
  return true;
}

void SignalResponse::InternalSwap(SignalResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[1]);
}

// ===================================================================

class SimulcastCodec::_Internal {
 public:
};

SimulcastCodec::SimulcastCodec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.SimulcastCodec)
}
SimulcastCodec::SimulcastCodec(const SimulcastCodec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  codec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codec().empty()) {
    codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_codec(), 
      GetArenaForAllocation());
  }
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cid(), 
      GetArenaForAllocation());
  }
  enable_simulcast_layers_ = from.enable_simulcast_layers_;
  // @@protoc_insertion_point(copy_constructor:livekit.SimulcastCodec)
}

inline void SimulcastCodec::SharedCtor() {
codec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
enable_simulcast_layers_ = false;
}

SimulcastCodec::~SimulcastCodec() {
  // @@protoc_insertion_point(destructor:livekit.SimulcastCodec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimulcastCodec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  codec_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SimulcastCodec::ArenaDtor(void* object) {
  SimulcastCodec* _this = reinterpret_cast< SimulcastCodec* >(object);
  (void)_this;
}
void SimulcastCodec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulcastCodec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimulcastCodec::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SimulcastCodec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  codec_.ClearToEmpty();
  cid_.ClearToEmpty();
  enable_simulcast_layers_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulcastCodec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string codec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_codec();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.SimulcastCodec.codec"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.SimulcastCodec.cid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_simulcast_layers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          enable_simulcast_layers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimulcastCodec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SimulcastCodec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string codec = 1;
  if (!this->_internal_codec().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codec().data(), static_cast<int>(this->_internal_codec().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SimulcastCodec.codec");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_codec(), target);
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SimulcastCodec.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  // bool enable_simulcast_layers = 3;
  if (this->_internal_enable_simulcast_layers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_simulcast_layers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SimulcastCodec)
  return target;
}

size_t SimulcastCodec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SimulcastCodec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string codec = 1;
  if (!this->_internal_codec().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codec());
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // bool enable_simulcast_layers = 3;
  if (this->_internal_enable_simulcast_layers() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimulcastCodec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimulcastCodec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimulcastCodec::GetClassData() const { return &_class_data_; }

void SimulcastCodec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimulcastCodec *>(to)->MergeFrom(
      static_cast<const SimulcastCodec &>(from));
}


void SimulcastCodec::MergeFrom(const SimulcastCodec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.SimulcastCodec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_codec().empty()) {
    _internal_set_codec(from._internal_codec());
  }
  if (!from._internal_cid().empty()) {
    _internal_set_cid(from._internal_cid());
  }
  if (from._internal_enable_simulcast_layers() != 0) {
    _internal_set_enable_simulcast_layers(from._internal_enable_simulcast_layers());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimulcastCodec::CopyFrom(const SimulcastCodec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SimulcastCodec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulcastCodec::IsInitialized() const {
  return true;
}

void SimulcastCodec::InternalSwap(SimulcastCodec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &codec_, lhs_arena,
      &other->codec_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cid_, lhs_arena,
      &other->cid_, rhs_arena
  );
  swap(enable_simulcast_layers_, other->enable_simulcast_layers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulcastCodec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[2]);
}

// ===================================================================

class AddTrackRequest::_Internal {
 public:
};

void AddTrackRequest::clear_layers() {
  layers_.Clear();
}
AddTrackRequest::AddTrackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  layers_(arena),
  simulcast_codecs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.AddTrackRequest)
}
AddTrackRequest::AddTrackRequest(const AddTrackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      layers_(from.layers_),
      simulcast_codecs_(from.simulcast_codecs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cid(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&type_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:livekit.AddTrackRequest)
}

inline void AddTrackRequest::SharedCtor() {
cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&type_)) + sizeof(source_));
}

AddTrackRequest::~AddTrackRequest() {
  // @@protoc_insertion_point(destructor:livekit.AddTrackRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddTrackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddTrackRequest::ArenaDtor(void* object) {
  AddTrackRequest* _this = reinterpret_cast< AddTrackRequest* >(object);
  (void)_this;
}
void AddTrackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddTrackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddTrackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.AddTrackRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layers_.Clear();
  simulcast_codecs_.Clear();
  cid_.ClearToEmpty();
  name_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&type_)) + sizeof(source_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddTrackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.AddTrackRequest.cid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.AddTrackRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrackType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::livekit::TrackType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool muted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disable_dtx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          disable_dtx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrackSource source = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source(static_cast<::livekit::TrackSource>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.VideoLayer layers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.SimulcastCodec simulcast_codecs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_simulcast_codecs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddTrackRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.AddTrackRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cid = 1;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.AddTrackRequest.cid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.AddTrackRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .livekit.TrackType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // uint32 width = 4;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_width(), target);
  }

  // uint32 height = 5;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_height(), target);
  }

  // bool muted = 6;
  if (this->_internal_muted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_muted(), target);
  }

  // bool disable_dtx = 7;
  if (this->_internal_disable_dtx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_disable_dtx(), target);
  }

  // .livekit.TrackSource source = 8;
  if (this->_internal_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_source(), target);
  }

  // repeated .livekit.VideoLayer layers = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_layers(i), target, stream);
  }

  // repeated .livekit.SimulcastCodec simulcast_codecs = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_simulcast_codecs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_simulcast_codecs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.AddTrackRequest)
  return target;
}

size_t AddTrackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.AddTrackRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.VideoLayer layers = 9;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.SimulcastCodec simulcast_codecs = 10;
  total_size += 1UL * this->_internal_simulcast_codecs_size();
  for (const auto& msg : this->simulcast_codecs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cid = 1;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .livekit.TrackType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 width = 4;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 5;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // bool muted = 6;
  if (this->_internal_muted() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_dtx = 7;
  if (this->_internal_disable_dtx() != 0) {
    total_size += 1 + 1;
  }

  // .livekit.TrackSource source = 8;
  if (this->_internal_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddTrackRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddTrackRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddTrackRequest::GetClassData() const { return &_class_data_; }

void AddTrackRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddTrackRequest *>(to)->MergeFrom(
      static_cast<const AddTrackRequest &>(from));
}


void AddTrackRequest::MergeFrom(const AddTrackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.AddTrackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
  simulcast_codecs_.MergeFrom(from.simulcast_codecs_);
  if (!from._internal_cid().empty()) {
    _internal_set_cid(from._internal_cid());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_muted() != 0) {
    _internal_set_muted(from._internal_muted());
  }
  if (from._internal_disable_dtx() != 0) {
    _internal_set_disable_dtx(from._internal_disable_dtx());
  }
  if (from._internal_source() != 0) {
    _internal_set_source(from._internal_source());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddTrackRequest::CopyFrom(const AddTrackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.AddTrackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTrackRequest::IsInitialized() const {
  return true;
}

void AddTrackRequest::InternalSwap(AddTrackRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  layers_.InternalSwap(&other->layers_);
  simulcast_codecs_.InternalSwap(&other->simulcast_codecs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cid_, lhs_arena,
      &other->cid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddTrackRequest, source_)
      + sizeof(AddTrackRequest::source_)
      - PROTOBUF_FIELD_OFFSET(AddTrackRequest, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddTrackRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[3]);
}

// ===================================================================

class TrickleRequest::_Internal {
 public:
};

TrickleRequest::TrickleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.TrickleRequest)
}
TrickleRequest::TrickleRequest(const TrickleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  candidateinit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    candidateinit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_candidateinit().empty()) {
    candidateinit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_candidateinit(), 
      GetArenaForAllocation());
  }
  target_ = from.target_;
  // @@protoc_insertion_point(copy_constructor:livekit.TrickleRequest)
}

inline void TrickleRequest::SharedCtor() {
candidateinit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  candidateinit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
target_ = 0;
}

TrickleRequest::~TrickleRequest() {
  // @@protoc_insertion_point(destructor:livekit.TrickleRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrickleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  candidateinit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrickleRequest::ArenaDtor(void* object) {
  TrickleRequest* _this = reinterpret_cast< TrickleRequest* >(object);
  (void)_this;
}
void TrickleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrickleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrickleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrickleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidateinit_.ClearToEmpty();
  target_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrickleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string candidateInit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_candidateinit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.TrickleRequest.candidateInit"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SignalTarget target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_target(static_cast<::livekit::SignalTarget>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrickleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrickleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string candidateInit = 1;
  if (!this->_internal_candidateinit().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_candidateinit().data(), static_cast<int>(this->_internal_candidateinit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrickleRequest.candidateInit");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_candidateinit(), target);
  }

  // .livekit.SignalTarget target = 2;
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrickleRequest)
  return target;
}

size_t TrickleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.TrickleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string candidateInit = 1;
  if (!this->_internal_candidateinit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_candidateinit());
  }

  // .livekit.SignalTarget target = 2;
  if (this->_internal_target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_target());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrickleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrickleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrickleRequest::GetClassData() const { return &_class_data_; }

void TrickleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrickleRequest *>(to)->MergeFrom(
      static_cast<const TrickleRequest &>(from));
}


void TrickleRequest::MergeFrom(const TrickleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrickleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_candidateinit().empty()) {
    _internal_set_candidateinit(from._internal_candidateinit());
  }
  if (from._internal_target() != 0) {
    _internal_set_target(from._internal_target());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrickleRequest::CopyFrom(const TrickleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrickleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrickleRequest::IsInitialized() const {
  return true;
}

void TrickleRequest::InternalSwap(TrickleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &candidateinit_, lhs_arena,
      &other->candidateinit_, rhs_arena
  );
  swap(target_, other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrickleRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[4]);
}

// ===================================================================

class MuteTrackRequest::_Internal {
 public:
};

MuteTrackRequest::MuteTrackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.MuteTrackRequest)
}
MuteTrackRequest::MuteTrackRequest(const MuteTrackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sid(), 
      GetArenaForAllocation());
  }
  muted_ = from.muted_;
  // @@protoc_insertion_point(copy_constructor:livekit.MuteTrackRequest)
}

inline void MuteTrackRequest::SharedCtor() {
sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
muted_ = false;
}

MuteTrackRequest::~MuteTrackRequest() {
  // @@protoc_insertion_point(destructor:livekit.MuteTrackRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MuteTrackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MuteTrackRequest::ArenaDtor(void* object) {
  MuteTrackRequest* _this = reinterpret_cast< MuteTrackRequest* >(object);
  (void)_this;
}
void MuteTrackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MuteTrackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MuteTrackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.MuteTrackRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sid_.ClearToEmpty();
  muted_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MuteTrackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.MuteTrackRequest.sid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool muted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MuteTrackRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.MuteTrackRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.MuteTrackRequest.sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // bool muted = 2;
  if (this->_internal_muted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_muted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.MuteTrackRequest)
  return target;
}

size_t MuteTrackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.MuteTrackRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  // bool muted = 2;
  if (this->_internal_muted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MuteTrackRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MuteTrackRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MuteTrackRequest::GetClassData() const { return &_class_data_; }

void MuteTrackRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MuteTrackRequest *>(to)->MergeFrom(
      static_cast<const MuteTrackRequest &>(from));
}


void MuteTrackRequest::MergeFrom(const MuteTrackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.MuteTrackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sid().empty()) {
    _internal_set_sid(from._internal_sid());
  }
  if (from._internal_muted() != 0) {
    _internal_set_muted(from._internal_muted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MuteTrackRequest::CopyFrom(const MuteTrackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.MuteTrackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteTrackRequest::IsInitialized() const {
  return true;
}

void MuteTrackRequest::InternalSwap(MuteTrackRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sid_, lhs_arena,
      &other->sid_, rhs_arena
  );
  swap(muted_, other->muted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MuteTrackRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[5]);
}

// ===================================================================

class JoinResponse::_Internal {
 public:
  static const ::livekit::Room& room(const JoinResponse* msg);
  static const ::livekit::ParticipantInfo& participant(const JoinResponse* msg);
  static const ::livekit::ClientConfiguration& client_configuration(const JoinResponse* msg);
};

const ::livekit::Room&
JoinResponse::_Internal::room(const JoinResponse* msg) {
  return *msg->room_;
}
const ::livekit::ParticipantInfo&
JoinResponse::_Internal::participant(const JoinResponse* msg) {
  return *msg->participant_;
}
const ::livekit::ClientConfiguration&
JoinResponse::_Internal::client_configuration(const JoinResponse* msg) {
  return *msg->client_configuration_;
}
void JoinResponse::clear_room() {
  if (GetArenaForAllocation() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
}
void JoinResponse::clear_participant() {
  if (GetArenaForAllocation() == nullptr && participant_ != nullptr) {
    delete participant_;
  }
  participant_ = nullptr;
}
void JoinResponse::clear_other_participants() {
  other_participants_.Clear();
}
void JoinResponse::clear_client_configuration() {
  if (GetArenaForAllocation() == nullptr && client_configuration_ != nullptr) {
    delete client_configuration_;
  }
  client_configuration_ = nullptr;
}
JoinResponse::JoinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  other_participants_(arena),
  ice_servers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.JoinResponse)
}
JoinResponse::JoinResponse(const JoinResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      other_participants_(from.other_participants_),
      ice_servers_(from.ice_servers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    server_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_version().empty()) {
    server_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_version(), 
      GetArenaForAllocation());
  }
  alternative_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    alternative_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alternative_url().empty()) {
    alternative_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alternative_url(), 
      GetArenaForAllocation());
  }
  server_region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    server_region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_region().empty()) {
    server_region_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_region(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_room()) {
    room_ = new ::livekit::Room(*from.room_);
  } else {
    room_ = nullptr;
  }
  if (from._internal_has_participant()) {
    participant_ = new ::livekit::ParticipantInfo(*from.participant_);
  } else {
    participant_ = nullptr;
  }
  if (from._internal_has_client_configuration()) {
    client_configuration_ = new ::livekit::ClientConfiguration(*from.client_configuration_);
  } else {
    client_configuration_ = nullptr;
  }
  subscriber_primary_ = from.subscriber_primary_;
  // @@protoc_insertion_point(copy_constructor:livekit.JoinResponse)
}

inline void JoinResponse::SharedCtor() {
server_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  server_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
alternative_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  alternative_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
server_region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  server_region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&room_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subscriber_primary_) -
    reinterpret_cast<char*>(&room_)) + sizeof(subscriber_primary_));
}

JoinResponse::~JoinResponse() {
  // @@protoc_insertion_point(destructor:livekit.JoinResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JoinResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  server_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alternative_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete room_;
  if (this != internal_default_instance()) delete participant_;
  if (this != internal_default_instance()) delete client_configuration_;
}

void JoinResponse::ArenaDtor(void* object) {
  JoinResponse* _this = reinterpret_cast< JoinResponse* >(object);
  (void)_this;
}
void JoinResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.JoinResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  other_participants_.Clear();
  ice_servers_.Clear();
  server_version_.ClearToEmpty();
  alternative_url_.ClearToEmpty();
  server_region_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
  if (GetArenaForAllocation() == nullptr && participant_ != nullptr) {
    delete participant_;
  }
  participant_ = nullptr;
  if (GetArenaForAllocation() == nullptr && client_configuration_ != nullptr) {
    delete client_configuration_;
  }
  client_configuration_ = nullptr;
  subscriber_primary_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.Room room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ParticipantInfo participant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_participant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.ParticipantInfo other_participants = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_other_participants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string server_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_server_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.JoinResponse.server_version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.ICEServer ice_servers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ice_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool subscriber_primary = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          subscriber_primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string alternative_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_alternative_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.JoinResponse.alternative_url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ClientConfiguration client_configuration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string server_region = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_server_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.JoinResponse.server_region"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.JoinResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.Room room = 1;
  if (this->_internal_has_room()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::room(this), target, stream);
  }

  // .livekit.ParticipantInfo participant = 2;
  if (this->_internal_has_participant()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::participant(this), target, stream);
  }

  // repeated .livekit.ParticipantInfo other_participants = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_other_participants_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_other_participants(i), target, stream);
  }

  // string server_version = 4;
  if (!this->_internal_server_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_version().data(), static_cast<int>(this->_internal_server_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.JoinResponse.server_version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_server_version(), target);
  }

  // repeated .livekit.ICEServer ice_servers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ice_servers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_ice_servers(i), target, stream);
  }

  // bool subscriber_primary = 6;
  if (this->_internal_subscriber_primary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_subscriber_primary(), target);
  }

  // string alternative_url = 7;
  if (!this->_internal_alternative_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alternative_url().data(), static_cast<int>(this->_internal_alternative_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.JoinResponse.alternative_url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_alternative_url(), target);
  }

  // .livekit.ClientConfiguration client_configuration = 8;
  if (this->_internal_has_client_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::client_configuration(this), target, stream);
  }

  // string server_region = 9;
  if (!this->_internal_server_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_region().data(), static_cast<int>(this->_internal_server_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.JoinResponse.server_region");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_server_region(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.JoinResponse)
  return target;
}

size_t JoinResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.JoinResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.ParticipantInfo other_participants = 3;
  total_size += 1UL * this->_internal_other_participants_size();
  for (const auto& msg : this->other_participants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.ICEServer ice_servers = 5;
  total_size += 1UL * this->_internal_ice_servers_size();
  for (const auto& msg : this->ice_servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string server_version = 4;
  if (!this->_internal_server_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_version());
  }

  // string alternative_url = 7;
  if (!this->_internal_alternative_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alternative_url());
  }

  // string server_region = 9;
  if (!this->_internal_server_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_region());
  }

  // .livekit.Room room = 1;
  if (this->_internal_has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *room_);
  }

  // .livekit.ParticipantInfo participant = 2;
  if (this->_internal_has_participant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *participant_);
  }

  // .livekit.ClientConfiguration client_configuration = 8;
  if (this->_internal_has_client_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_configuration_);
  }

  // bool subscriber_primary = 6;
  if (this->_internal_subscriber_primary() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JoinResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinResponse::GetClassData() const { return &_class_data_; }

void JoinResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JoinResponse *>(to)->MergeFrom(
      static_cast<const JoinResponse &>(from));
}


void JoinResponse::MergeFrom(const JoinResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.JoinResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  other_participants_.MergeFrom(from.other_participants_);
  ice_servers_.MergeFrom(from.ice_servers_);
  if (!from._internal_server_version().empty()) {
    _internal_set_server_version(from._internal_server_version());
  }
  if (!from._internal_alternative_url().empty()) {
    _internal_set_alternative_url(from._internal_alternative_url());
  }
  if (!from._internal_server_region().empty()) {
    _internal_set_server_region(from._internal_server_region());
  }
  if (from._internal_has_room()) {
    _internal_mutable_room()->::livekit::Room::MergeFrom(from._internal_room());
  }
  if (from._internal_has_participant()) {
    _internal_mutable_participant()->::livekit::ParticipantInfo::MergeFrom(from._internal_participant());
  }
  if (from._internal_has_client_configuration()) {
    _internal_mutable_client_configuration()->::livekit::ClientConfiguration::MergeFrom(from._internal_client_configuration());
  }
  if (from._internal_subscriber_primary() != 0) {
    _internal_set_subscriber_primary(from._internal_subscriber_primary());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinResponse::CopyFrom(const JoinResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.JoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinResponse::IsInitialized() const {
  return true;
}

void JoinResponse::InternalSwap(JoinResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  other_participants_.InternalSwap(&other->other_participants_);
  ice_servers_.InternalSwap(&other->ice_servers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &server_version_, lhs_arena,
      &other->server_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alternative_url_, lhs_arena,
      &other->alternative_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &server_region_, lhs_arena,
      &other->server_region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinResponse, subscriber_primary_)
      + sizeof(JoinResponse::subscriber_primary_)
      - PROTOBUF_FIELD_OFFSET(JoinResponse, room_)>(
          reinterpret_cast<char*>(&room_),
          reinterpret_cast<char*>(&other->room_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[6]);
}

// ===================================================================

class TrackPublishedResponse::_Internal {
 public:
  static const ::livekit::TrackInfo& track(const TrackPublishedResponse* msg);
};

const ::livekit::TrackInfo&
TrackPublishedResponse::_Internal::track(const TrackPublishedResponse* msg) {
  return *msg->track_;
}
void TrackPublishedResponse::clear_track() {
  if (GetArenaForAllocation() == nullptr && track_ != nullptr) {
    delete track_;
  }
  track_ = nullptr;
}
TrackPublishedResponse::TrackPublishedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.TrackPublishedResponse)
}
TrackPublishedResponse::TrackPublishedResponse(const TrackPublishedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_track()) {
    track_ = new ::livekit::TrackInfo(*from.track_);
  } else {
    track_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:livekit.TrackPublishedResponse)
}

inline void TrackPublishedResponse::SharedCtor() {
cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
track_ = nullptr;
}

TrackPublishedResponse::~TrackPublishedResponse() {
  // @@protoc_insertion_point(destructor:livekit.TrackPublishedResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrackPublishedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete track_;
}

void TrackPublishedResponse::ArenaDtor(void* object) {
  TrackPublishedResponse* _this = reinterpret_cast< TrackPublishedResponse* >(object);
  (void)_this;
}
void TrackPublishedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackPublishedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackPublishedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrackPublishedResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && track_ != nullptr) {
    delete track_;
  }
  track_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackPublishedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.TrackPublishedResponse.cid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrackInfo track = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackPublishedResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrackPublishedResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cid = 1;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackPublishedResponse.cid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cid(), target);
  }

  // .livekit.TrackInfo track = 2;
  if (this->_internal_has_track()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::track(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrackPublishedResponse)
  return target;
}

size_t TrackPublishedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.TrackPublishedResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cid = 1;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // .livekit.TrackInfo track = 2;
  if (this->_internal_has_track()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *track_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackPublishedResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrackPublishedResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackPublishedResponse::GetClassData() const { return &_class_data_; }

void TrackPublishedResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrackPublishedResponse *>(to)->MergeFrom(
      static_cast<const TrackPublishedResponse &>(from));
}


void TrackPublishedResponse::MergeFrom(const TrackPublishedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrackPublishedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cid().empty()) {
    _internal_set_cid(from._internal_cid());
  }
  if (from._internal_has_track()) {
    _internal_mutable_track()->::livekit::TrackInfo::MergeFrom(from._internal_track());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackPublishedResponse::CopyFrom(const TrackPublishedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrackPublishedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackPublishedResponse::IsInitialized() const {
  return true;
}

void TrackPublishedResponse::InternalSwap(TrackPublishedResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cid_, lhs_arena,
      &other->cid_, rhs_arena
  );
  swap(track_, other->track_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackPublishedResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[7]);
}

// ===================================================================

class TrackUnpublishedResponse::_Internal {
 public:
};

TrackUnpublishedResponse::TrackUnpublishedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.TrackUnpublishedResponse)
}
TrackUnpublishedResponse::TrackUnpublishedResponse(const TrackUnpublishedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  track_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    track_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_track_sid().empty()) {
    track_sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_track_sid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.TrackUnpublishedResponse)
}

inline void TrackUnpublishedResponse::SharedCtor() {
track_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  track_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackUnpublishedResponse::~TrackUnpublishedResponse() {
  // @@protoc_insertion_point(destructor:livekit.TrackUnpublishedResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrackUnpublishedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  track_sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrackUnpublishedResponse::ArenaDtor(void* object) {
  TrackUnpublishedResponse* _this = reinterpret_cast< TrackUnpublishedResponse* >(object);
  (void)_this;
}
void TrackUnpublishedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackUnpublishedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackUnpublishedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrackUnpublishedResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  track_sid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackUnpublishedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string track_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.TrackUnpublishedResponse.track_sid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackUnpublishedResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrackUnpublishedResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackUnpublishedResponse.track_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_track_sid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrackUnpublishedResponse)
  return target;
}

size_t TrackUnpublishedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.TrackUnpublishedResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackUnpublishedResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrackUnpublishedResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackUnpublishedResponse::GetClassData() const { return &_class_data_; }

void TrackUnpublishedResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrackUnpublishedResponse *>(to)->MergeFrom(
      static_cast<const TrackUnpublishedResponse &>(from));
}


void TrackUnpublishedResponse::MergeFrom(const TrackUnpublishedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrackUnpublishedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_track_sid().empty()) {
    _internal_set_track_sid(from._internal_track_sid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackUnpublishedResponse::CopyFrom(const TrackUnpublishedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrackUnpublishedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackUnpublishedResponse::IsInitialized() const {
  return true;
}

void TrackUnpublishedResponse::InternalSwap(TrackUnpublishedResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &track_sid_, lhs_arena,
      &other->track_sid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackUnpublishedResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[8]);
}

// ===================================================================

class SessionDescription::_Internal {
 public:
};

SessionDescription::SessionDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.SessionDescription)
}
SessionDescription::SessionDescription(const SessionDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  sdp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sdp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdp().empty()) {
    sdp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sdp(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SessionDescription)
}

inline void SessionDescription::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sdp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sdp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionDescription::~SessionDescription() {
  // @@protoc_insertion_point(destructor:livekit.SessionDescription)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionDescription::ArenaDtor(void* object) {
  SessionDescription* _this = reinterpret_cast< SessionDescription* >(object);
  (void)_this;
}
void SessionDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SessionDescription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  sdp_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.SessionDescription.type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sdp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sdp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.SessionDescription.sdp"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionDescription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SessionDescription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SessionDescription.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string sdp = 2;
  if (!this->_internal_sdp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdp().data(), static_cast<int>(this->_internal_sdp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SessionDescription.sdp");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sdp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SessionDescription)
  return target;
}

size_t SessionDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SessionDescription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string sdp = 2;
  if (!this->_internal_sdp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionDescription::GetClassData() const { return &_class_data_; }

void SessionDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionDescription *>(to)->MergeFrom(
      static_cast<const SessionDescription &>(from));
}


void SessionDescription::MergeFrom(const SessionDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.SessionDescription)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_sdp().empty()) {
    _internal_set_sdp(from._internal_sdp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionDescription::CopyFrom(const SessionDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SessionDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionDescription::IsInitialized() const {
  return true;
}

void SessionDescription::InternalSwap(SessionDescription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sdp_, lhs_arena,
      &other->sdp_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionDescription::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[9]);
}

// ===================================================================

class ParticipantUpdate::_Internal {
 public:
};

void ParticipantUpdate::clear_participants() {
  participants_.Clear();
}
ParticipantUpdate::ParticipantUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  participants_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.ParticipantUpdate)
}
ParticipantUpdate::ParticipantUpdate(const ParticipantUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      participants_(from.participants_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.ParticipantUpdate)
}

inline void ParticipantUpdate::SharedCtor() {
}

ParticipantUpdate::~ParticipantUpdate() {
  // @@protoc_insertion_point(destructor:livekit.ParticipantUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParticipantUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParticipantUpdate::ArenaDtor(void* object) {
  ParticipantUpdate* _this = reinterpret_cast< ParticipantUpdate* >(object);
  (void)_this;
}
void ParticipantUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParticipantUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParticipantUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ParticipantUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  participants_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.ParticipantInfo participants = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_participants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ParticipantUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.ParticipantInfo participants = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_participants_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_participants(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ParticipantUpdate)
  return target;
}

size_t ParticipantUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ParticipantUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.ParticipantInfo participants = 1;
  total_size += 1UL * this->_internal_participants_size();
  for (const auto& msg : this->participants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParticipantUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantUpdate::GetClassData() const { return &_class_data_; }

void ParticipantUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ParticipantUpdate *>(to)->MergeFrom(
      static_cast<const ParticipantUpdate &>(from));
}


void ParticipantUpdate::MergeFrom(const ParticipantUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.ParticipantUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  participants_.MergeFrom(from.participants_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantUpdate::CopyFrom(const ParticipantUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ParticipantUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantUpdate::IsInitialized() const {
  return true;
}

void ParticipantUpdate::InternalSwap(ParticipantUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  participants_.InternalSwap(&other->participants_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[10]);
}

// ===================================================================

class UpdateSubscription::_Internal {
 public:
};

void UpdateSubscription::clear_participant_tracks() {
  participant_tracks_.Clear();
}
UpdateSubscription::UpdateSubscription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  track_sids_(arena),
  participant_tracks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateSubscription)
}
UpdateSubscription::UpdateSubscription(const UpdateSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      track_sids_(from.track_sids_),
      participant_tracks_(from.participant_tracks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subscribe_ = from.subscribe_;
  // @@protoc_insertion_point(copy_constructor:livekit.UpdateSubscription)
}

inline void UpdateSubscription::SharedCtor() {
subscribe_ = false;
}

UpdateSubscription::~UpdateSubscription() {
  // @@protoc_insertion_point(destructor:livekit.UpdateSubscription)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateSubscription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UpdateSubscription::ArenaDtor(void* object) {
  UpdateSubscription* _this = reinterpret_cast< UpdateSubscription* >(object);
  (void)_this;
}
void UpdateSubscription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateSubscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateSubscription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  track_sids_.Clear();
  participant_tracks_.Clear();
  subscribe_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateSubscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string track_sids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_track_sids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.UpdateSubscription.track_sids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool subscribe = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          subscribe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.ParticipantTracks participant_tracks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_participant_tracks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateSubscription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateSubscription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string track_sids = 1;
  for (int i = 0, n = this->_internal_track_sids_size(); i < n; i++) {
    const auto& s = this->_internal_track_sids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateSubscription.track_sids");
    target = stream->WriteString(1, s, target);
  }

  // bool subscribe = 2;
  if (this->_internal_subscribe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_subscribe(), target);
  }

  // repeated .livekit.ParticipantTracks participant_tracks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_participant_tracks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_participant_tracks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateSubscription)
  return target;
}

size_t UpdateSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.UpdateSubscription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string track_sids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(track_sids_.size());
  for (int i = 0, n = track_sids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      track_sids_.Get(i));
  }

  // repeated .livekit.ParticipantTracks participant_tracks = 3;
  total_size += 1UL * this->_internal_participant_tracks_size();
  for (const auto& msg : this->participant_tracks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool subscribe = 2;
  if (this->_internal_subscribe() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateSubscription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateSubscription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateSubscription::GetClassData() const { return &_class_data_; }

void UpdateSubscription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateSubscription *>(to)->MergeFrom(
      static_cast<const UpdateSubscription &>(from));
}


void UpdateSubscription::MergeFrom(const UpdateSubscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  track_sids_.MergeFrom(from.track_sids_);
  participant_tracks_.MergeFrom(from.participant_tracks_);
  if (from._internal_subscribe() != 0) {
    _internal_set_subscribe(from._internal_subscribe());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateSubscription::CopyFrom(const UpdateSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSubscription::IsInitialized() const {
  return true;
}

void UpdateSubscription::InternalSwap(UpdateSubscription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  track_sids_.InternalSwap(&other->track_sids_);
  participant_tracks_.InternalSwap(&other->participant_tracks_);
  swap(subscribe_, other->subscribe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSubscription::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[11]);
}

// ===================================================================

class UpdateTrackSettings::_Internal {
 public:
};

UpdateTrackSettings::UpdateTrackSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  track_sids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateTrackSettings)
}
UpdateTrackSettings::UpdateTrackSettings(const UpdateTrackSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      track_sids_(from.track_sids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&disabled_, &from.disabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&disabled_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:livekit.UpdateTrackSettings)
}

inline void UpdateTrackSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&disabled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&disabled_)) + sizeof(height_));
}

UpdateTrackSettings::~UpdateTrackSettings() {
  // @@protoc_insertion_point(destructor:livekit.UpdateTrackSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateTrackSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UpdateTrackSettings::ArenaDtor(void* object) {
  UpdateTrackSettings* _this = reinterpret_cast< UpdateTrackSettings* >(object);
  (void)_this;
}
void UpdateTrackSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateTrackSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateTrackSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateTrackSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  track_sids_.Clear();
  ::memset(&disabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&disabled_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateTrackSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string track_sids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_track_sids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.UpdateTrackSettings.track_sids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool disabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.VideoQuality quality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_quality(static_cast<::livekit::VideoQuality>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateTrackSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateTrackSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string track_sids = 1;
  for (int i = 0, n = this->_internal_track_sids_size(); i < n; i++) {
    const auto& s = this->_internal_track_sids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateTrackSettings.track_sids");
    target = stream->WriteString(1, s, target);
  }

  // bool disabled = 3;
  if (this->_internal_disabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_disabled(), target);
  }

  // .livekit.VideoQuality quality = 4;
  if (this->_internal_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_quality(), target);
  }

  // uint32 width = 5;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_width(), target);
  }

  // uint32 height = 6;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateTrackSettings)
  return target;
}

size_t UpdateTrackSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.UpdateTrackSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string track_sids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(track_sids_.size());
  for (int i = 0, n = track_sids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      track_sids_.Get(i));
  }

  // bool disabled = 3;
  if (this->_internal_disabled() != 0) {
    total_size += 1 + 1;
  }

  // .livekit.VideoQuality quality = 4;
  if (this->_internal_quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_quality());
  }

  // uint32 width = 5;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 6;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateTrackSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateTrackSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateTrackSettings::GetClassData() const { return &_class_data_; }

void UpdateTrackSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateTrackSettings *>(to)->MergeFrom(
      static_cast<const UpdateTrackSettings &>(from));
}


void UpdateTrackSettings::MergeFrom(const UpdateTrackSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateTrackSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  track_sids_.MergeFrom(from.track_sids_);
  if (from._internal_disabled() != 0) {
    _internal_set_disabled(from._internal_disabled());
  }
  if (from._internal_quality() != 0) {
    _internal_set_quality(from._internal_quality());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateTrackSettings::CopyFrom(const UpdateTrackSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateTrackSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTrackSettings::IsInitialized() const {
  return true;
}

void UpdateTrackSettings::InternalSwap(UpdateTrackSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  track_sids_.InternalSwap(&other->track_sids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, height_)
      + sizeof(UpdateTrackSettings::height_)
      - PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, disabled_)>(
          reinterpret_cast<char*>(&disabled_),
          reinterpret_cast<char*>(&other->disabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateTrackSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[12]);
}

// ===================================================================

class LeaveRequest::_Internal {
 public:
};

LeaveRequest::LeaveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.LeaveRequest)
}
LeaveRequest::LeaveRequest(const LeaveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  can_reconnect_ = from.can_reconnect_;
  // @@protoc_insertion_point(copy_constructor:livekit.LeaveRequest)
}

inline void LeaveRequest::SharedCtor() {
can_reconnect_ = false;
}

LeaveRequest::~LeaveRequest() {
  // @@protoc_insertion_point(destructor:livekit.LeaveRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LeaveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LeaveRequest::ArenaDtor(void* object) {
  LeaveRequest* _this = reinterpret_cast< LeaveRequest* >(object);
  (void)_this;
}
void LeaveRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LeaveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.LeaveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  can_reconnect_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool can_reconnect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          can_reconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.LeaveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool can_reconnect = 1;
  if (this->_internal_can_reconnect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_can_reconnect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.LeaveRequest)
  return target;
}

size_t LeaveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.LeaveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool can_reconnect = 1;
  if (this->_internal_can_reconnect() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LeaveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaveRequest::GetClassData() const { return &_class_data_; }

void LeaveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LeaveRequest *>(to)->MergeFrom(
      static_cast<const LeaveRequest &>(from));
}


void LeaveRequest::MergeFrom(const LeaveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.LeaveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_can_reconnect() != 0) {
    _internal_set_can_reconnect(from._internal_can_reconnect());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaveRequest::CopyFrom(const LeaveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.LeaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveRequest::IsInitialized() const {
  return true;
}

void LeaveRequest::InternalSwap(LeaveRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(can_reconnect_, other->can_reconnect_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[13]);
}

// ===================================================================

class UpdateVideoLayers::_Internal {
 public:
};

void UpdateVideoLayers::clear_layers() {
  layers_.Clear();
}
UpdateVideoLayers::UpdateVideoLayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  layers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateVideoLayers)
}
UpdateVideoLayers::UpdateVideoLayers(const UpdateVideoLayers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      layers_(from.layers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  track_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    track_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_track_sid().empty()) {
    track_sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_track_sid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.UpdateVideoLayers)
}

inline void UpdateVideoLayers::SharedCtor() {
track_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  track_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateVideoLayers::~UpdateVideoLayers() {
  // @@protoc_insertion_point(destructor:livekit.UpdateVideoLayers)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateVideoLayers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  track_sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateVideoLayers::ArenaDtor(void* object) {
  UpdateVideoLayers* _this = reinterpret_cast< UpdateVideoLayers* >(object);
  (void)_this;
}
void UpdateVideoLayers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateVideoLayers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateVideoLayers::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateVideoLayers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layers_.Clear();
  track_sid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateVideoLayers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string track_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.UpdateVideoLayers.track_sid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.VideoLayer layers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateVideoLayers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateVideoLayers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateVideoLayers.track_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_track_sid(), target);
  }

  // repeated .livekit.VideoLayer layers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_layers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateVideoLayers)
  return target;
}

size_t UpdateVideoLayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.UpdateVideoLayers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.VideoLayer layers = 2;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateVideoLayers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateVideoLayers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateVideoLayers::GetClassData() const { return &_class_data_; }

void UpdateVideoLayers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateVideoLayers *>(to)->MergeFrom(
      static_cast<const UpdateVideoLayers &>(from));
}


void UpdateVideoLayers::MergeFrom(const UpdateVideoLayers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateVideoLayers)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
  if (!from._internal_track_sid().empty()) {
    _internal_set_track_sid(from._internal_track_sid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateVideoLayers::CopyFrom(const UpdateVideoLayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateVideoLayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVideoLayers::IsInitialized() const {
  return true;
}

void UpdateVideoLayers::InternalSwap(UpdateVideoLayers* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  layers_.InternalSwap(&other->layers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &track_sid_, lhs_arena,
      &other->track_sid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateVideoLayers::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[14]);
}

// ===================================================================

class ICEServer::_Internal {
 public:
};

ICEServer::ICEServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  urls_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.ICEServer)
}
ICEServer::ICEServer(const ICEServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      urls_(from.urls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  credential_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    credential_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_credential().empty()) {
    credential_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_credential(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.ICEServer)
}

inline void ICEServer::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
credential_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  credential_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ICEServer::~ICEServer() {
  // @@protoc_insertion_point(destructor:livekit.ICEServer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ICEServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  credential_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ICEServer::ArenaDtor(void* object) {
  ICEServer* _this = reinterpret_cast< ICEServer* >(object);
  (void)_this;
}
void ICEServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ICEServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ICEServer::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ICEServer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  username_.ClearToEmpty();
  credential_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ICEServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string urls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_urls();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.ICEServer.urls"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.ICEServer.username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string credential = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_credential();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.ICEServer.credential"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ICEServer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ICEServer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this->_internal_urls_size(); i < n; i++) {
    const auto& s = this->_internal_urls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ICEServer.urls");
    target = stream->WriteString(1, s, target);
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ICEServer.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string credential = 3;
  if (!this->_internal_credential().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_credential().data(), static_cast<int>(this->_internal_credential().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ICEServer.credential");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_credential(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ICEServer)
  return target;
}

size_t ICEServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ICEServer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string urls = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(urls_.size());
  for (int i = 0, n = urls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      urls_.Get(i));
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string credential = 3;
  if (!this->_internal_credential().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_credential());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ICEServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ICEServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ICEServer::GetClassData() const { return &_class_data_; }

void ICEServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ICEServer *>(to)->MergeFrom(
      static_cast<const ICEServer &>(from));
}


void ICEServer::MergeFrom(const ICEServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.ICEServer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_credential().empty()) {
    _internal_set_credential(from._internal_credential());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ICEServer::CopyFrom(const ICEServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ICEServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ICEServer::IsInitialized() const {
  return true;
}

void ICEServer::InternalSwap(ICEServer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  urls_.InternalSwap(&other->urls_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &credential_, lhs_arena,
      &other->credential_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ICEServer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[15]);
}

// ===================================================================

class SpeakersChanged::_Internal {
 public:
};

void SpeakersChanged::clear_speakers() {
  speakers_.Clear();
}
SpeakersChanged::SpeakersChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  speakers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.SpeakersChanged)
}
SpeakersChanged::SpeakersChanged(const SpeakersChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      speakers_(from.speakers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.SpeakersChanged)
}

inline void SpeakersChanged::SharedCtor() {
}

SpeakersChanged::~SpeakersChanged() {
  // @@protoc_insertion_point(destructor:livekit.SpeakersChanged)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpeakersChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpeakersChanged::ArenaDtor(void* object) {
  SpeakersChanged* _this = reinterpret_cast< SpeakersChanged* >(object);
  (void)_this;
}
void SpeakersChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeakersChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeakersChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SpeakersChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speakers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeakersChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.SpeakerInfo speakers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speakers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeakersChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SpeakersChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.SpeakerInfo speakers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_speakers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_speakers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SpeakersChanged)
  return target;
}

size_t SpeakersChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SpeakersChanged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.SpeakerInfo speakers = 1;
  total_size += 1UL * this->_internal_speakers_size();
  for (const auto& msg : this->speakers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeakersChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeakersChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeakersChanged::GetClassData() const { return &_class_data_; }

void SpeakersChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeakersChanged *>(to)->MergeFrom(
      static_cast<const SpeakersChanged &>(from));
}


void SpeakersChanged::MergeFrom(const SpeakersChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.SpeakersChanged)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  speakers_.MergeFrom(from.speakers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeakersChanged::CopyFrom(const SpeakersChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SpeakersChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeakersChanged::IsInitialized() const {
  return true;
}

void SpeakersChanged::InternalSwap(SpeakersChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  speakers_.InternalSwap(&other->speakers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeakersChanged::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[16]);
}

// ===================================================================

class RoomUpdate::_Internal {
 public:
  static const ::livekit::Room& room(const RoomUpdate* msg);
};

const ::livekit::Room&
RoomUpdate::_Internal::room(const RoomUpdate* msg) {
  return *msg->room_;
}
void RoomUpdate::clear_room() {
  if (GetArenaForAllocation() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
}
RoomUpdate::RoomUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.RoomUpdate)
}
RoomUpdate::RoomUpdate(const RoomUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_room()) {
    room_ = new ::livekit::Room(*from.room_);
  } else {
    room_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:livekit.RoomUpdate)
}

inline void RoomUpdate::SharedCtor() {
room_ = nullptr;
}

RoomUpdate::~RoomUpdate() {
  // @@protoc_insertion_point(destructor:livekit.RoomUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoomUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete room_;
}

void RoomUpdate::ArenaDtor(void* object) {
  RoomUpdate* _this = reinterpret_cast< RoomUpdate* >(object);
  (void)_this;
}
void RoomUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoomUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RoomUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.Room room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RoomUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.Room room = 1;
  if (this->_internal_has_room()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::room(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RoomUpdate)
  return target;
}

size_t RoomUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RoomUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.Room room = 1;
  if (this->_internal_has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *room_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoomUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomUpdate::GetClassData() const { return &_class_data_; }

void RoomUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoomUpdate *>(to)->MergeFrom(
      static_cast<const RoomUpdate &>(from));
}


void RoomUpdate::MergeFrom(const RoomUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.RoomUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_room()) {
    _internal_mutable_room()->::livekit::Room::MergeFrom(from._internal_room());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomUpdate::CopyFrom(const RoomUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RoomUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomUpdate::IsInitialized() const {
  return true;
}

void RoomUpdate::InternalSwap(RoomUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(room_, other->room_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[17]);
}

// ===================================================================

class ConnectionQualityInfo::_Internal {
 public:
};

ConnectionQualityInfo::ConnectionQualityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.ConnectionQualityInfo)
}
ConnectionQualityInfo::ConnectionQualityInfo(const ConnectionQualityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  participant_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    participant_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_sid().empty()) {
    participant_sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_participant_sid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&quality_, &from.quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&quality_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:livekit.ConnectionQualityInfo)
}

inline void ConnectionQualityInfo::SharedCtor() {
participant_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  participant_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quality_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&quality_)) + sizeof(score_));
}

ConnectionQualityInfo::~ConnectionQualityInfo() {
  // @@protoc_insertion_point(destructor:livekit.ConnectionQualityInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConnectionQualityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  participant_sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnectionQualityInfo::ArenaDtor(void* object) {
  ConnectionQualityInfo* _this = reinterpret_cast< ConnectionQualityInfo* >(object);
  (void)_this;
}
void ConnectionQualityInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectionQualityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConnectionQualityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ConnectionQualityInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  participant_sid_.ClearToEmpty();
  ::memset(&quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&quality_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionQualityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string participant_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.ConnectionQualityInfo.participant_sid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ConnectionQuality quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_quality(static_cast<::livekit::ConnectionQuality>(val));
        } else
          goto handle_unusual;
        continue;
      // float score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionQualityInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ConnectionQualityInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_sid().data(), static_cast<int>(this->_internal_participant_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ConnectionQualityInfo.participant_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_sid(), target);
  }

  // .livekit.ConnectionQuality quality = 2;
  if (this->_internal_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_quality(), target);
  }

  // float score = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ConnectionQualityInfo)
  return target;
}

size_t ConnectionQualityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ConnectionQualityInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_sid());
  }

  // .livekit.ConnectionQuality quality = 2;
  if (this->_internal_quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_quality());
  }

  // float score = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionQualityInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConnectionQualityInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionQualityInfo::GetClassData() const { return &_class_data_; }

void ConnectionQualityInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConnectionQualityInfo *>(to)->MergeFrom(
      static_cast<const ConnectionQualityInfo &>(from));
}


void ConnectionQualityInfo::MergeFrom(const ConnectionQualityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.ConnectionQualityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_participant_sid().empty()) {
    _internal_set_participant_sid(from._internal_participant_sid());
  }
  if (from._internal_quality() != 0) {
    _internal_set_quality(from._internal_quality());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = from._internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _internal_set_score(from._internal_score());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionQualityInfo::CopyFrom(const ConnectionQualityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ConnectionQualityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionQualityInfo::IsInitialized() const {
  return true;
}

void ConnectionQualityInfo::InternalSwap(ConnectionQualityInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &participant_sid_, lhs_arena,
      &other->participant_sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectionQualityInfo, score_)
      + sizeof(ConnectionQualityInfo::score_)
      - PROTOBUF_FIELD_OFFSET(ConnectionQualityInfo, quality_)>(
          reinterpret_cast<char*>(&quality_),
          reinterpret_cast<char*>(&other->quality_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionQualityInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[18]);
}

// ===================================================================

class ConnectionQualityUpdate::_Internal {
 public:
};

ConnectionQualityUpdate::ConnectionQualityUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  updates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.ConnectionQualityUpdate)
}
ConnectionQualityUpdate::ConnectionQualityUpdate(const ConnectionQualityUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.ConnectionQualityUpdate)
}

inline void ConnectionQualityUpdate::SharedCtor() {
}

ConnectionQualityUpdate::~ConnectionQualityUpdate() {
  // @@protoc_insertion_point(destructor:livekit.ConnectionQualityUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConnectionQualityUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConnectionQualityUpdate::ArenaDtor(void* object) {
  ConnectionQualityUpdate* _this = reinterpret_cast< ConnectionQualityUpdate* >(object);
  (void)_this;
}
void ConnectionQualityUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectionQualityUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConnectionQualityUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ConnectionQualityUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionQualityUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.ConnectionQualityInfo updates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionQualityUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ConnectionQualityUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.ConnectionQualityInfo updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_updates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ConnectionQualityUpdate)
  return target;
}

size_t ConnectionQualityUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ConnectionQualityUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.ConnectionQualityInfo updates = 1;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionQualityUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConnectionQualityUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionQualityUpdate::GetClassData() const { return &_class_data_; }

void ConnectionQualityUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConnectionQualityUpdate *>(to)->MergeFrom(
      static_cast<const ConnectionQualityUpdate &>(from));
}


void ConnectionQualityUpdate::MergeFrom(const ConnectionQualityUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.ConnectionQualityUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionQualityUpdate::CopyFrom(const ConnectionQualityUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ConnectionQualityUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionQualityUpdate::IsInitialized() const {
  return true;
}

void ConnectionQualityUpdate::InternalSwap(ConnectionQualityUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  updates_.InternalSwap(&other->updates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionQualityUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[19]);
}

// ===================================================================

class StreamStateInfo::_Internal {
 public:
};

StreamStateInfo::StreamStateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.StreamStateInfo)
}
StreamStateInfo::StreamStateInfo(const StreamStateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  participant_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    participant_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_sid().empty()) {
    participant_sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_participant_sid(), 
      GetArenaForAllocation());
  }
  track_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    track_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_track_sid().empty()) {
    track_sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_track_sid(), 
      GetArenaForAllocation());
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:livekit.StreamStateInfo)
}

inline void StreamStateInfo::SharedCtor() {
participant_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  participant_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
track_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  track_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
state_ = 0;
}

StreamStateInfo::~StreamStateInfo() {
  // @@protoc_insertion_point(destructor:livekit.StreamStateInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamStateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  participant_sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  track_sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamStateInfo::ArenaDtor(void* object) {
  StreamStateInfo* _this = reinterpret_cast< StreamStateInfo* >(object);
  (void)_this;
}
void StreamStateInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamStateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.StreamStateInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  participant_sid_.ClearToEmpty();
  track_sid_.ClearToEmpty();
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamStateInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string participant_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.StreamStateInfo.participant_sid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string track_sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.StreamStateInfo.track_sid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.StreamState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::livekit::StreamState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamStateInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.StreamStateInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_sid().data(), static_cast<int>(this->_internal_participant_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.StreamStateInfo.participant_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_sid(), target);
  }

  // string track_sid = 2;
  if (!this->_internal_track_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.StreamStateInfo.track_sid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_track_sid(), target);
  }

  // .livekit.StreamState state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.StreamStateInfo)
  return target;
}

size_t StreamStateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.StreamStateInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_sid());
  }

  // string track_sid = 2;
  if (!this->_internal_track_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  // .livekit.StreamState state = 3;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamStateInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamStateInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamStateInfo::GetClassData() const { return &_class_data_; }

void StreamStateInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamStateInfo *>(to)->MergeFrom(
      static_cast<const StreamStateInfo &>(from));
}


void StreamStateInfo::MergeFrom(const StreamStateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.StreamStateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_participant_sid().empty()) {
    _internal_set_participant_sid(from._internal_participant_sid());
  }
  if (!from._internal_track_sid().empty()) {
    _internal_set_track_sid(from._internal_track_sid());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamStateInfo::CopyFrom(const StreamStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.StreamStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStateInfo::IsInitialized() const {
  return true;
}

void StreamStateInfo::InternalSwap(StreamStateInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &participant_sid_, lhs_arena,
      &other->participant_sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &track_sid_, lhs_arena,
      &other->track_sid_, rhs_arena
  );
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamStateInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[20]);
}

// ===================================================================

class StreamStateUpdate::_Internal {
 public:
};

StreamStateUpdate::StreamStateUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stream_states_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.StreamStateUpdate)
}
StreamStateUpdate::StreamStateUpdate(const StreamStateUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stream_states_(from.stream_states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.StreamStateUpdate)
}

inline void StreamStateUpdate::SharedCtor() {
}

StreamStateUpdate::~StreamStateUpdate() {
  // @@protoc_insertion_point(destructor:livekit.StreamStateUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamStateUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamStateUpdate::ArenaDtor(void* object) {
  StreamStateUpdate* _this = reinterpret_cast< StreamStateUpdate* >(object);
  (void)_this;
}
void StreamStateUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamStateUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamStateUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.StreamStateUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stream_states_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamStateUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.StreamStateInfo stream_states = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stream_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamStateUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.StreamStateUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.StreamStateInfo stream_states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stream_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stream_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.StreamStateUpdate)
  return target;
}

size_t StreamStateUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.StreamStateUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.StreamStateInfo stream_states = 1;
  total_size += 1UL * this->_internal_stream_states_size();
  for (const auto& msg : this->stream_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamStateUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamStateUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamStateUpdate::GetClassData() const { return &_class_data_; }

void StreamStateUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamStateUpdate *>(to)->MergeFrom(
      static_cast<const StreamStateUpdate &>(from));
}


void StreamStateUpdate::MergeFrom(const StreamStateUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.StreamStateUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stream_states_.MergeFrom(from.stream_states_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamStateUpdate::CopyFrom(const StreamStateUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.StreamStateUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStateUpdate::IsInitialized() const {
  return true;
}

void StreamStateUpdate::InternalSwap(StreamStateUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stream_states_.InternalSwap(&other->stream_states_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamStateUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[21]);
}

// ===================================================================

class SubscribedQuality::_Internal {
 public:
};

SubscribedQuality::SubscribedQuality(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.SubscribedQuality)
}
SubscribedQuality::SubscribedQuality(const SubscribedQuality& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&quality_, &from.quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&quality_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:livekit.SubscribedQuality)
}

inline void SubscribedQuality::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quality_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&quality_)) + sizeof(enabled_));
}

SubscribedQuality::~SubscribedQuality() {
  // @@protoc_insertion_point(destructor:livekit.SubscribedQuality)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscribedQuality::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubscribedQuality::ArenaDtor(void* object) {
  SubscribedQuality* _this = reinterpret_cast< SubscribedQuality* >(object);
  (void)_this;
}
void SubscribedQuality::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribedQuality::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribedQuality::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SubscribedQuality)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&quality_)) + sizeof(enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribedQuality::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.VideoQuality quality = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_quality(static_cast<::livekit::VideoQuality>(val));
        } else
          goto handle_unusual;
        continue;
      // bool enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribedQuality::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SubscribedQuality)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.VideoQuality quality = 1;
  if (this->_internal_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_quality(), target);
  }

  // bool enabled = 2;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SubscribedQuality)
  return target;
}

size_t SubscribedQuality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SubscribedQuality)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.VideoQuality quality = 1;
  if (this->_internal_quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_quality());
  }

  // bool enabled = 2;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribedQuality::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscribedQuality::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribedQuality::GetClassData() const { return &_class_data_; }

void SubscribedQuality::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubscribedQuality *>(to)->MergeFrom(
      static_cast<const SubscribedQuality &>(from));
}


void SubscribedQuality::MergeFrom(const SubscribedQuality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.SubscribedQuality)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_quality() != 0) {
    _internal_set_quality(from._internal_quality());
  }
  if (from._internal_enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribedQuality::CopyFrom(const SubscribedQuality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SubscribedQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribedQuality::IsInitialized() const {
  return true;
}

void SubscribedQuality::InternalSwap(SubscribedQuality* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribedQuality, enabled_)
      + sizeof(SubscribedQuality::enabled_)
      - PROTOBUF_FIELD_OFFSET(SubscribedQuality, quality_)>(
          reinterpret_cast<char*>(&quality_),
          reinterpret_cast<char*>(&other->quality_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribedQuality::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[22]);
}

// ===================================================================

class SubscribedCodec::_Internal {
 public:
};

SubscribedCodec::SubscribedCodec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  qualities_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.SubscribedCodec)
}
SubscribedCodec::SubscribedCodec(const SubscribedCodec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      qualities_(from.qualities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  codec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codec().empty()) {
    codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_codec(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SubscribedCodec)
}

inline void SubscribedCodec::SharedCtor() {
codec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscribedCodec::~SubscribedCodec() {
  // @@protoc_insertion_point(destructor:livekit.SubscribedCodec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscribedCodec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  codec_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubscribedCodec::ArenaDtor(void* object) {
  SubscribedCodec* _this = reinterpret_cast< SubscribedCodec* >(object);
  (void)_this;
}
void SubscribedCodec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribedCodec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribedCodec::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SubscribedCodec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qualities_.Clear();
  codec_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribedCodec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string codec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_codec();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.SubscribedCodec.codec"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.SubscribedQuality qualities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_qualities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribedCodec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SubscribedCodec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string codec = 1;
  if (!this->_internal_codec().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codec().data(), static_cast<int>(this->_internal_codec().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SubscribedCodec.codec");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_codec(), target);
  }

  // repeated .livekit.SubscribedQuality qualities = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_qualities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_qualities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SubscribedCodec)
  return target;
}

size_t SubscribedCodec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SubscribedCodec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.SubscribedQuality qualities = 2;
  total_size += 1UL * this->_internal_qualities_size();
  for (const auto& msg : this->qualities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string codec = 1;
  if (!this->_internal_codec().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribedCodec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscribedCodec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribedCodec::GetClassData() const { return &_class_data_; }

void SubscribedCodec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubscribedCodec *>(to)->MergeFrom(
      static_cast<const SubscribedCodec &>(from));
}


void SubscribedCodec::MergeFrom(const SubscribedCodec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.SubscribedCodec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  qualities_.MergeFrom(from.qualities_);
  if (!from._internal_codec().empty()) {
    _internal_set_codec(from._internal_codec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribedCodec::CopyFrom(const SubscribedCodec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SubscribedCodec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribedCodec::IsInitialized() const {
  return true;
}

void SubscribedCodec::InternalSwap(SubscribedCodec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  qualities_.InternalSwap(&other->qualities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &codec_, lhs_arena,
      &other->codec_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribedCodec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[23]);
}

// ===================================================================

class SubscribedQualityUpdate::_Internal {
 public:
};

SubscribedQualityUpdate::SubscribedQualityUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  subscribed_qualities_(arena),
  subscribed_codecs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.SubscribedQualityUpdate)
}
SubscribedQualityUpdate::SubscribedQualityUpdate(const SubscribedQualityUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      subscribed_qualities_(from.subscribed_qualities_),
      subscribed_codecs_(from.subscribed_codecs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  track_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    track_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_track_sid().empty()) {
    track_sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_track_sid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SubscribedQualityUpdate)
}

inline void SubscribedQualityUpdate::SharedCtor() {
track_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  track_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscribedQualityUpdate::~SubscribedQualityUpdate() {
  // @@protoc_insertion_point(destructor:livekit.SubscribedQualityUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscribedQualityUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  track_sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubscribedQualityUpdate::ArenaDtor(void* object) {
  SubscribedQualityUpdate* _this = reinterpret_cast< SubscribedQualityUpdate* >(object);
  (void)_this;
}
void SubscribedQualityUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribedQualityUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribedQualityUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SubscribedQualityUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscribed_qualities_.Clear();
  subscribed_codecs_.Clear();
  track_sid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribedQualityUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string track_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.SubscribedQualityUpdate.track_sid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.SubscribedQuality subscribed_qualities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscribed_qualities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.SubscribedCodec subscribed_codecs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscribed_codecs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribedQualityUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SubscribedQualityUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SubscribedQualityUpdate.track_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_track_sid(), target);
  }

  // repeated .livekit.SubscribedQuality subscribed_qualities = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subscribed_qualities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_subscribed_qualities(i), target, stream);
  }

  // repeated .livekit.SubscribedCodec subscribed_codecs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subscribed_codecs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_subscribed_codecs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SubscribedQualityUpdate)
  return target;
}

size_t SubscribedQualityUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SubscribedQualityUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.SubscribedQuality subscribed_qualities = 2;
  total_size += 1UL * this->_internal_subscribed_qualities_size();
  for (const auto& msg : this->subscribed_qualities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.SubscribedCodec subscribed_codecs = 3;
  total_size += 1UL * this->_internal_subscribed_codecs_size();
  for (const auto& msg : this->subscribed_codecs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribedQualityUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscribedQualityUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribedQualityUpdate::GetClassData() const { return &_class_data_; }

void SubscribedQualityUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubscribedQualityUpdate *>(to)->MergeFrom(
      static_cast<const SubscribedQualityUpdate &>(from));
}


void SubscribedQualityUpdate::MergeFrom(const SubscribedQualityUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.SubscribedQualityUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  subscribed_qualities_.MergeFrom(from.subscribed_qualities_);
  subscribed_codecs_.MergeFrom(from.subscribed_codecs_);
  if (!from._internal_track_sid().empty()) {
    _internal_set_track_sid(from._internal_track_sid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribedQualityUpdate::CopyFrom(const SubscribedQualityUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SubscribedQualityUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribedQualityUpdate::IsInitialized() const {
  return true;
}

void SubscribedQualityUpdate::InternalSwap(SubscribedQualityUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  subscribed_qualities_.InternalSwap(&other->subscribed_qualities_);
  subscribed_codecs_.InternalSwap(&other->subscribed_codecs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &track_sid_, lhs_arena,
      &other->track_sid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribedQualityUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[24]);
}

// ===================================================================

class TrackPermission::_Internal {
 public:
};

TrackPermission::TrackPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  track_sids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.TrackPermission)
}
TrackPermission::TrackPermission(const TrackPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      track_sids_(from.track_sids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  participant_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    participant_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_sid().empty()) {
    participant_sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_participant_sid(), 
      GetArenaForAllocation());
  }
  participant_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    participant_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_identity().empty()) {
    participant_identity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_participant_identity(), 
      GetArenaForAllocation());
  }
  all_tracks_ = from.all_tracks_;
  // @@protoc_insertion_point(copy_constructor:livekit.TrackPermission)
}

inline void TrackPermission::SharedCtor() {
participant_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  participant_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
participant_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  participant_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
all_tracks_ = false;
}

TrackPermission::~TrackPermission() {
  // @@protoc_insertion_point(destructor:livekit.TrackPermission)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrackPermission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  participant_sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  participant_identity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrackPermission::ArenaDtor(void* object) {
  TrackPermission* _this = reinterpret_cast< TrackPermission* >(object);
  (void)_this;
}
void TrackPermission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackPermission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrackPermission)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  track_sids_.Clear();
  participant_sid_.ClearToEmpty();
  participant_identity_.ClearToEmpty();
  all_tracks_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackPermission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string participant_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.TrackPermission.participant_sid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool all_tracks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          all_tracks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string track_sids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_track_sids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.TrackPermission.track_sids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string participant_identity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.TrackPermission.participant_identity"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackPermission::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrackPermission)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_sid().data(), static_cast<int>(this->_internal_participant_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackPermission.participant_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_sid(), target);
  }

  // bool all_tracks = 2;
  if (this->_internal_all_tracks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_all_tracks(), target);
  }

  // repeated string track_sids = 3;
  for (int i = 0, n = this->_internal_track_sids_size(); i < n; i++) {
    const auto& s = this->_internal_track_sids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackPermission.track_sids");
    target = stream->WriteString(3, s, target);
  }

  // string participant_identity = 4;
  if (!this->_internal_participant_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackPermission.participant_identity");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_participant_identity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrackPermission)
  return target;
}

size_t TrackPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.TrackPermission)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string track_sids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(track_sids_.size());
  for (int i = 0, n = track_sids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      track_sids_.Get(i));
  }

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_sid());
  }

  // string participant_identity = 4;
  if (!this->_internal_participant_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  // bool all_tracks = 2;
  if (this->_internal_all_tracks() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackPermission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrackPermission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackPermission::GetClassData() const { return &_class_data_; }

void TrackPermission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrackPermission *>(to)->MergeFrom(
      static_cast<const TrackPermission &>(from));
}


void TrackPermission::MergeFrom(const TrackPermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrackPermission)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  track_sids_.MergeFrom(from.track_sids_);
  if (!from._internal_participant_sid().empty()) {
    _internal_set_participant_sid(from._internal_participant_sid());
  }
  if (!from._internal_participant_identity().empty()) {
    _internal_set_participant_identity(from._internal_participant_identity());
  }
  if (from._internal_all_tracks() != 0) {
    _internal_set_all_tracks(from._internal_all_tracks());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackPermission::CopyFrom(const TrackPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrackPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackPermission::IsInitialized() const {
  return true;
}

void TrackPermission::InternalSwap(TrackPermission* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  track_sids_.InternalSwap(&other->track_sids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &participant_sid_, lhs_arena,
      &other->participant_sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &participant_identity_, lhs_arena,
      &other->participant_identity_, rhs_arena
  );
  swap(all_tracks_, other->all_tracks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackPermission::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[25]);
}

// ===================================================================

class SubscriptionPermission::_Internal {
 public:
};

SubscriptionPermission::SubscriptionPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  track_permissions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.SubscriptionPermission)
}
SubscriptionPermission::SubscriptionPermission(const SubscriptionPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      track_permissions_(from.track_permissions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  all_participants_ = from.all_participants_;
  // @@protoc_insertion_point(copy_constructor:livekit.SubscriptionPermission)
}

inline void SubscriptionPermission::SharedCtor() {
all_participants_ = false;
}

SubscriptionPermission::~SubscriptionPermission() {
  // @@protoc_insertion_point(destructor:livekit.SubscriptionPermission)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscriptionPermission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubscriptionPermission::ArenaDtor(void* object) {
  SubscriptionPermission* _this = reinterpret_cast< SubscriptionPermission* >(object);
  (void)_this;
}
void SubscriptionPermission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscriptionPermission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscriptionPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SubscriptionPermission)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  track_permissions_.Clear();
  all_participants_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionPermission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool all_participants = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          all_participants_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.TrackPermission track_permissions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_track_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionPermission::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SubscriptionPermission)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool all_participants = 1;
  if (this->_internal_all_participants() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_all_participants(), target);
  }

  // repeated .livekit.TrackPermission track_permissions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_track_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_track_permissions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SubscriptionPermission)
  return target;
}

size_t SubscriptionPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SubscriptionPermission)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.TrackPermission track_permissions = 2;
  total_size += 1UL * this->_internal_track_permissions_size();
  for (const auto& msg : this->track_permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool all_participants = 1;
  if (this->_internal_all_participants() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionPermission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscriptionPermission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionPermission::GetClassData() const { return &_class_data_; }

void SubscriptionPermission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubscriptionPermission *>(to)->MergeFrom(
      static_cast<const SubscriptionPermission &>(from));
}


void SubscriptionPermission::MergeFrom(const SubscriptionPermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.SubscriptionPermission)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  track_permissions_.MergeFrom(from.track_permissions_);
  if (from._internal_all_participants() != 0) {
    _internal_set_all_participants(from._internal_all_participants());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionPermission::CopyFrom(const SubscriptionPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SubscriptionPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionPermission::IsInitialized() const {
  return true;
}

void SubscriptionPermission::InternalSwap(SubscriptionPermission* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  track_permissions_.InternalSwap(&other->track_permissions_);
  swap(all_participants_, other->all_participants_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionPermission::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[26]);
}

// ===================================================================

class SubscriptionPermissionUpdate::_Internal {
 public:
};

SubscriptionPermissionUpdate::SubscriptionPermissionUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.SubscriptionPermissionUpdate)
}
SubscriptionPermissionUpdate::SubscriptionPermissionUpdate(const SubscriptionPermissionUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  participant_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    participant_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_sid().empty()) {
    participant_sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_participant_sid(), 
      GetArenaForAllocation());
  }
  track_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    track_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_track_sid().empty()) {
    track_sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_track_sid(), 
      GetArenaForAllocation());
  }
  allowed_ = from.allowed_;
  // @@protoc_insertion_point(copy_constructor:livekit.SubscriptionPermissionUpdate)
}

inline void SubscriptionPermissionUpdate::SharedCtor() {
participant_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  participant_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
track_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  track_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
allowed_ = false;
}

SubscriptionPermissionUpdate::~SubscriptionPermissionUpdate() {
  // @@protoc_insertion_point(destructor:livekit.SubscriptionPermissionUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscriptionPermissionUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  participant_sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  track_sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubscriptionPermissionUpdate::ArenaDtor(void* object) {
  SubscriptionPermissionUpdate* _this = reinterpret_cast< SubscriptionPermissionUpdate* >(object);
  (void)_this;
}
void SubscriptionPermissionUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscriptionPermissionUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscriptionPermissionUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SubscriptionPermissionUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  participant_sid_.ClearToEmpty();
  track_sid_.ClearToEmpty();
  allowed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionPermissionUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string participant_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.SubscriptionPermissionUpdate.participant_sid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string track_sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.SubscriptionPermissionUpdate.track_sid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allowed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionPermissionUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SubscriptionPermissionUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_sid().data(), static_cast<int>(this->_internal_participant_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SubscriptionPermissionUpdate.participant_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_sid(), target);
  }

  // string track_sid = 2;
  if (!this->_internal_track_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SubscriptionPermissionUpdate.track_sid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_track_sid(), target);
  }

  // bool allowed = 3;
  if (this->_internal_allowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SubscriptionPermissionUpdate)
  return target;
}

size_t SubscriptionPermissionUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SubscriptionPermissionUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_sid());
  }

  // string track_sid = 2;
  if (!this->_internal_track_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  // bool allowed = 3;
  if (this->_internal_allowed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionPermissionUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscriptionPermissionUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionPermissionUpdate::GetClassData() const { return &_class_data_; }

void SubscriptionPermissionUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubscriptionPermissionUpdate *>(to)->MergeFrom(
      static_cast<const SubscriptionPermissionUpdate &>(from));
}


void SubscriptionPermissionUpdate::MergeFrom(const SubscriptionPermissionUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.SubscriptionPermissionUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_participant_sid().empty()) {
    _internal_set_participant_sid(from._internal_participant_sid());
  }
  if (!from._internal_track_sid().empty()) {
    _internal_set_track_sid(from._internal_track_sid());
  }
  if (from._internal_allowed() != 0) {
    _internal_set_allowed(from._internal_allowed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionPermissionUpdate::CopyFrom(const SubscriptionPermissionUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SubscriptionPermissionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionPermissionUpdate::IsInitialized() const {
  return true;
}

void SubscriptionPermissionUpdate::InternalSwap(SubscriptionPermissionUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &participant_sid_, lhs_arena,
      &other->participant_sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &track_sid_, lhs_arena,
      &other->track_sid_, rhs_arena
  );
  swap(allowed_, other->allowed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionPermissionUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[27]);
}

// ===================================================================

class SyncState::_Internal {
 public:
  static const ::livekit::SessionDescription& answer(const SyncState* msg);
  static const ::livekit::UpdateSubscription& subscription(const SyncState* msg);
};

const ::livekit::SessionDescription&
SyncState::_Internal::answer(const SyncState* msg) {
  return *msg->answer_;
}
const ::livekit::UpdateSubscription&
SyncState::_Internal::subscription(const SyncState* msg) {
  return *msg->subscription_;
}
SyncState::SyncState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  publish_tracks_(arena),
  data_channels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.SyncState)
}
SyncState::SyncState(const SyncState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      publish_tracks_(from.publish_tracks_),
      data_channels_(from.data_channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_answer()) {
    answer_ = new ::livekit::SessionDescription(*from.answer_);
  } else {
    answer_ = nullptr;
  }
  if (from._internal_has_subscription()) {
    subscription_ = new ::livekit::UpdateSubscription(*from.subscription_);
  } else {
    subscription_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SyncState)
}

inline void SyncState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&answer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subscription_) -
    reinterpret_cast<char*>(&answer_)) + sizeof(subscription_));
}

SyncState::~SyncState() {
  // @@protoc_insertion_point(destructor:livekit.SyncState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SyncState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete answer_;
  if (this != internal_default_instance()) delete subscription_;
}

void SyncState::ArenaDtor(void* object) {
  SyncState* _this = reinterpret_cast< SyncState* >(object);
  (void)_this;
}
void SyncState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncState::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SyncState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publish_tracks_.Clear();
  data_channels_.Clear();
  if (GetArenaForAllocation() == nullptr && answer_ != nullptr) {
    delete answer_;
  }
  answer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && subscription_ != nullptr) {
    delete subscription_;
  }
  subscription_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.SessionDescription answer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_answer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.UpdateSubscription subscription = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscription(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.TrackPublishedResponse publish_tracks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publish_tracks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.DataChannelInfo data_channels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SyncState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.SessionDescription answer = 1;
  if (this->_internal_has_answer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::answer(this), target, stream);
  }

  // .livekit.UpdateSubscription subscription = 2;
  if (this->_internal_has_subscription()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::subscription(this), target, stream);
  }

  // repeated .livekit.TrackPublishedResponse publish_tracks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_publish_tracks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_publish_tracks(i), target, stream);
  }

  // repeated .livekit.DataChannelInfo data_channels = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_data_channels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SyncState)
  return target;
}

size_t SyncState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SyncState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.TrackPublishedResponse publish_tracks = 3;
  total_size += 1UL * this->_internal_publish_tracks_size();
  for (const auto& msg : this->publish_tracks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.DataChannelInfo data_channels = 4;
  total_size += 1UL * this->_internal_data_channels_size();
  for (const auto& msg : this->data_channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .livekit.SessionDescription answer = 1;
  if (this->_internal_has_answer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *answer_);
  }

  // .livekit.UpdateSubscription subscription = 2;
  if (this->_internal_has_subscription()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subscription_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SyncState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncState::GetClassData() const { return &_class_data_; }

void SyncState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SyncState *>(to)->MergeFrom(
      static_cast<const SyncState &>(from));
}


void SyncState::MergeFrom(const SyncState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.SyncState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  publish_tracks_.MergeFrom(from.publish_tracks_);
  data_channels_.MergeFrom(from.data_channels_);
  if (from._internal_has_answer()) {
    _internal_mutable_answer()->::livekit::SessionDescription::MergeFrom(from._internal_answer());
  }
  if (from._internal_has_subscription()) {
    _internal_mutable_subscription()->::livekit::UpdateSubscription::MergeFrom(from._internal_subscription());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncState::CopyFrom(const SyncState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SyncState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncState::IsInitialized() const {
  return true;
}

void SyncState::InternalSwap(SyncState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  publish_tracks_.InternalSwap(&other->publish_tracks_);
  data_channels_.InternalSwap(&other->data_channels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncState, subscription_)
      + sizeof(SyncState::subscription_)
      - PROTOBUF_FIELD_OFFSET(SyncState, answer_)>(
          reinterpret_cast<char*>(&answer_),
          reinterpret_cast<char*>(&other->answer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[28]);
}

// ===================================================================

class DataChannelInfo::_Internal {
 public:
};

DataChannelInfo::DataChannelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.DataChannelInfo)
}
DataChannelInfo::DataChannelInfo(const DataChannelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&id_)) + sizeof(target_));
  // @@protoc_insertion_point(copy_constructor:livekit.DataChannelInfo)
}

inline void DataChannelInfo::SharedCtor() {
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&id_)) + sizeof(target_));
}

DataChannelInfo::~DataChannelInfo() {
  // @@protoc_insertion_point(destructor:livekit.DataChannelInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataChannelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataChannelInfo::ArenaDtor(void* object) {
  DataChannelInfo* _this = reinterpret_cast< DataChannelInfo* >(object);
  (void)_this;
}
void DataChannelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataChannelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataChannelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DataChannelInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_) -
      reinterpret_cast<char*>(&id_)) + sizeof(target_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataChannelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "livekit.DataChannelInfo.label"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SignalTarget target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_target(static_cast<::livekit::SignalTarget>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataChannelInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DataChannelInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 1;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.DataChannelInfo.label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // uint32 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // .livekit.SignalTarget target = 3;
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DataChannelInfo)
  return target;
}

size_t DataChannelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.DataChannelInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 1;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // uint32 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // .livekit.SignalTarget target = 3;
  if (this->_internal_target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_target());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataChannelInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataChannelInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataChannelInfo::GetClassData() const { return &_class_data_; }

void DataChannelInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataChannelInfo *>(to)->MergeFrom(
      static_cast<const DataChannelInfo &>(from));
}


void DataChannelInfo::MergeFrom(const DataChannelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.DataChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_label().empty()) {
    _internal_set_label(from._internal_label());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_target() != 0) {
    _internal_set_target(from._internal_target());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataChannelInfo::CopyFrom(const DataChannelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DataChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataChannelInfo::IsInitialized() const {
  return true;
}

void DataChannelInfo::InternalSwap(DataChannelInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &label_, lhs_arena,
      &other->label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataChannelInfo, target_)
      + sizeof(DataChannelInfo::target_)
      - PROTOBUF_FIELD_OFFSET(DataChannelInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataChannelInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[29]);
}

// ===================================================================

class SimulateScenario::_Internal {
 public:
};

SimulateScenario::SimulateScenario(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.SimulateScenario)
}
SimulateScenario::SimulateScenario(const SimulateScenario& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_scenario();
  switch (from.scenario_case()) {
    case kSpeakerUpdate: {
      _internal_set_speaker_update(from._internal_speaker_update());
      break;
    }
    case kNodeFailure: {
      _internal_set_node_failure(from._internal_node_failure());
      break;
    }
    case kMigration: {
      _internal_set_migration(from._internal_migration());
      break;
    }
    case kServerLeave: {
      _internal_set_server_leave(from._internal_server_leave());
      break;
    }
    case SCENARIO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SimulateScenario)
}

inline void SimulateScenario::SharedCtor() {
clear_has_scenario();
}

SimulateScenario::~SimulateScenario() {
  // @@protoc_insertion_point(destructor:livekit.SimulateScenario)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimulateScenario::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_scenario()) {
    clear_scenario();
  }
}

void SimulateScenario::ArenaDtor(void* object) {
  SimulateScenario* _this = reinterpret_cast< SimulateScenario* >(object);
  (void)_this;
}
void SimulateScenario::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulateScenario::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimulateScenario::clear_scenario() {
// @@protoc_insertion_point(one_of_clear_start:livekit.SimulateScenario)
  switch (scenario_case()) {
    case kSpeakerUpdate: {
      // No need to clear
      break;
    }
    case kNodeFailure: {
      // No need to clear
      break;
    }
    case kMigration: {
      // No need to clear
      break;
    }
    case kServerLeave: {
      // No need to clear
      break;
    }
    case SCENARIO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SCENARIO_NOT_SET;
}


void SimulateScenario::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SimulateScenario)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_scenario();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulateScenario::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 speaker_update = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_speaker_update(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool node_failure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_node_failure(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool migration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_migration(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool server_leave = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_server_leave(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimulateScenario::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SimulateScenario)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 speaker_update = 1;
  if (_internal_has_speaker_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_speaker_update(), target);
  }

  // bool node_failure = 2;
  if (_internal_has_node_failure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_node_failure(), target);
  }

  // bool migration = 3;
  if (_internal_has_migration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_migration(), target);
  }

  // bool server_leave = 4;
  if (_internal_has_server_leave()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_server_leave(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SimulateScenario)
  return target;
}

size_t SimulateScenario::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SimulateScenario)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (scenario_case()) {
    // int32 speaker_update = 1;
    case kSpeakerUpdate: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_speaker_update());
      break;
    }
    // bool node_failure = 2;
    case kNodeFailure: {
      total_size += 1 + 1;
      break;
    }
    // bool migration = 3;
    case kMigration: {
      total_size += 1 + 1;
      break;
    }
    // bool server_leave = 4;
    case kServerLeave: {
      total_size += 1 + 1;
      break;
    }
    case SCENARIO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimulateScenario::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimulateScenario::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimulateScenario::GetClassData() const { return &_class_data_; }

void SimulateScenario::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimulateScenario *>(to)->MergeFrom(
      static_cast<const SimulateScenario &>(from));
}


void SimulateScenario::MergeFrom(const SimulateScenario& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:livekit.SimulateScenario)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.scenario_case()) {
    case kSpeakerUpdate: {
      _internal_set_speaker_update(from._internal_speaker_update());
      break;
    }
    case kNodeFailure: {
      _internal_set_node_failure(from._internal_node_failure());
      break;
    }
    case kMigration: {
      _internal_set_migration(from._internal_migration());
      break;
    }
    case kServerLeave: {
      _internal_set_server_leave(from._internal_server_leave());
      break;
    }
    case SCENARIO_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimulateScenario::CopyFrom(const SimulateScenario& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SimulateScenario)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulateScenario::IsInitialized() const {
  return true;
}

void SimulateScenario::InternalSwap(SimulateScenario* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(scenario_, other->scenario_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulateScenario::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[30]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::livekit::SignalRequest* Arena::CreateMaybeMessage< ::livekit::SignalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SignalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SignalResponse* Arena::CreateMaybeMessage< ::livekit::SignalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SignalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SimulcastCodec* Arena::CreateMaybeMessage< ::livekit::SimulcastCodec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SimulcastCodec >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::AddTrackRequest* Arena::CreateMaybeMessage< ::livekit::AddTrackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::AddTrackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::TrickleRequest* Arena::CreateMaybeMessage< ::livekit::TrickleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::TrickleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::MuteTrackRequest* Arena::CreateMaybeMessage< ::livekit::MuteTrackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::MuteTrackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::JoinResponse* Arena::CreateMaybeMessage< ::livekit::JoinResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::JoinResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::TrackPublishedResponse* Arena::CreateMaybeMessage< ::livekit::TrackPublishedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::TrackPublishedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::TrackUnpublishedResponse* Arena::CreateMaybeMessage< ::livekit::TrackUnpublishedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::TrackUnpublishedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SessionDescription* Arena::CreateMaybeMessage< ::livekit::SessionDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SessionDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ParticipantUpdate* Arena::CreateMaybeMessage< ::livekit::ParticipantUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ParticipantUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UpdateSubscription* Arena::CreateMaybeMessage< ::livekit::UpdateSubscription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UpdateSubscription >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UpdateTrackSettings* Arena::CreateMaybeMessage< ::livekit::UpdateTrackSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UpdateTrackSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::LeaveRequest* Arena::CreateMaybeMessage< ::livekit::LeaveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::LeaveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UpdateVideoLayers* Arena::CreateMaybeMessage< ::livekit::UpdateVideoLayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UpdateVideoLayers >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ICEServer* Arena::CreateMaybeMessage< ::livekit::ICEServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ICEServer >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SpeakersChanged* Arena::CreateMaybeMessage< ::livekit::SpeakersChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SpeakersChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RoomUpdate* Arena::CreateMaybeMessage< ::livekit::RoomUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RoomUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ConnectionQualityInfo* Arena::CreateMaybeMessage< ::livekit::ConnectionQualityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ConnectionQualityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ConnectionQualityUpdate* Arena::CreateMaybeMessage< ::livekit::ConnectionQualityUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ConnectionQualityUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::StreamStateInfo* Arena::CreateMaybeMessage< ::livekit::StreamStateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::StreamStateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::StreamStateUpdate* Arena::CreateMaybeMessage< ::livekit::StreamStateUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::StreamStateUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SubscribedQuality* Arena::CreateMaybeMessage< ::livekit::SubscribedQuality >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SubscribedQuality >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SubscribedCodec* Arena::CreateMaybeMessage< ::livekit::SubscribedCodec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SubscribedCodec >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SubscribedQualityUpdate* Arena::CreateMaybeMessage< ::livekit::SubscribedQualityUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SubscribedQualityUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::TrackPermission* Arena::CreateMaybeMessage< ::livekit::TrackPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::TrackPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SubscriptionPermission* Arena::CreateMaybeMessage< ::livekit::SubscriptionPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SubscriptionPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SubscriptionPermissionUpdate* Arena::CreateMaybeMessage< ::livekit::SubscriptionPermissionUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SubscriptionPermissionUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SyncState* Arena::CreateMaybeMessage< ::livekit::SyncState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SyncState >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::DataChannelInfo* Arena::CreateMaybeMessage< ::livekit::DataChannelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::DataChannelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SimulateScenario* Arena::CreateMaybeMessage< ::livekit::SimulateScenario >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SimulateScenario >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
